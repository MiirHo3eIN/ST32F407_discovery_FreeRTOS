
FreeRTOS_eventGroupsISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063bc  080063bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c4  080063c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046b0  20000010  080063dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046c0  080063dc  000246c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bf4  00000000  00000000  0003ae28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b8  00000000  00000000  0003ea20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  0003fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000243a7  00000000  00000000  00040fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001247d  00000000  00000000  0006535f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3130  00000000  00000000  000777dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a90c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f94  00000000  00000000  0014a988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800612c 	.word	0x0800612c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800612c 	.word	0x0800612c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <BlueFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlueFunc */
void BlueFunc(void const * argument)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueFunc */
	/* Internal Variables */
	BlueEvent = xEventGroupCreate();
 80004e8:	f002 ff95 	bl	8003416 <xEventGroupCreate>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b47      	ldr	r3, [pc, #284]	; (800060c <BlueFunc+0x12c>)
 80004f0:	601a      	str	r2, [r3, #0]
	EventBits_t uxBits;
    #define IS_EVT(x) 	uxBits & x
	 osDelay(1);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f002 ff7b 	bl	80033ee <osDelay>
	char *str1 = "EVENT_GROUP_BLUE_CREATED_FAIL\r\n";
 80004f8:	4b45      	ldr	r3, [pc, #276]	; (8000610 <BlueFunc+0x130>)
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
	char *str2 = "EVENT_GROUP_BLUE_CREATED_SUCCESSFULLY\r\n";
 80004fc:	4b45      	ldr	r3, [pc, #276]	; (8000614 <BlueFunc+0x134>)
 80004fe:	623b      	str	r3, [r7, #32]
	char *str3 = "==============================================\r\n";
 8000500:	4b45      	ldr	r3, [pc, #276]	; (8000618 <BlueFunc+0x138>)
 8000502:	61fb      	str	r3, [r7, #28]
	if (BlueEvent == NULL) 	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 300);
 8000504:	4b41      	ldr	r3, [pc, #260]	; (800060c <BlueFunc+0x12c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d10b      	bne.n	8000524 <BlueFunc+0x44>
 800050c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800050e:	f7ff fe5f 	bl	80001d0 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800051a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800051c:	483f      	ldr	r0, [pc, #252]	; (800061c <BlueFunc+0x13c>)
 800051e:	f002 fa9c 	bl	8002a5a <HAL_UART_Transmit>
 8000522:	e00a      	b.n	800053a <BlueFunc+0x5a>
	else 	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 300);
 8000524:	6a38      	ldr	r0, [r7, #32]
 8000526:	f7ff fe53 	bl	80001d0 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	4839      	ldr	r0, [pc, #228]	; (800061c <BlueFunc+0x13c>)
 8000536:	f002 fa90 	bl	8002a5a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 300);
 800053a:	69f8      	ldr	r0, [r7, #28]
 800053c:	f7ff fe48 	bl	80001d0 <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000548:	69f9      	ldr	r1, [r7, #28]
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <BlueFunc+0x13c>)
 800054c:	f002 fa85 	bl	8002a5a <HAL_UART_Transmit>
	configASSERT( BlueEvent );
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <BlueFunc+0x12c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d109      	bne.n	800056c <BlueFunc+0x8c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055c:	f383 8811 	msr	BASEPRI, r3
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	e7fe      	b.n	800056a <BlueFunc+0x8a>


  /* Infinite loop */
  for(;;)
  {
	  uxBits = xEventGroupWaitBits(
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <BlueFunc+0x12c>)
 800056e:	6818      	ldr	r0, [r3, #0]
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	2201      	movs	r2, #1
 8000578:	2103      	movs	r1, #3
 800057a:	f002 ff67 	bl	800344c <xEventGroupWaitBits>
 800057e:	61b8      	str	r0, [r7, #24]
							  pdTRUE,        /* BIT_0 & BIT_4 should be cleared before returning. */
							  pdFALSE,       /* Don't wait for both bits, either bit will do. */
							  100  );


	  if (IS_EVT(LED_BLUE_ON))
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	2b00      	cmp	r3, #0
 8000588:	d015      	beq.n	80005b6 <BlueFunc+0xd6>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	4823      	ldr	r0, [pc, #140]	; (8000620 <BlueFunc+0x140>)
 8000592:	f001 fa8d 	bl	8001ab0 <HAL_GPIO_WritePin>
		  char *str1 = "Blue Led Went On\r\n";
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <BlueFunc+0x144>)
 8000598:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 800059a:	6938      	ldr	r0, [r7, #16]
 800059c:	f7ff fe18 	bl	80001d0 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	6939      	ldr	r1, [r7, #16]
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <BlueFunc+0x13c>)
 80005aa:	f002 fa56 	bl	8002a5a <HAL_UART_Transmit>
		  osDelay(50);
 80005ae:	2032      	movs	r0, #50	; 0x32
 80005b0:	f002 ff1d 	bl	80033ee <osDelay>
 80005b4:	e00e      	b.n	80005d4 <BlueFunc+0xf4>
	  }
	  else
		  {
		  HAL_TIM_Base_Start_IT(&htim6);
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <BlueFunc+0x148>)
 80005b8:	f001 ff53 	bl	8002462 <HAL_TIM_Base_Start_IT>
		  char *str2 = "Timer 6 start to count\r\n\n";
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <BlueFunc+0x14c>)
 80005be:	617b      	str	r3, [r7, #20]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 100);
 80005c0:	6978      	ldr	r0, [r7, #20]
 80005c2:	f7ff fe05 	bl	80001d0 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	6979      	ldr	r1, [r7, #20]
 80005ce:	4813      	ldr	r0, [pc, #76]	; (800061c <BlueFunc+0x13c>)
 80005d0:	f002 fa43 	bl	8002a5a <HAL_UART_Transmit>
		  }
	  if (IS_EVT(SHUT_BLUE_LED))
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d011      	beq.n	8000602 <BlueFunc+0x122>
		  {
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <BlueFunc+0x140>)
 80005e6:	f001 fa63 	bl	8001ab0 <HAL_GPIO_WritePin>
			  char *str1 = "Blue Led Went OFF\r\n";
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <BlueFunc+0x150>)
 80005ec:	60fb      	str	r3, [r7, #12]
			  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f7ff fdee 	bl	80001d0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	68f9      	ldr	r1, [r7, #12]
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <BlueFunc+0x13c>)
 80005fe:	f002 fa2c 	bl	8002a5a <HAL_UART_Transmit>
		  }
    osDelay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f002 fef3 	bl	80033ee <osDelay>
	  uxBits = xEventGroupWaitBits(
 8000608:	e7b0      	b.n	800056c <BlueFunc+0x8c>
 800060a:	bf00      	nop
 800060c:	20004544 	.word	0x20004544
 8000610:	08006144 	.word	0x08006144
 8000614:	08006164 	.word	0x08006164
 8000618:	0800618c 	.word	0x0800618c
 800061c:	2000463c 	.word	0x2000463c
 8000620:	40020c00 	.word	0x40020c00
 8000624:	080061c0 	.word	0x080061c0
 8000628:	2000459c 	.word	0x2000459c
 800062c:	080061d4 	.word	0x080061d4
 8000630:	080061f0 	.word	0x080061f0

08000634 <GreenFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenFunc */
void GreenFunc(void const * argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenFunc */
	/* Internal Variables */
	GreenEvent = xEventGroupCreate();
 800063c:	f002 feeb 	bl	8003416 <xEventGroupCreate>
 8000640:	4602      	mov	r2, r0
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <GreenFunc+0x94>)
 8000644:	601a      	str	r2, [r3, #0]
	EventBits_t uxBits;
    #define IS_EVT(x) 	uxBits & x
	 osDelay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f002 fed1 	bl	80033ee <osDelay>
	char *str1 = "EVENT_GROUP_GREEN_CREATED_FAIL\r\n";
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <GreenFunc+0x98>)
 800064e:	617b      	str	r3, [r7, #20]
	char *str2 = "EVENT_GROUP_GREEN_CREATED_SUCCESSFULLY\r\n";
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <GreenFunc+0x9c>)
 8000652:	613b      	str	r3, [r7, #16]
	char *str3 = "==============================================\r\n";
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <GreenFunc+0xa0>)
 8000656:	60fb      	str	r3, [r7, #12]
	if (GreenEvent == NULL) 	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 300);
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <GreenFunc+0x94>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10b      	bne.n	8000678 <GreenFunc+0x44>
 8000660:	6978      	ldr	r0, [r7, #20]
 8000662:	f7ff fdb5 	bl	80001d0 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800066e:	6979      	ldr	r1, [r7, #20]
 8000670:	4819      	ldr	r0, [pc, #100]	; (80006d8 <GreenFunc+0xa4>)
 8000672:	f002 f9f2 	bl	8002a5a <HAL_UART_Transmit>
 8000676:	e00a      	b.n	800068e <GreenFunc+0x5a>
	else 	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 300);
 8000678:	6938      	ldr	r0, [r7, #16]
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000686:	6939      	ldr	r1, [r7, #16]
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <GreenFunc+0xa4>)
 800068a:	f002 f9e6 	bl	8002a5a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 300);
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff fd9e 	bl	80001d0 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800069c:	68f9      	ldr	r1, [r7, #12]
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <GreenFunc+0xa4>)
 80006a0:	f002 f9db 	bl	8002a5a <HAL_UART_Transmit>
	configASSERT( GreenEvent );
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <GreenFunc+0x94>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d109      	bne.n	80006c0 <GreenFunc+0x8c>
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	e7fe      	b.n	80006be <GreenFunc+0x8a>
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f002 fe94 	bl	80033ee <osDelay>
 80006c6:	e7fb      	b.n	80006c0 <GreenFunc+0x8c>
 80006c8:	20004548 	.word	0x20004548
 80006cc:	08006204 	.word	0x08006204
 80006d0:	08006228 	.word	0x08006228
 80006d4:	08006254 	.word	0x08006254
 80006d8:	2000463c 	.word	0x2000463c

080006dc <OrangeFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeFunc */
void OrangeFunc(void const * argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeFunc */
	/* Internal Variables */
	OrangeEvent = xEventGroupCreate();
 80006e4:	f002 fe97 	bl	8003416 <xEventGroupCreate>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <OrangeFunc+0x94>)
 80006ec:	601a      	str	r2, [r3, #0]
	EventBits_t uxBits;
    #define IS_EVT(x) 	uxBits & x
	 osDelay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f002 fe7d 	bl	80033ee <osDelay>
	char *str1 = "EVENT_GROUP_ORANGE_CREATED_FAIL\r\n";
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <OrangeFunc+0x98>)
 80006f6:	617b      	str	r3, [r7, #20]
	char *str2 = "EVENT_GROUP_ORANGE_CREATED_SUCCESSFULLY\r\n";
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <OrangeFunc+0x9c>)
 80006fa:	613b      	str	r3, [r7, #16]
	char *str3 = "==============================================\r\n";
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <OrangeFunc+0xa0>)
 80006fe:	60fb      	str	r3, [r7, #12]
	if (BlueEvent == NULL) 	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 300);
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <OrangeFunc+0xa4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10b      	bne.n	8000720 <OrangeFunc+0x44>
 8000708:	6978      	ldr	r0, [r7, #20]
 800070a:	f7ff fd61 	bl	80001d0 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000716:	6979      	ldr	r1, [r7, #20]
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <OrangeFunc+0xa8>)
 800071a:	f002 f99e 	bl	8002a5a <HAL_UART_Transmit>
 800071e:	e00a      	b.n	8000736 <OrangeFunc+0x5a>
	else 	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 300);
 8000720:	6938      	ldr	r0, [r7, #16]
 8000722:	f7ff fd55 	bl	80001d0 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800072e:	6939      	ldr	r1, [r7, #16]
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <OrangeFunc+0xa8>)
 8000732:	f002 f992 	bl	8002a5a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 300);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff fd4a 	bl	80001d0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000744:	68f9      	ldr	r1, [r7, #12]
 8000746:	480f      	ldr	r0, [pc, #60]	; (8000784 <OrangeFunc+0xa8>)
 8000748:	f002 f987 	bl	8002a5a <HAL_UART_Transmit>
	configASSERT( OrangeEvent );
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <OrangeFunc+0x94>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <OrangeFunc+0x8c>
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	e7fe      	b.n	8000766 <OrangeFunc+0x8a>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f002 fe40 	bl	80033ee <osDelay>
 800076e:	e7fb      	b.n	8000768 <OrangeFunc+0x8c>
 8000770:	2000454c 	.word	0x2000454c
 8000774:	08006288 	.word	0x08006288
 8000778:	080062ac 	.word	0x080062ac
 800077c:	080062d8 	.word	0x080062d8
 8000780:	20004544 	.word	0x20004544
 8000784:	2000463c 	.word	0x2000463c

08000788 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_DMA_Init+0x3c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <MX_DMA_Init+0x3c>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_DMA_Init+0x3c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2105      	movs	r1, #5
 80007ae:	2010      	movs	r0, #16
 80007b0:	f000 fcba 	bl	8001128 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007b4:	2010      	movs	r0, #16
 80007b6:	f000 fcd3 	bl	8001160 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <vApplicationGetIdleTaskMemory+0x30>)
 80007de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	2000002c 	.word	0x2000002c
 80007f8:	20000080 	.word	0x20000080

080007fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <vApplicationGetTimerTaskMemory+0x2c>)
 800080c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <vApplicationGetTimerTaskMemory+0x30>)
 8000812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	20000280 	.word	0x20000280
 800082c:	200002d4 	.word	0x200002d4

08000830 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b096      	sub	sp, #88	; 0x58
 8000834:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BlueTask */
  osThreadDef(BlueTask, BlueFunc, osPriorityNormal, 0, 128);
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_FREERTOS_Init+0x7c>)
 8000838:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800083c:	461d      	mov	r5, r3
 800083e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000842:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlueTaskHandle = osThreadCreate(osThread(BlueTask), NULL);
 800084a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fd80 	bl	8003356 <osThreadCreate>
 8000856:	4602      	mov	r2, r0
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_FREERTOS_Init+0x80>)
 800085a:	601a      	str	r2, [r3, #0]

  /* definition and creation of OrangeTask */
  osThreadDef(OrangeTask, OrangeFunc, osPriorityBelowNormal, 0, 128);
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_FREERTOS_Init+0x84>)
 800085e:	f107 0420 	add.w	r4, r7, #32
 8000862:	461d      	mov	r5, r3
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800086c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrangeTaskHandle = osThreadCreate(osThread(OrangeTask), NULL);
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fd6d 	bl	8003356 <osThreadCreate>
 800087c:	4602      	mov	r2, r0
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_FREERTOS_Init+0x88>)
 8000880:	601a      	str	r2, [r3, #0]

  /* definition and creation of GreenTask */
  osThreadDef(GreenTask, GreenFunc, osPriorityAboveNormal, 0, 128);
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_FREERTOS_Init+0x8c>)
 8000884:	1d3c      	adds	r4, r7, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenTaskHandle = osThreadCreate(osThread(GreenTask), NULL);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fd5c 	bl	8003356 <osThreadCreate>
 800089e:	4602      	mov	r2, r0
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_FREERTOS_Init+0x90>)
 80008a2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80008a4:	bf00      	nop
 80008a6:	3758      	adds	r7, #88	; 0x58
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdb0      	pop	{r4, r5, r7, pc}
 80008ac:	08006318 	.word	0x08006318
 80008b0:	20004554 	.word	0x20004554
 80008b4:	08006340 	.word	0x08006340
 80008b8:	20004550 	.word	0x20004550
 80008bc:	08006368 	.word	0x08006368
 80008c0:	20004558 	.word	0x20004558

080008c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_GPIO_Init+0xb4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a25      	ldr	r2, [pc, #148]	; (8000978 <MX_GPIO_Init+0xb4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <MX_GPIO_Init+0xb4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_GPIO_Init+0xb4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <MX_GPIO_Init+0xb4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_GPIO_Init+0xb4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_GPIO_Init+0xb4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <MX_GPIO_Init+0xb4>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_GPIO_Init+0xb4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0xb8>)
 8000936:	f001 f8bb 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093a:	2301      	movs	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_GPIO_Init+0xbc>)
 800094e:	f000 fefd 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000952:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0xb8>)
 800096c:	f000 feee 	bl	800174c <HAL_GPIO_Init>

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fad4 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f80e 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f7ff ff98 	bl	80008c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000994:	f7ff fef8 	bl	8000788 <MX_DMA_Init>
  MX_TIM6_Init();
 8000998:	f000 f9a0 	bl	8000cdc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800099c:	f000 f9fc 	bl	8000d98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80009a0:	f7ff ff46 	bl	8000830 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009a4:	f002 fcd0 	bl	8003348 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <main+0x24>
	...

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 fbad 	bl	800611a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <SystemClock_Config+0xcc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <SystemClock_Config+0xcc>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <SystemClock_Config+0xcc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <SystemClock_Config+0xd0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <SystemClock_Config+0xd0>)
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <SystemClock_Config+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a10:	2310      	movs	r3, #16
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	2302      	movs	r3, #2
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a20:	23a8      	movs	r3, #168	; 0xa8
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 f857 	bl	8001ae4 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a3c:	f000 f858 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fab0 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a6a:	f000 f841 	bl	8000af0 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3750      	adds	r7, #80	; 0x50
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40007000 	.word	0x40007000

08000a80 <Set_Event>:

/* USER CODE BEGIN 4 */
void Set_Event(void *xEventGroup, uint32_t xEvent)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	 BaseType_t xHigherPriorityTaskWoken, xResult;
	 /* xHigherPriorityTaskWoken must be initialized to pdFALSE. */
	 xHigherPriorityTaskWoken = pdFALSE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
	 /* Set bit 0 and bit 4 in xEventGroup. */
	 xResult = xEventGroupSetBitsFromISR( 	xEventGroup, /* The event group being updated. */
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <Set_Event+0x44>)
 8000a98:	f004 fed6 	bl	8005848 <xTimerPendFunctionCallFromISR>
 8000a9c:	60f8      	str	r0, [r7, #12]
									 	 	xEvent, /* The bits being set. */
											&xHigherPriorityTaskWoken );
	 /* Was the message posted successfully? */
	 if( xResult != pdFAIL )
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00a      	beq.n	8000aba <Set_Event+0x3a>
	 {
	 /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	 switch should be requested. The macro used is port specific and will
	 be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	 the documentation page for the port being used. */
	 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <Set_Event+0x3a>
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <Set_Event+0x48>)
 8000aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	f3bf 8f6f 	isb	sy
	 }

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	080036f3 	.word	0x080036f3
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 fa4b 	bl	8000f78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010000 	.word	0x40010000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_MspInit+0x54>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_MspInit+0x54>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x54>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_MspInit+0x54>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_MspInit+0x54>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_MspInit+0x54>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 faef 	bl	8001128 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2019      	movs	r0, #25
 8000b6e:	f000 fadb 	bl	8001128 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 faf4 	bl	8001160 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fc02 	bl	80023a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ba4:	f001 fbec 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_InitTick+0xa8>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_InitTick+0xac>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <HAL_InitTick+0xb0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_InitTick+0xac>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_InitTick+0xac>)
 8000bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_InitTick+0xac>)
 8000bde:	f001 fc15 	bl	800240c <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_InitTick+0xac>)
 8000bea:	f001 fc3a 	bl	8002462 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	2000455c 	.word	0x2000455c
 8000c08:	40010000 	.word	0x40010000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <DMA1_Stream5_IRQHandler+0x10>)
 8000c46:	f000 fb47 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200045dc 	.word	0x200045dc

08000c54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c5a:	f001 fc51 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000455c 	.word	0x2000455c

08000c68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <TIM6_DAC_IRQHandler+0x3c>)
 8000c6e:	f001 fc47 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim6);
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <TIM6_DAC_IRQHandler+0x3c>)
 8000c74:	f001 fc19 	bl	80024aa <HAL_TIM_Base_Stop_IT>
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <TIM6_DAC_IRQHandler+0x40>)
 8000c7c:	f000 ff00 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d106      	bne.n	8000c94 <TIM6_DAC_IRQHandler+0x2c>
  {
	  	  Set_Event(BlueEvent, LED_BLUE_ON);
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <TIM6_DAC_IRQHandler+0x44>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fef7 	bl	8000a80 <Set_Event>

  }
  else Set_Event(BlueEvent, SHUT_BLUE_LED);

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c92:	e005      	b.n	8000ca0 <TIM6_DAC_IRQHandler+0x38>
  else Set_Event(BlueEvent, SHUT_BLUE_LED);
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <TIM6_DAC_IRQHandler+0x44>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fef0 	bl	8000a80 <Set_Event>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000459c 	.word	0x2000459c
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	20004544 	.word	0x20004544

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SystemInit+0x28>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <SystemInit+0x28>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x28>)
 8000cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cf2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000cf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d00:	2263      	movs	r2, #99	; 0x63
 8000d02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d0c:	f001 fb7e 	bl	800240c <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d16:	f7ff feeb 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d28:	f001 fdba 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d32:	f7ff fedd 	bl	8000af0 <Error_Handler>
  }

}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000459c 	.word	0x2000459c
 8000d44:	40001000 	.word	0x40001000

08000d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_TIM_Base_MspInit+0x48>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d115      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_TIM_Base_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_TIM_Base_MspInit+0x4c>)
 8000d64:	f043 0310 	orr.w	r3, r3, #16
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_TIM_Base_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 0310 	and.w	r3, r3, #16
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2036      	movs	r0, #54	; 0x36
 8000d7c:	f000 f9d4 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d80:	2036      	movs	r0, #54	; 0x36
 8000d82:	f000 f9ed 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40001000 	.word	0x40001000
 8000d94:	40023800 	.word	0x40023800

08000d98 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f001 fdf6 	bl	80029c0 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f7ff fe89 	bl	8000af0 <Error_Handler>
  }

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000463c 	.word	0x2000463c
 8000de8:	40004400 	.word	0x40004400

08000dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <HAL_UART_MspInit+0xe0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d159      	bne.n	8000ec2 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_UART_MspInit+0xe4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e46:	230c      	movs	r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0xe8>)
 8000e62:	f000 fc73 	bl	800174c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_UART_MspInit+0xf0>)
 8000e6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e86:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000ea8:	f000 f968 	bl	800117c <HAL_DMA_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000eb2:	f7ff fe1d 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_UART_MspInit+0xec>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	200045dc 	.word	0x200045dc
 8000edc:	40026088 	.word	0x40026088

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ee6:	e003      	b.n	8000ef0 <LoopCopyDataInit>

08000ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eee:	3104      	adds	r1, #4

08000ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ef8:	d3f6      	bcc.n	8000ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000efc:	e002      	b.n	8000f04 <LoopFillZerobss>

08000efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f00:	f842 3b04 	str.w	r3, [r2], #4

08000f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f08:	d3f9      	bcc.n	8000efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff fed1 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f005 f8d5 	bl	80060bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fd37 	bl	8000984 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f1c:	080063cc 	.word	0x080063cc
  ldr  r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f24:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000f28:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000f2c:	200046c0 	.word	0x200046c0

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f8d8 	bl	8001112 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fdf8 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fdca 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	2000467c 	.word	0x2000467c

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000467c 	.word	0x2000467c

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff4c 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff61 	bl	8001000 <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb1 	bl	80010ac <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff80 	bl	8001058 <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff54 	bl	800101c <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ff0a 	bl	8000fa0 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e099      	b.n	80012cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b8:	e00f      	b.n	80011da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ba:	f7ff fef1 	bl	8000fa0 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d908      	bls.n	80011da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2220      	movs	r2, #32
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e078      	b.n	80012cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e8      	bne.n	80011ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_DMA_Init+0x158>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	2b04      	cmp	r3, #4
 8001232:	d107      	bne.n	8001244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4313      	orrs	r3, r2
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f023 0307 	bic.w	r3, r3, #7
 800125a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	4313      	orrs	r3, r2
 8001264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	2b04      	cmp	r3, #4
 800126c:	d117      	bne.n	800129e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00e      	beq.n	800129e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f9e9 	bl	8001658 <DMA_CheckFifoParam>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2240      	movs	r2, #64	; 0x40
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800129a:	2301      	movs	r3, #1
 800129c:	e016      	b.n	80012cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f9a0 	bl	80015ec <DMA_CalcBaseAndBitshift>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	223f      	movs	r2, #63	; 0x3f
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	f010803f 	.word	0xf010803f

080012d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e4:	4b92      	ldr	r3, [pc, #584]	; (8001530 <HAL_DMA_IRQHandler+0x258>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a92      	ldr	r2, [pc, #584]	; (8001534 <HAL_DMA_IRQHandler+0x25c>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a9b      	lsrs	r3, r3, #10
 80012f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2208      	movs	r2, #8
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2208      	movs	r2, #8
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2201      	movs	r2, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2204      	movs	r2, #4
 8001380:	409a      	lsls	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2204      	movs	r2, #4
 800139e:	409a      	lsls	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	f043 0204 	orr.w	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2210      	movs	r2, #16
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d043      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d03c      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2210      	movs	r2, #16
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d018      	beq.n	800141a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d024      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
 8001406:	e01f      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01b      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e016      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2220      	movs	r2, #32
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 808e 	beq.w	8001576 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8086 	beq.w	8001576 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	2220      	movs	r2, #32
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d136      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0216 	bic.w	r2, r2, #22
 8001490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	223f      	movs	r2, #63	; 0x3f
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07d      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
        }
        return;
 80014ee:	e078      	b.n	80015e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01c      	beq.n	8001538 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d108      	bne.n	800151e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	2b00      	cmp	r3, #0
 8001512:	d030      	beq.n	8001576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e02b      	b.n	8001576 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d027      	beq.n	8001576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
 800152e:	e022      	b.n	8001576 <HAL_DMA_IRQHandler+0x29e>
 8001530:	20000000 	.word	0x20000000
 8001534:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0210 	bic.w	r2, r2, #16
 8001554:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	2b00      	cmp	r3, #0
 800157c:	d032      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d022      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3301      	adds	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d307      	bcc.n	80015be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f2      	bne.n	80015a2 <HAL_DMA_IRQHandler+0x2ca>
 80015bc:	e000      	b.n	80015c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
 80015e0:	e000      	b.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015e2:	bf00      	nop
    }
  }
}
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop

080015ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3b10      	subs	r3, #16
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <DMA_CalcBaseAndBitshift+0x64>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <DMA_CalcBaseAndBitshift+0x68>)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d909      	bls.n	800162e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	1d1a      	adds	r2, r3, #4
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	659a      	str	r2, [r3, #88]	; 0x58
 800162c:	e007      	b.n	800163e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	aaaaaaab 	.word	0xaaaaaaab
 8001654:	080063b4 	.word	0x080063b4

08001658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11f      	bne.n	80016b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d855      	bhi.n	8001724 <DMA_CheckFifoParam+0xcc>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <DMA_CheckFifoParam+0x28>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001691 	.word	0x08001691
 8001684:	080016a3 	.word	0x080016a3
 8001688:	08001691 	.word	0x08001691
 800168c:	08001725 	.word	0x08001725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d045      	beq.n	8001728 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a0:	e042      	b.n	8001728 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016aa:	d13f      	bne.n	800172c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b0:	e03c      	b.n	800172c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ba:	d121      	bne.n	8001700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d836      	bhi.n	8001730 <DMA_CheckFifoParam+0xd8>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x70>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016df 	.word	0x080016df
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	080016f1 	.word	0x080016f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
      break;
 80016dc:	e02f      	b.n	800173e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d024      	beq.n	8001734 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ee:	e021      	b.n	8001734 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f8:	d11e      	bne.n	8001738 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016fe:	e01b      	b.n	8001738 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d902      	bls.n	800170c <DMA_CheckFifoParam+0xb4>
 8001706:	2b03      	cmp	r3, #3
 8001708:	d003      	beq.n	8001712 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800170a:	e018      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
      break;
 8001710:	e015      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00e      	beq.n	800173c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
      break;
 8001722:	e00b      	b.n	800173c <DMA_CheckFifoParam+0xe4>
      break;
 8001724:	bf00      	nop
 8001726:	e00a      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 8001728:	bf00      	nop
 800172a:	e008      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 800172c:	bf00      	nop
 800172e:	e006      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 8001730:	bf00      	nop
 8001732:	e004      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 8001734:	bf00      	nop
 8001736:	e002      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;   
 8001738:	bf00      	nop
 800173a:	e000      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 800173c:	bf00      	nop
    }
  } 
  
  return status; 
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e16b      	b.n	8001a40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 815a 	bne.w	8001a3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d00b      	beq.n	80017a6 <HAL_GPIO_Init+0x5a>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179a:	2b11      	cmp	r3, #17
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0xfc>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b12      	cmp	r3, #18
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	69b9      	ldr	r1, [r7, #24]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80b4 	beq.w	8001a3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_GPIO_Init+0x308>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a5e      	ldr	r2, [pc, #376]	; (8001a54 <HAL_GPIO_Init+0x308>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_GPIO_Init+0x308>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_GPIO_Init+0x30c>)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_GPIO_Init+0x310>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d02b      	beq.n	8001972 <HAL_GPIO_Init+0x226>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a50      	ldr	r2, [pc, #320]	; (8001a60 <HAL_GPIO_Init+0x314>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d025      	beq.n	800196e <HAL_GPIO_Init+0x222>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x318>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01f      	beq.n	800196a <HAL_GPIO_Init+0x21e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x31c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x21a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x320>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x216>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x324>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x212>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x328>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <HAL_GPIO_Init+0x32c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x20a>
 8001952:	2307      	movs	r3, #7
 8001954:	e00e      	b.n	8001974 <HAL_GPIO_Init+0x228>
 8001956:	2308      	movs	r3, #8
 8001958:	e00c      	b.n	8001974 <HAL_GPIO_Init+0x228>
 800195a:	2306      	movs	r3, #6
 800195c:	e00a      	b.n	8001974 <HAL_GPIO_Init+0x228>
 800195e:	2305      	movs	r3, #5
 8001960:	e008      	b.n	8001974 <HAL_GPIO_Init+0x228>
 8001962:	2304      	movs	r3, #4
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x228>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_Init+0x228>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_Init+0x228>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x228>
 8001972:	2300      	movs	r3, #0
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001984:	4934      	ldr	r1, [pc, #208]	; (8001a58 <HAL_GPIO_Init+0x30c>)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b6:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <HAL_GPIO_Init+0x330>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x330>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x330>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_GPIO_Init+0x330>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	f67f ae90 	bls.w	8001768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3724      	adds	r7, #36	; 0x24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021c00 	.word	0x40021c00
 8001a7c:	40013c00 	.word	0x40013c00

08001a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e25b      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b02:	4ba3      	ldr	r3, [pc, #652]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d112      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b9d      	ldr	r3, [pc, #628]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b99      	ldr	r3, [pc, #612]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e236      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a90      	ldr	r2, [pc, #576]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a8a      	ldr	r2, [pc, #552]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a87      	ldr	r2, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a80      	ldr	r2, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fa00 	bl	8000fa0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f9fc 	bl	8000fa0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1fb      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f9ec 	bl	8000fa0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f9e8 	bl	8000fa0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1e7      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1bb      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4952      	ldr	r1, [pc, #328]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_OscConfig+0x2b0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f9a1 	bl	8000fa0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f99d 	bl	8000fa0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e19c      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4940      	ldr	r1, [pc, #256]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x2b0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f980 	bl	8000fa0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f97c 	bl	8000fa0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e17b      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d030      	beq.n	8001d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x2b4>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f960 	bl	8000fa0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff f95c 	bl	8000fa0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e15b      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
 8001d02:	e015      	b.n	8001d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x2b4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f949 	bl	8000fa0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff f945 	bl	8000fa0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e144      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a0 	beq.w	8001e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d121      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff f90b 	bl	8000fa0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e011      	b.n	8001db2 <HAL_RCC_OscConfig+0x2ce>
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
 8001d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7ff f8fe 	bl	8000fa0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0fd      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x4d4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a7c      	ldr	r2, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	e01c      	b.n	8001e0e <HAL_RCC_OscConfig+0x32a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a76      	ldr	r2, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a73      	ldr	r2, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	e00b      	b.n	8001e0e <HAL_RCC_OscConfig+0x32a>
 8001df6:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a70      	ldr	r2, [pc, #448]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	4b6e      	ldr	r3, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a6d      	ldr	r2, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d015      	beq.n	8001e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff f8c3 	bl	8000fa0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f8bf 	bl	8000fa0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0bc      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b61      	ldr	r3, [pc, #388]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCC_OscConfig+0x33a>
 8001e40:	e014      	b.n	8001e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff f8ad 	bl	8000fa0 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7ff f8a9 	bl	8000fa0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0a6      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8092 	beq.w	8001fac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e88:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d05c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d141      	bne.n	8001f20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <HAL_RCC_OscConfig+0x4dc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f87d 	bl	8000fa0 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff f879 	bl	8000fa0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e078      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	4933      	ldr	r1, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x4dc>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f852 	bl	8000fa0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f84e 	bl	8000fa0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e04d      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x41c>
 8001f1e:	e045      	b.n	8001fac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x4dc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff f83b 	bl	8000fa0 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff f837 	bl	8000fa0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e036      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e029      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x4d8>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d115      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f82:	4013      	ands	r3, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	42470060 	.word	0x42470060

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0cc      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d90c      	bls.n	8002000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002030:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800203a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	494d      	ldr	r1, [pc, #308]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d044      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d119      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d003      	beq.n	8002082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	2b03      	cmp	r3, #3
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e067      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4934      	ldr	r1, [pc, #208]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7fe ff74 	bl	8000fa0 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7fe ff70 	bl	8000fa0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e04f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_RCC_ClockConfig+0x1b8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d20c      	bcs.n	800210c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e032      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4916      	ldr	r1, [pc, #88]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	490e      	ldr	r1, [pc, #56]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800214a:	f000 f821 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	fa21 f303 	lsr.w	r3, r1, r3
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fcf4 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00
 8002180:	40023800 	.word	0x40023800
 8002184:	0800639c 	.word	0x0800639c
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d007      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x32>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d008      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x38>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80b4 	bne.w	8002324 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021be:	60bb      	str	r3, [r7, #8]
       break;
 80021c0:	e0b3      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c2:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021c4:	60bb      	str	r3, [r7, #8]
      break;
 80021c6:	e0b0      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04a      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	f04f 0400 	mov.w	r4, #0
 80021e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	ea03 0501 	and.w	r5, r3, r1
 80021f4:	ea04 0602 	and.w	r6, r4, r2
 80021f8:	4629      	mov	r1, r5
 80021fa:	4632      	mov	r2, r6
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f04f 0400 	mov.w	r4, #0
 8002204:	0154      	lsls	r4, r2, #5
 8002206:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800220a:	014b      	lsls	r3, r1, #5
 800220c:	4619      	mov	r1, r3
 800220e:	4622      	mov	r2, r4
 8002210:	1b49      	subs	r1, r1, r5
 8002212:	eb62 0206 	sbc.w	r2, r2, r6
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f04f 0400 	mov.w	r4, #0
 800221e:	0194      	lsls	r4, r2, #6
 8002220:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002224:	018b      	lsls	r3, r1, #6
 8002226:	1a5b      	subs	r3, r3, r1
 8002228:	eb64 0402 	sbc.w	r4, r4, r2
 800222c:	f04f 0100 	mov.w	r1, #0
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	00e2      	lsls	r2, r4, #3
 8002236:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800223a:	00d9      	lsls	r1, r3, #3
 800223c:	460b      	mov	r3, r1
 800223e:	4614      	mov	r4, r2
 8002240:	195b      	adds	r3, r3, r5
 8002242:	eb44 0406 	adc.w	r4, r4, r6
 8002246:	f04f 0100 	mov.w	r1, #0
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	0262      	lsls	r2, r4, #9
 8002250:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002254:	0259      	lsls	r1, r3, #9
 8002256:	460b      	mov	r3, r1
 8002258:	4614      	mov	r4, r2
 800225a:	4618      	mov	r0, r3
 800225c:	4621      	mov	r1, r4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f04f 0400 	mov.w	r4, #0
 8002264:	461a      	mov	r2, r3
 8002266:	4623      	mov	r3, r4
 8002268:	f7fd ffba 	bl	80001e0 <__aeabi_uldivmod>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e049      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	f04f 0400 	mov.w	r4, #0
 800227e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	ea03 0501 	and.w	r5, r3, r1
 800228a:	ea04 0602 	and.w	r6, r4, r2
 800228e:	4629      	mov	r1, r5
 8002290:	4632      	mov	r2, r6
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f04f 0400 	mov.w	r4, #0
 800229a:	0154      	lsls	r4, r2, #5
 800229c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022a0:	014b      	lsls	r3, r1, #5
 80022a2:	4619      	mov	r1, r3
 80022a4:	4622      	mov	r2, r4
 80022a6:	1b49      	subs	r1, r1, r5
 80022a8:	eb62 0206 	sbc.w	r2, r2, r6
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	f04f 0400 	mov.w	r4, #0
 80022b4:	0194      	lsls	r4, r2, #6
 80022b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	1a5b      	subs	r3, r3, r1
 80022be:	eb64 0402 	sbc.w	r4, r4, r2
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	00e2      	lsls	r2, r4, #3
 80022cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022d0:	00d9      	lsls	r1, r3, #3
 80022d2:	460b      	mov	r3, r1
 80022d4:	4614      	mov	r4, r2
 80022d6:	195b      	adds	r3, r3, r5
 80022d8:	eb44 0406 	adc.w	r4, r4, r6
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	02a2      	lsls	r2, r4, #10
 80022e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ea:	0299      	lsls	r1, r3, #10
 80022ec:	460b      	mov	r3, r1
 80022ee:	4614      	mov	r4, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	4621      	mov	r1, r4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 0400 	mov.w	r4, #0
 80022fa:	461a      	mov	r2, r3
 80022fc:	4623      	mov	r3, r4
 80022fe:	f7fd ff6f 	bl	80001e0 <__aeabi_uldivmod>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	60bb      	str	r3, [r7, #8]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002326:	60bb      	str	r3, [r7, #8]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	68bb      	ldr	r3, [r7, #8]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	00f42400 	.word	0x00f42400
 800233c:	007a1200 	.word	0x007a1200

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff0 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002360:	4601      	mov	r1, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4a03      	ldr	r2, [pc, #12]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	080063ac 	.word	0x080063ac

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002384:	f7ff ffdc 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002388:	4601      	mov	r1, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0b5b      	lsrs	r3, r3, #13
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	080063ac 	.word	0x080063ac

080023a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	220f      	movs	r2, #15
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_RCC_GetClockConfig+0x60>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40023c00 	.word	0x40023c00

0800240c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e01d      	b.n	800245a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe fc88 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	4619      	mov	r1, r3
 800244a:	4610      	mov	r0, r2
 800244c:	f000 f988 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b06      	cmp	r3, #6
 800248a:	d007      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a1a      	ldr	r2, [r3, #32]
 80024c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_TIM_Base_Stop_IT+0x48>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	f240 4344 	movw	r3, #1092	; 0x444
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_TIM_Base_Stop_IT+0x48>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0202 	mvn.w	r2, #2
 800252c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8ee 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8e0 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8f1 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b04      	cmp	r3, #4
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0204 	mvn.w	r2, #4
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8c4 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8b6 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f8c7 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0208 	mvn.w	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f89a 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f88c 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f89d 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b10      	cmp	r3, #16
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b10      	cmp	r3, #16
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0210 	mvn.w	r2, #16
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2208      	movs	r2, #8
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f870 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f862 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f873 	bl	8002738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fa24 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b80      	cmp	r3, #128	; 0x80
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f97e 	bl	80029ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f838 	bl	800274c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0220 	mvn.w	r2, #32
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f948 	bl	8002998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a40      	ldr	r2, [pc, #256]	; (8002874 <TIM_Base_SetConfig+0x114>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d00f      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <TIM_Base_SetConfig+0x118>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00b      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3c      	ldr	r2, [pc, #240]	; (800287c <TIM_Base_SetConfig+0x11c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <TIM_Base_SetConfig+0x120>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3a      	ldr	r2, [pc, #232]	; (8002884 <TIM_Base_SetConfig+0x124>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <TIM_Base_SetConfig+0x114>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c0:	d027      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <TIM_Base_SetConfig+0x118>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d023      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2b      	ldr	r2, [pc, #172]	; (800287c <TIM_Base_SetConfig+0x11c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2a      	ldr	r2, [pc, #168]	; (8002880 <TIM_Base_SetConfig+0x120>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a29      	ldr	r2, [pc, #164]	; (8002884 <TIM_Base_SetConfig+0x124>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d017      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <TIM_Base_SetConfig+0x128>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a27      	ldr	r2, [pc, #156]	; (800288c <TIM_Base_SetConfig+0x12c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a26      	ldr	r2, [pc, #152]	; (8002890 <TIM_Base_SetConfig+0x130>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <TIM_Base_SetConfig+0x134>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a24      	ldr	r2, [pc, #144]	; (8002898 <TIM_Base_SetConfig+0x138>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0xb2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a23      	ldr	r2, [pc, #140]	; (800289c <TIM_Base_SetConfig+0x13c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <TIM_Base_SetConfig+0x114>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0xf8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <TIM_Base_SetConfig+0x124>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40000c00 	.word	0x40000c00
 8002884:	40010400 	.word	0x40010400
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800
 8002894:	40001800 	.word	0x40001800
 8002898:	40001c00 	.word	0x40001c00
 800289c:	40002000 	.word	0x40002000

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e05a      	b.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d01d      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d018      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a17      	ldr	r2, [pc, #92]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4313      	orrs	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40010000 	.word	0x40010000
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40010400 	.word	0x40010400
 8002990:	40014000 	.word	0x40014000
 8002994:	40001800 	.word	0x40001800

08002998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fa00 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f90b 	bl	8002c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	f040 8083 	bne.w	8002b82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Transmit+0x2e>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e07b      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x40>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e074      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2221      	movs	r2, #33	; 0x21
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fa76 	bl	8000fa0 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002aca:	e042      	b.n	8002b52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	d122      	bne.n	8002b2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f84c 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e042      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	e017      	b.n	8002b52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	e013      	b.n	8002b52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f829 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e01f      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1b7      	bne.n	8002acc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f810 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e006      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9c:	e02c      	b.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d028      	beq.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bac:	f7fe f9f8 	bl	8000fa0 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d21d      	bcs.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e00f      	b.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d0c3      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c62:	f023 030c 	bic.w	r3, r3, #12
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8e:	f040 818b 	bne.w	8002fa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4ac1      	ldr	r2, [pc, #772]	; (8002f9c <UART_SetConfig+0x37c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d005      	beq.n	8002ca8 <UART_SetConfig+0x88>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4abf      	ldr	r2, [pc, #764]	; (8002fa0 <UART_SetConfig+0x380>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	f040 80bd 	bne.w	8002e22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca8:	f7ff fb6a 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8002cac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	461d      	mov	r5, r3
 8002cb2:	f04f 0600 	mov.w	r6, #0
 8002cb6:	46a8      	mov	r8, r5
 8002cb8:	46b1      	mov	r9, r6
 8002cba:	eb18 0308 	adds.w	r3, r8, r8
 8002cbe:	eb49 0409 	adc.w	r4, r9, r9
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	46a1      	mov	r9, r4
 8002cc6:	eb18 0805 	adds.w	r8, r8, r5
 8002cca:	eb49 0906 	adc.w	r9, r9, r6
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	4691      	mov	r9, r2
 8002ce6:	eb18 0005 	adds.w	r0, r8, r5
 8002cea:	eb49 0106 	adc.w	r1, r9, r6
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	461d      	mov	r5, r3
 8002cf4:	f04f 0600 	mov.w	r6, #0
 8002cf8:	196b      	adds	r3, r5, r5
 8002cfa:	eb46 0406 	adc.w	r4, r6, r6
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4623      	mov	r3, r4
 8002d02:	f7fd fa6d 	bl	80001e0 <__aeabi_uldivmod>
 8002d06:	4603      	mov	r3, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4ba5      	ldr	r3, [pc, #660]	; (8002fa4 <UART_SetConfig+0x384>)
 8002d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	f04f 0600 	mov.w	r6, #0
 8002d20:	46a9      	mov	r9, r5
 8002d22:	46b2      	mov	sl, r6
 8002d24:	eb19 0309 	adds.w	r3, r9, r9
 8002d28:	eb4a 040a 	adc.w	r4, sl, sl
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	46a2      	mov	sl, r4
 8002d30:	eb19 0905 	adds.w	r9, r9, r5
 8002d34:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d4c:	4689      	mov	r9, r1
 8002d4e:	4692      	mov	sl, r2
 8002d50:	eb19 0005 	adds.w	r0, r9, r5
 8002d54:	eb4a 0106 	adc.w	r1, sl, r6
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	461d      	mov	r5, r3
 8002d5e:	f04f 0600 	mov.w	r6, #0
 8002d62:	196b      	adds	r3, r5, r5
 8002d64:	eb46 0406 	adc.w	r4, r6, r6
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	f7fd fa38 	bl	80001e0 <__aeabi_uldivmod>
 8002d70:	4603      	mov	r3, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <UART_SetConfig+0x384>)
 8002d78:	fba3 1302 	umull	r1, r3, r3, r2
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	2164      	movs	r1, #100	; 0x64
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	3332      	adds	r3, #50	; 0x32
 8002d8a:	4a86      	ldr	r2, [pc, #536]	; (8002fa4 <UART_SetConfig+0x384>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d98:	4498      	add	r8, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	f04f 0600 	mov.w	r6, #0
 8002da2:	46a9      	mov	r9, r5
 8002da4:	46b2      	mov	sl, r6
 8002da6:	eb19 0309 	adds.w	r3, r9, r9
 8002daa:	eb4a 040a 	adc.w	r4, sl, sl
 8002dae:	4699      	mov	r9, r3
 8002db0:	46a2      	mov	sl, r4
 8002db2:	eb19 0905 	adds.w	r9, r9, r5
 8002db6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dce:	4689      	mov	r9, r1
 8002dd0:	4692      	mov	sl, r2
 8002dd2:	eb19 0005 	adds.w	r0, r9, r5
 8002dd6:	eb4a 0106 	adc.w	r1, sl, r6
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	461d      	mov	r5, r3
 8002de0:	f04f 0600 	mov.w	r6, #0
 8002de4:	196b      	adds	r3, r5, r5
 8002de6:	eb46 0406 	adc.w	r4, r6, r6
 8002dea:	461a      	mov	r2, r3
 8002dec:	4623      	mov	r3, r4
 8002dee:	f7fd f9f7 	bl	80001e0 <__aeabi_uldivmod>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <UART_SetConfig+0x384>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2164      	movs	r1, #100	; 0x64
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a65      	ldr	r2, [pc, #404]	; (8002fa4 <UART_SetConfig+0x384>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 0207 	and.w	r2, r3, #7
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4442      	add	r2, r8
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	e26f      	b.n	8003302 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7ff fa99 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8002e26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	f04f 0600 	mov.w	r6, #0
 8002e30:	46a8      	mov	r8, r5
 8002e32:	46b1      	mov	r9, r6
 8002e34:	eb18 0308 	adds.w	r3, r8, r8
 8002e38:	eb49 0409 	adc.w	r4, r9, r9
 8002e3c:	4698      	mov	r8, r3
 8002e3e:	46a1      	mov	r9, r4
 8002e40:	eb18 0805 	adds.w	r8, r8, r5
 8002e44:	eb49 0906 	adc.w	r9, r9, r6
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e5c:	4688      	mov	r8, r1
 8002e5e:	4691      	mov	r9, r2
 8002e60:	eb18 0005 	adds.w	r0, r8, r5
 8002e64:	eb49 0106 	adc.w	r1, r9, r6
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	461d      	mov	r5, r3
 8002e6e:	f04f 0600 	mov.w	r6, #0
 8002e72:	196b      	adds	r3, r5, r5
 8002e74:	eb46 0406 	adc.w	r4, r6, r6
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	f7fd f9b0 	bl	80001e0 <__aeabi_uldivmod>
 8002e80:	4603      	mov	r3, r0
 8002e82:	460c      	mov	r4, r1
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <UART_SetConfig+0x384>)
 8002e88:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	461d      	mov	r5, r3
 8002e96:	f04f 0600 	mov.w	r6, #0
 8002e9a:	46a9      	mov	r9, r5
 8002e9c:	46b2      	mov	sl, r6
 8002e9e:	eb19 0309 	adds.w	r3, r9, r9
 8002ea2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ea6:	4699      	mov	r9, r3
 8002ea8:	46a2      	mov	sl, r4
 8002eaa:	eb19 0905 	adds.w	r9, r9, r5
 8002eae:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eb2:	f04f 0100 	mov.w	r1, #0
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ebe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ec2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ec6:	4689      	mov	r9, r1
 8002ec8:	4692      	mov	sl, r2
 8002eca:	eb19 0005 	adds.w	r0, r9, r5
 8002ece:	eb4a 0106 	adc.w	r1, sl, r6
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	f04f 0600 	mov.w	r6, #0
 8002edc:	196b      	adds	r3, r5, r5
 8002ede:	eb46 0406 	adc.w	r4, r6, r6
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4623      	mov	r3, r4
 8002ee6:	f7fd f97b 	bl	80001e0 <__aeabi_uldivmod>
 8002eea:	4603      	mov	r3, r0
 8002eec:	460c      	mov	r4, r1
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <UART_SetConfig+0x384>)
 8002ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2164      	movs	r1, #100	; 0x64
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	3332      	adds	r3, #50	; 0x32
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <UART_SetConfig+0x384>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f12:	4498      	add	r8, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	461d      	mov	r5, r3
 8002f18:	f04f 0600 	mov.w	r6, #0
 8002f1c:	46a9      	mov	r9, r5
 8002f1e:	46b2      	mov	sl, r6
 8002f20:	eb19 0309 	adds.w	r3, r9, r9
 8002f24:	eb4a 040a 	adc.w	r4, sl, sl
 8002f28:	4699      	mov	r9, r3
 8002f2a:	46a2      	mov	sl, r4
 8002f2c:	eb19 0905 	adds.w	r9, r9, r5
 8002f30:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f48:	4689      	mov	r9, r1
 8002f4a:	4692      	mov	sl, r2
 8002f4c:	eb19 0005 	adds.w	r0, r9, r5
 8002f50:	eb4a 0106 	adc.w	r1, sl, r6
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	461d      	mov	r5, r3
 8002f5a:	f04f 0600 	mov.w	r6, #0
 8002f5e:	196b      	adds	r3, r5, r5
 8002f60:	eb46 0406 	adc.w	r4, r6, r6
 8002f64:	461a      	mov	r2, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	f7fd f93a 	bl	80001e0 <__aeabi_uldivmod>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <UART_SetConfig+0x384>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2164      	movs	r1, #100	; 0x64
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	3332      	adds	r3, #50	; 0x32
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <UART_SetConfig+0x384>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 0207 	and.w	r2, r3, #7
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4442      	add	r2, r8
 8002f98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f9a:	e1b2      	b.n	8003302 <UART_SetConfig+0x6e2>
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40011400 	.word	0x40011400
 8002fa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4ad7      	ldr	r2, [pc, #860]	; (800330c <UART_SetConfig+0x6ec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d005      	beq.n	8002fbe <UART_SetConfig+0x39e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4ad6      	ldr	r2, [pc, #856]	; (8003310 <UART_SetConfig+0x6f0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	f040 80d1 	bne.w	8003160 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fbe:	f7ff f9df 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8002fc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	469a      	mov	sl, r3
 8002fc8:	f04f 0b00 	mov.w	fp, #0
 8002fcc:	46d0      	mov	r8, sl
 8002fce:	46d9      	mov	r9, fp
 8002fd0:	eb18 0308 	adds.w	r3, r8, r8
 8002fd4:	eb49 0409 	adc.w	r4, r9, r9
 8002fd8:	4698      	mov	r8, r3
 8002fda:	46a1      	mov	r9, r4
 8002fdc:	eb18 080a 	adds.w	r8, r8, sl
 8002fe0:	eb49 090b 	adc.w	r9, r9, fp
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ff0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ff4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ff8:	4688      	mov	r8, r1
 8002ffa:	4691      	mov	r9, r2
 8002ffc:	eb1a 0508 	adds.w	r5, sl, r8
 8003000:	eb4b 0609 	adc.w	r6, fp, r9
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	f04f 0400 	mov.w	r4, #0
 8003016:	0094      	lsls	r4, r2, #2
 8003018:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800301c:	008b      	lsls	r3, r1, #2
 800301e:	461a      	mov	r2, r3
 8003020:	4623      	mov	r3, r4
 8003022:	4628      	mov	r0, r5
 8003024:	4631      	mov	r1, r6
 8003026:	f7fd f8db 	bl	80001e0 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	461a      	mov	r2, r3
 8003030:	4bb8      	ldr	r3, [pc, #736]	; (8003314 <UART_SetConfig+0x6f4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	469b      	mov	fp, r3
 8003040:	f04f 0c00 	mov.w	ip, #0
 8003044:	46d9      	mov	r9, fp
 8003046:	46e2      	mov	sl, ip
 8003048:	eb19 0309 	adds.w	r3, r9, r9
 800304c:	eb4a 040a 	adc.w	r4, sl, sl
 8003050:	4699      	mov	r9, r3
 8003052:	46a2      	mov	sl, r4
 8003054:	eb19 090b 	adds.w	r9, r9, fp
 8003058:	eb4a 0a0c 	adc.w	sl, sl, ip
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003068:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800306c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003070:	4689      	mov	r9, r1
 8003072:	4692      	mov	sl, r2
 8003074:	eb1b 0509 	adds.w	r5, fp, r9
 8003078:	eb4c 060a 	adc.w	r6, ip, sl
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4619      	mov	r1, r3
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f04f 0400 	mov.w	r4, #0
 800308e:	0094      	lsls	r4, r2, #2
 8003090:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003094:	008b      	lsls	r3, r1, #2
 8003096:	461a      	mov	r2, r3
 8003098:	4623      	mov	r3, r4
 800309a:	4628      	mov	r0, r5
 800309c:	4631      	mov	r1, r6
 800309e:	f7fd f89f 	bl	80001e0 <__aeabi_uldivmod>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b9a      	ldr	r3, [pc, #616]	; (8003314 <UART_SetConfig+0x6f4>)
 80030aa:	fba3 1302 	umull	r1, r3, r3, r2
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2164      	movs	r1, #100	; 0x64
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	3332      	adds	r3, #50	; 0x32
 80030bc:	4a95      	ldr	r2, [pc, #596]	; (8003314 <UART_SetConfig+0x6f4>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c8:	4498      	add	r8, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	469b      	mov	fp, r3
 80030ce:	f04f 0c00 	mov.w	ip, #0
 80030d2:	46d9      	mov	r9, fp
 80030d4:	46e2      	mov	sl, ip
 80030d6:	eb19 0309 	adds.w	r3, r9, r9
 80030da:	eb4a 040a 	adc.w	r4, sl, sl
 80030de:	4699      	mov	r9, r3
 80030e0:	46a2      	mov	sl, r4
 80030e2:	eb19 090b 	adds.w	r9, r9, fp
 80030e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030fe:	4689      	mov	r9, r1
 8003100:	4692      	mov	sl, r2
 8003102:	eb1b 0509 	adds.w	r5, fp, r9
 8003106:	eb4c 060a 	adc.w	r6, ip, sl
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4619      	mov	r1, r3
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	f04f 0400 	mov.w	r4, #0
 800311c:	0094      	lsls	r4, r2, #2
 800311e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003122:	008b      	lsls	r3, r1, #2
 8003124:	461a      	mov	r2, r3
 8003126:	4623      	mov	r3, r4
 8003128:	4628      	mov	r0, r5
 800312a:	4631      	mov	r1, r6
 800312c:	f7fd f858 	bl	80001e0 <__aeabi_uldivmod>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	461a      	mov	r2, r3
 8003136:	4b77      	ldr	r3, [pc, #476]	; (8003314 <UART_SetConfig+0x6f4>)
 8003138:	fba3 1302 	umull	r1, r3, r3, r2
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	2164      	movs	r1, #100	; 0x64
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	3332      	adds	r3, #50	; 0x32
 800314a:	4a72      	ldr	r2, [pc, #456]	; (8003314 <UART_SetConfig+0x6f4>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	f003 020f 	and.w	r2, r3, #15
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4442      	add	r2, r8
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	e0d0      	b.n	8003302 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff f8fa 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003164:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	469a      	mov	sl, r3
 800316a:	f04f 0b00 	mov.w	fp, #0
 800316e:	46d0      	mov	r8, sl
 8003170:	46d9      	mov	r9, fp
 8003172:	eb18 0308 	adds.w	r3, r8, r8
 8003176:	eb49 0409 	adc.w	r4, r9, r9
 800317a:	4698      	mov	r8, r3
 800317c:	46a1      	mov	r9, r4
 800317e:	eb18 080a 	adds.w	r8, r8, sl
 8003182:	eb49 090b 	adc.w	r9, r9, fp
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003192:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003196:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800319a:	4688      	mov	r8, r1
 800319c:	4691      	mov	r9, r2
 800319e:	eb1a 0508 	adds.w	r5, sl, r8
 80031a2:	eb4b 0609 	adc.w	r6, fp, r9
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4619      	mov	r1, r3
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f04f 0400 	mov.w	r4, #0
 80031b8:	0094      	lsls	r4, r2, #2
 80031ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031be:	008b      	lsls	r3, r1, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	4628      	mov	r0, r5
 80031c6:	4631      	mov	r1, r6
 80031c8:	f7fd f80a 	bl	80001e0 <__aeabi_uldivmod>
 80031cc:	4603      	mov	r3, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b50      	ldr	r3, [pc, #320]	; (8003314 <UART_SetConfig+0x6f4>)
 80031d4:	fba3 2302 	umull	r2, r3, r3, r2
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	469b      	mov	fp, r3
 80031e2:	f04f 0c00 	mov.w	ip, #0
 80031e6:	46d9      	mov	r9, fp
 80031e8:	46e2      	mov	sl, ip
 80031ea:	eb19 0309 	adds.w	r3, r9, r9
 80031ee:	eb4a 040a 	adc.w	r4, sl, sl
 80031f2:	4699      	mov	r9, r3
 80031f4:	46a2      	mov	sl, r4
 80031f6:	eb19 090b 	adds.w	r9, r9, fp
 80031fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800320a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800320e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003212:	4689      	mov	r9, r1
 8003214:	4692      	mov	sl, r2
 8003216:	eb1b 0509 	adds.w	r5, fp, r9
 800321a:	eb4c 060a 	adc.w	r6, ip, sl
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4619      	mov	r1, r3
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	0094      	lsls	r4, r2, #2
 8003232:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003236:	008b      	lsls	r3, r1, #2
 8003238:	461a      	mov	r2, r3
 800323a:	4623      	mov	r3, r4
 800323c:	4628      	mov	r0, r5
 800323e:	4631      	mov	r1, r6
 8003240:	f7fc ffce 	bl	80001e0 <__aeabi_uldivmod>
 8003244:	4603      	mov	r3, r0
 8003246:	460c      	mov	r4, r1
 8003248:	461a      	mov	r2, r3
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <UART_SetConfig+0x6f4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <UART_SetConfig+0x6f4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326a:	4498      	add	r8, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	469b      	mov	fp, r3
 8003270:	f04f 0c00 	mov.w	ip, #0
 8003274:	46d9      	mov	r9, fp
 8003276:	46e2      	mov	sl, ip
 8003278:	eb19 0309 	adds.w	r3, r9, r9
 800327c:	eb4a 040a 	adc.w	r4, sl, sl
 8003280:	4699      	mov	r9, r3
 8003282:	46a2      	mov	sl, r4
 8003284:	eb19 090b 	adds.w	r9, r9, fp
 8003288:	eb4a 0a0c 	adc.w	sl, sl, ip
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003298:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800329c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a0:	4689      	mov	r9, r1
 80032a2:	4692      	mov	sl, r2
 80032a4:	eb1b 0509 	adds.w	r5, fp, r9
 80032a8:	eb4c 060a 	adc.w	r6, ip, sl
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	f04f 0400 	mov.w	r4, #0
 80032be:	0094      	lsls	r4, r2, #2
 80032c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032c4:	008b      	lsls	r3, r1, #2
 80032c6:	461a      	mov	r2, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	4631      	mov	r1, r6
 80032ce:	f7fc ff87 	bl	80001e0 <__aeabi_uldivmod>
 80032d2:	4603      	mov	r3, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <UART_SetConfig+0x6f4>)
 80032da:	fba3 1302 	umull	r1, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2164      	movs	r1, #100	; 0x64
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a09      	ldr	r2, [pc, #36]	; (8003314 <UART_SetConfig+0x6f4>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4442      	add	r2, r8
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	e7ff      	b.n	8003302 <UART_SetConfig+0x6e2>
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800330c:	40011000 	.word	0x40011000
 8003310:	40011400 	.word	0x40011400
 8003314:	51eb851f 	.word	0x51eb851f

08003318 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800332a:	2b84      	cmp	r3, #132	; 0x84
 800332c:	d005      	beq.n	800333a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800332e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	3303      	adds	r3, #3
 8003338:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800334c:	f001 f948 	bl	80045e0 <vTaskStartScheduler>
  
  return osOK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	bd80      	pop	{r7, pc}

08003356 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003358:	b089      	sub	sp, #36	; 0x24
 800335a:	af04      	add	r7, sp, #16
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <osThreadCreate+0x54>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01c      	beq.n	80033aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685c      	ldr	r4, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681d      	ldr	r5, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691e      	ldr	r6, [r3, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ffc8 	bl	8003318 <makeFreeRtosPriority>
 8003388:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003392:	9202      	str	r2, [sp, #8]
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	9100      	str	r1, [sp, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4632      	mov	r2, r6
 800339c:	4629      	mov	r1, r5
 800339e:	4620      	mov	r0, r4
 80033a0:	f000 ff5a 	bl	8004258 <xTaskCreateStatic>
 80033a4:	4603      	mov	r3, r0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e01c      	b.n	80033e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685c      	ldr	r4, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033b6:	b29e      	uxth	r6, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffaa 	bl	8003318 <makeFreeRtosPriority>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	9200      	str	r2, [sp, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	4632      	mov	r2, r6
 80033d2:	4629      	mov	r1, r5
 80033d4:	4620      	mov	r0, r4
 80033d6:	f000 ff99 	bl	800430c <xTaskCreate>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033e4:	68fb      	ldr	r3, [r7, #12]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <osDelay+0x16>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	e000      	b.n	8003406 <osDelay+0x18>
 8003404:	2301      	movs	r3, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f001 f8b6 	bl	8004578 <vTaskDelay>
  
  return osOK;
 800340c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800341c:	201c      	movs	r0, #28
 800341e:	f002 fc77 	bl	8005d10 <pvPortMalloc>
 8003422:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f98b 	bl	8003750 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003440:	687b      	ldr	r3, [r7, #4]
	}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b090      	sub	sp, #64	; 0x40
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <xEventGroupWaitBits+0x34>
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	623b      	str	r3, [r7, #32]
 800347e:	e7fe      	b.n	800347e <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <xEventGroupWaitBits+0x52>
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e7fe      	b.n	800349c <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <xEventGroupWaitBits+0x6c>
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e7fe      	b.n	80034b6 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034b8:	f001 fd60 	bl	8004f7c <xTaskGetSchedulerState>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <xEventGroupWaitBits+0x7c>
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <xEventGroupWaitBits+0x80>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <xEventGroupWaitBits+0x82>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <xEventGroupWaitBits+0x9a>
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e7fe      	b.n	80034e4 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80034e6:	f001 f8df 	bl	80046a8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034f6:	f000 f909 	bl	800370c <prvTestWaitCondition>
 80034fa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003506:	2300      	movs	r3, #0
 8003508:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d028      	beq.n	8003562 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	43db      	mvns	r3, r3
 8003518:	401a      	ands	r2, r3
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e020      	b.n	8003562 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
 800352e:	e018      	b.n	8003562 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	1d18      	adds	r0, r3, #4
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	4313      	orrs	r3, r2
 8003556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003558:	4619      	mov	r1, r3
 800355a:	f001 fa95 	bl	8004a88 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003562:	f001 f8af 	bl	80046c4 <xTaskResumeAll>
 8003566:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d031      	beq.n	80035d2 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <xEventGroupWaitBits+0x190>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003584:	f001 fd9c 	bl	80050c0 <uxTaskResetEventItemValue>
 8003588:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d11a      	bne.n	80035ca <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8003594:	f002 faa2 	bl	8005adc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035a4:	f000 f8b2 	bl	800370c <prvTestWaitCondition>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	401a      	ands	r2, r3
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80035c2:	2301      	movs	r3, #1
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80035c6:	f002 fab7 	bl	8005b38 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	; 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08e      	sub	sp, #56	; 0x38
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80035ea:	2300      	movs	r3, #0
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <xEventGroupSetBits+0x30>
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e7fe      	b.n	800360e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <xEventGroupSetBits+0x4e>
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e7fe      	b.n	800362c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	3304      	adds	r3, #4
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	3308      	adds	r3, #8
 8003638:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800363a:	f001 f835 	bl	80046a8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	431a      	orrs	r2, r3
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003650:	e03c      	b.n	80036cc <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003668:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003670:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8003688:	2301      	movs	r3, #1
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368c:	e008      	b.n	80036a0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	429a      	cmp	r2, r3
 800369a:	d101      	bne.n	80036a0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c0:	4619      	mov	r1, r3
 80036c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036c4:	f001 faa6 	bl	8004c14 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80036cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1be      	bne.n	8003652 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80036e2:	f000 ffef 	bl	80046c4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	681b      	ldr	r3, [r3, #0]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3738      	adds	r7, #56	; 0x38
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff6e 	bl	80035e0 <xEventGroupSetBits>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e007      	b.n	8003742 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d101      	bne.n	8003742 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003742:	697b      	ldr	r3, [r7, #20]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f103 0208 	add.w	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0208 	add.w	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f103 0208 	add.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d103      	bne.n	8003812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00c      	b.n	800382c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3308      	adds	r3, #8
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e002      	b.n	8003820 <vListInsert+0x2e>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d2f6      	bcs.n	800381a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6852      	ldr	r2, [r2, #4]
 8003884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d103      	bne.n	8003898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <xQueueGenericReset+0x28>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	e7fe      	b.n	80038de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80038e0:	f002 f8fc 	bl	8005adc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	3b01      	subs	r3, #1
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	441a      	add	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d114      	bne.n	8003960 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01a      	beq.n	8003974 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3310      	adds	r3, #16
 8003942:	4618      	mov	r0, r3
 8003944:	f001 f904 	bl	8004b50 <xTaskRemoveFromEventList>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800394e:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <xQueueGenericReset+0xcc>)
 8003950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	e009      	b.n	8003974 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3310      	adds	r3, #16
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fef3 	bl	8003750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3324      	adds	r3, #36	; 0x24
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff feee 	bl	8003750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003974:	f002 f8e0 	bl	8005b38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003978:	2301      	movs	r3, #1
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <xQueueGenericCreateStatic+0x28>
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ae:	e7fe      	b.n	80039ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <xQueueGenericCreateStatic+0x42>
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
 80039c8:	e7fe      	b.n	80039c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <xQueueGenericCreateStatic+0x4e>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <xQueueGenericCreateStatic+0x52>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <xQueueGenericCreateStatic+0x54>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <xQueueGenericCreateStatic+0x6c>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e7fe      	b.n	80039f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <xQueueGenericCreateStatic+0x78>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <xQueueGenericCreateStatic+0x7c>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <xQueueGenericCreateStatic+0x7e>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <xQueueGenericCreateStatic+0x96>
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e7fe      	b.n	8003a1c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a1e:	2348      	movs	r3, #72	; 0x48
 8003a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b48      	cmp	r3, #72	; 0x48
 8003a26:	d009      	beq.n	8003a3c <xQueueGenericCreateStatic+0xb4>
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e7fe      	b.n	8003a3a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f805 	bl	8003a6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3730      	adds	r7, #48	; 0x30
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	e002      	b.n	8003a90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	69b8      	ldr	r0, [r7, #24]
 8003aa0:	f7ff ff0a 	bl	80038b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08e      	sub	sp, #56	; 0x38
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aba:	2300      	movs	r3, #0
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <xQueueGenericSend+0x30>
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	e7fe      	b.n	8003ada <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSend+0x3e>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <xQueueGenericSend+0x42>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <xQueueGenericSend+0x44>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGenericSend+0x5c>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e7fe      	b.n	8003b06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d103      	bne.n	8003b16 <xQueueGenericSend+0x6a>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <xQueueGenericSend+0x6e>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericSend+0x70>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <xQueueGenericSend+0x88>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	e7fe      	b.n	8003b32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b34:	f001 fa22 	bl	8004f7c <xTaskGetSchedulerState>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xQueueGenericSend+0x98>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueGenericSend+0x9c>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <xQueueGenericSend+0x9e>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <xQueueGenericSend+0xb6>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e7fe      	b.n	8003b60 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b62:	f001 ffbb 	bl	8005adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <xQueueGenericSend+0xcc>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d129      	bne.n	8003bcc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7e:	f000 f9ff 	bl	8003f80 <prvCopyDataToQueue>
 8003b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d010      	beq.n	8003bae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ffdd 	bl	8004b50 <xTaskRemoveFromEventList>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <xQueueGenericSend+0x1f0>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	e00a      	b.n	8003bc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <xQueueGenericSend+0x1f0>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bc4:	f001 ffb8 	bl	8005b38 <vPortExitCritical>
				return pdPASS;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e063      	b.n	8003c94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bd2:	f001 ffb1 	bl	8005b38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e05c      	b.n	8003c94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 f875 	bl	8004cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bee:	f001 ffa3 	bl	8005b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bf2:	f000 fd59 	bl	80046a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf6:	f001 ff71 	bl	8005adc <vPortEnterCritical>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d103      	bne.n	8003c10 <xQueueGenericSend+0x164>
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d103      	bne.n	8003c26 <xQueueGenericSend+0x17a>
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c26:	f001 ff87 	bl	8005b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c2a:	1d3a      	adds	r2, r7, #4
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 f864 	bl	8004d00 <xTaskCheckForTimeOut>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d124      	bne.n	8003c88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c40:	f000 fa96 	bl	8004170 <prvIsQueueFull>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d018      	beq.n	8003c7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	3310      	adds	r3, #16
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fef4 	bl	8004a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 fa21 	bl	80040a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c5e:	f000 fd31 	bl	80046c4 <xTaskResumeAll>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f47f af7c 	bne.w	8003b62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <xQueueGenericSend+0x1f0>)
 8003c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	e772      	b.n	8003b62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7e:	f000 fa0f 	bl	80040a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c82:	f000 fd1f 	bl	80046c4 <xTaskResumeAll>
 8003c86:	e76c      	b.n	8003b62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c8a:	f000 fa09 	bl	80040a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c8e:	f000 fd19 	bl	80046c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <xQueueGenericSendFromISR+0x2c>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	e7fe      	b.n	8003cca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSendFromISR+0x3a>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <xQueueGenericSendFromISR+0x3e>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericSendFromISR+0x40>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <xQueueGenericSendFromISR+0x58>
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	e7fe      	b.n	8003cf6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d103      	bne.n	8003d06 <xQueueGenericSendFromISR+0x66>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <xQueueGenericSendFromISR+0x6a>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <xQueueGenericSendFromISR+0x6c>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <xQueueGenericSendFromISR+0x84>
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e7fe      	b.n	8003d22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d24:	f001 ffb6 	bl	8005c94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d28:	f3ef 8211 	mrs	r2, BASEPRI
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	61ba      	str	r2, [r7, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <xQueueGenericSendFromISR+0xb6>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d12c      	bne.n	8003db0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d66:	f000 f90b 	bl	8003f80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d112      	bne.n	8003d9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d016      	beq.n	8003daa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	3324      	adds	r3, #36	; 0x24
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fee5 	bl	8004b50 <xTaskRemoveFromEventList>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e007      	b.n	8003daa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	3301      	adds	r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	b25a      	sxtb	r2, r3
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003daa:	2301      	movs	r3, #1
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003dae:	e001      	b.n	8003db4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3738      	adds	r7, #56	; 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <xQueueReceive+0x2e>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	e7fe      	b.n	8003df4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <xQueueReceive+0x3c>
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <xQueueReceive+0x40>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <xQueueReceive+0x42>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <xQueueReceive+0x5a>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e7fe      	b.n	8003e20 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e22:	f001 f8ab 	bl	8004f7c <xTaskGetSchedulerState>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <xQueueReceive+0x6a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <xQueueReceive+0x6e>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueReceive+0x70>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <xQueueReceive+0x88>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e7fe      	b.n	8003e4e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e50:	f001 fe44 	bl	8005adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01f      	beq.n	8003ea0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e64:	f000 f8f6 	bl	8004054 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	1e5a      	subs	r2, r3, #1
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00f      	beq.n	8003e98 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fe67 	bl	8004b50 <xTaskRemoveFromEventList>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e88:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <xQueueReceive+0x1b4>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e98:	f001 fe4e 	bl	8005b38 <vPortExitCritical>
				return pdPASS;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e069      	b.n	8003f74 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ea6:	f001 fe47 	bl	8005b38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e062      	b.n	8003f74 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 ff0b 	bl	8004cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ec2:	f001 fe39 	bl	8005b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ec6:	f000 fbef 	bl	80046a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eca:	f001 fe07 	bl	8005adc <vPortEnterCritical>
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <xQueueReceive+0x11c>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eea:	b25b      	sxtb	r3, r3
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d103      	bne.n	8003efa <xQueueReceive+0x132>
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003efa:	f001 fe1d 	bl	8005b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003efe:	1d3a      	adds	r2, r7, #4
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fefa 	bl	8004d00 <xTaskCheckForTimeOut>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d123      	bne.n	8003f5a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f14:	f000 f916 	bl	8004144 <prvIsQueueEmpty>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fd8a 	bl	8004a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2e:	f000 f8b7 	bl	80040a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f32:	f000 fbc7 	bl	80046c4 <xTaskResumeAll>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d189      	bne.n	8003e50 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <xQueueReceive+0x1b4>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	e780      	b.n	8003e50 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 f8a6 	bl	80040a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f54:	f000 fbb6 	bl	80046c4 <xTaskResumeAll>
 8003f58:	e77a      	b.n	8003e50 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f5c:	f000 f8a0 	bl	80040a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f60:	f000 fbb0 	bl	80046c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f66:	f000 f8ed 	bl	8004144 <prvIsQueueEmpty>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f43f af6f 	beq.w	8003e50 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3730      	adds	r7, #48	; 0x30
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10d      	bne.n	8003fba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d14d      	bne.n	8004042 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 f804 	bl	8004fb8 <xTaskPriorityDisinherit>
 8003fb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	e043      	b.n	8004042 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d119      	bne.n	8003ff4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6858      	ldr	r0, [r3, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	f002 f89a 	bl	8006104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	441a      	add	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d32b      	bcc.n	8004042 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	e026      	b.n	8004042 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68d8      	ldr	r0, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	f002 f880 	bl	8006104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	425b      	negs	r3, r3
 800400e:	441a      	add	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d207      	bcs.n	8004030 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	425b      	negs	r3, r3
 800402a:	441a      	add	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d105      	bne.n	8004042 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3b01      	subs	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800404a:	697b      	ldr	r3, [r7, #20]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d018      	beq.n	8004098 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d303      	bcc.n	8004088 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68d9      	ldr	r1, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	461a      	mov	r2, r3
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f002 f836 	bl	8006104 <memcpy>
	}
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040a8:	f001 fd18 	bl	8005adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040b4:	e011      	b.n	80040da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d012      	beq.n	80040e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3324      	adds	r3, #36	; 0x24
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fd44 	bl	8004b50 <xTaskRemoveFromEventList>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040ce:	f000 fe77 	bl	8004dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	dce9      	bgt.n	80040b6 <prvUnlockQueue+0x16>
 80040e2:	e000      	b.n	80040e6 <prvUnlockQueue+0x46>
					break;
 80040e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	22ff      	movs	r2, #255	; 0xff
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040ee:	f001 fd23 	bl	8005b38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040f2:	f001 fcf3 	bl	8005adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040fe:	e011      	b.n	8004124 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d012      	beq.n	800412e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3310      	adds	r3, #16
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fd1f 	bl	8004b50 <xTaskRemoveFromEventList>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004118:	f000 fe52 	bl	8004dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	3b01      	subs	r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004128:	2b00      	cmp	r3, #0
 800412a:	dce9      	bgt.n	8004100 <prvUnlockQueue+0x60>
 800412c:	e000      	b.n	8004130 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800412e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	22ff      	movs	r2, #255	; 0xff
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004138:	f001 fcfe 	bl	8005b38 <vPortExitCritical>
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800414c:	f001 fcc6 	bl	8005adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e001      	b.n	8004162 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004162:	f001 fce9 	bl	8005b38 <vPortExitCritical>

	return xReturn;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004178:	f001 fcb0 	bl	8005adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	429a      	cmp	r2, r3
 8004186:	d102      	bne.n	800418e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e001      	b.n	8004192 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004192:	f001 fcd1 	bl	8005b38 <vPortExitCritical>

	return xReturn;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e014      	b.n	80041da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041b0:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <vQueueAddToRegistry+0x4c>)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041bc:	490b      	ldr	r1, [pc, #44]	; (80041ec <vQueueAddToRegistry+0x4c>)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <vQueueAddToRegistry+0x4c>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041d2:	e005      	b.n	80041e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b07      	cmp	r3, #7
 80041de:	d9e7      	bls.n	80041b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20004680 	.word	0x20004680

080041f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004200:	f001 fc6c 	bl	8005adc <vPortEnterCritical>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420a:	b25b      	sxtb	r3, r3
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <vQueueWaitForMessageRestricted+0x2a>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004220:	b25b      	sxtb	r3, r3
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d103      	bne.n	8004230 <vQueueWaitForMessageRestricted+0x40>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004230:	f001 fc82 	bl	8005b38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3324      	adds	r3, #36	; 0x24
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fc59 	bl	8004afc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800424a:	6978      	ldr	r0, [r7, #20]
 800424c:	f7ff ff28 	bl	80040a0 <prvUnlockQueue>
	}
 8004250:	bf00      	nop
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08e      	sub	sp, #56	; 0x38
 800425c:	af04      	add	r7, sp, #16
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <xTaskCreateStatic+0x28>
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	e7fe      	b.n	800427e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <xTaskCreateStatic+0x42>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	e7fe      	b.n	8004298 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800429a:	2354      	movs	r3, #84	; 0x54
 800429c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b54      	cmp	r3, #84	; 0x54
 80042a2:	d009      	beq.n	80042b8 <xTaskCreateStatic+0x60>
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	e7fe      	b.n	80042b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01e      	beq.n	80042fe <xTaskCreateStatic+0xa6>
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01b      	beq.n	80042fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042d8:	2300      	movs	r3, #0
 80042da:	9303      	str	r3, [sp, #12]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f850 	bl	8004396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f8:	f000 f8d4 	bl	80044a4 <prvAddNewTaskToReadyList>
 80042fc:	e001      	b.n	8004302 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004302:	697b      	ldr	r3, [r7, #20]
	}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	; 0x30
 8004310:	af04      	add	r7, sp, #16
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f001 fcf5 	bl	8005d10 <pvPortMalloc>
 8004326:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00e      	beq.n	800434c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800432e:	2054      	movs	r0, #84	; 0x54
 8004330:	f001 fcee 	bl	8005d10 <pvPortMalloc>
 8004334:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
 8004342:	e005      	b.n	8004350 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004344:	6978      	ldr	r0, [r7, #20]
 8004346:	f001 fda5 	bl	8005e94 <vPortFree>
 800434a:	e001      	b.n	8004350 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d017      	beq.n	8004386 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	2300      	movs	r3, #0
 8004362:	9303      	str	r3, [sp, #12]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	9302      	str	r3, [sp, #8]
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f80e 	bl	8004396 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	f000 f892 	bl	80044a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004380:	2301      	movs	r3, #1
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e002      	b.n	800438c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800438c:	69bb      	ldr	r3, [r7, #24]
	}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043ae:	3b01      	subs	r3, #1
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f023 0307 	bic.w	r3, r3, #7
 80043bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <prvInitialiseNewTask+0x46>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e7fe      	b.n	80043da <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01f      	beq.n	8004422 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	e012      	b.n	800440e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	7819      	ldrb	r1, [r3, #0]
 80043f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	3334      	adds	r3, #52	; 0x34
 80043f8:	460a      	mov	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b0f      	cmp	r3, #15
 8004412:	d9e9      	bls.n	80043e8 <prvInitialiseNewTask+0x52>
 8004414:	e000      	b.n	8004418 <prvInitialiseNewTask+0x82>
			{
				break;
 8004416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004420:	e003      	b.n	800442a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	2b06      	cmp	r3, #6
 800442e:	d901      	bls.n	8004434 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004430:	2306      	movs	r3, #6
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	2200      	movs	r2, #0
 8004444:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	3304      	adds	r3, #4
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff f9a0 	bl	8003790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	3318      	adds	r3, #24
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff f99b 	bl	8003790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	f1c3 0207 	rsb	r2, r3, #7
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	2200      	movs	r2, #0
 8004474:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	69b8      	ldr	r0, [r7, #24]
 8004484:	f001 fa00 	bl	8005888 <pxPortInitialiseStack>
 8004488:	4602      	mov	r2, r0
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800449a:	bf00      	nop
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044ac:	f001 fb16 	bl	8005adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <prvAddNewTaskToReadyList+0xb8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	4a29      	ldr	r2, [pc, #164]	; (800455c <prvAddNewTaskToReadyList+0xb8>)
 80044b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044ba:	4b29      	ldr	r3, [pc, #164]	; (8004560 <prvAddNewTaskToReadyList+0xbc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044c2:	4a27      	ldr	r2, [pc, #156]	; (8004560 <prvAddNewTaskToReadyList+0xbc>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <prvAddNewTaskToReadyList+0xb8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d110      	bne.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044d0:	f000 fc9a 	bl	8004e08 <prvInitialiseTaskLists>
 80044d4:	e00d      	b.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <prvAddNewTaskToReadyList+0xc0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <prvAddNewTaskToReadyList+0xbc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d802      	bhi.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <prvAddNewTaskToReadyList+0xbc>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <prvAddNewTaskToReadyList+0xc4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <prvAddNewTaskToReadyList+0xc4>)
 80044fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <prvAddNewTaskToReadyList+0xc8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <prvAddNewTaskToReadyList+0xc8>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <prvAddNewTaskToReadyList+0xcc>)
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7ff f940 	bl	80037aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800452a:	f001 fb05 	bl	8005b38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <prvAddNewTaskToReadyList+0xc0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <prvAddNewTaskToReadyList+0xbc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d207      	bcs.n	8004554 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <prvAddNewTaskToReadyList+0xd0>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200007d4 	.word	0x200007d4
 8004560:	200006d4 	.word	0x200006d4
 8004564:	200007e0 	.word	0x200007e0
 8004568:	200007f0 	.word	0x200007f0
 800456c:	200007dc 	.word	0x200007dc
 8004570:	200006d8 	.word	0x200006d8
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <vTaskDelay+0x60>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <vTaskDelay+0x2e>
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	e7fe      	b.n	80045a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80045a6:	f000 f87f 	bl	80046a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045aa:	2100      	movs	r1, #0
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fd9f 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b2:	f000 f887 	bl	80046c4 <xTaskResumeAll>
 80045b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <vTaskDelay+0x64>)
 80045c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200007fc 	.word	0x200007fc
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ee:	463a      	mov	r2, r7
 80045f0:	1d39      	adds	r1, r7, #4
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc f8e6 	bl	80007c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	9202      	str	r2, [sp, #8]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	460a      	mov	r2, r1
 800460e:	4920      	ldr	r1, [pc, #128]	; (8004690 <vTaskStartScheduler+0xb0>)
 8004610:	4820      	ldr	r0, [pc, #128]	; (8004694 <vTaskStartScheduler+0xb4>)
 8004612:	f7ff fe21 	bl	8004258 <xTaskCreateStatic>
 8004616:	4602      	mov	r2, r0
 8004618:	4b1f      	ldr	r3, [pc, #124]	; (8004698 <vTaskStartScheduler+0xb8>)
 800461a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <vTaskStartScheduler+0xb8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e001      	b.n	800462e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004634:	f000 fdc2 	bl	80051bc <xTimerCreateTimerTask>
 8004638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d115      	bne.n	800466c <vTaskStartScheduler+0x8c>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <vTaskStartScheduler+0xbc>)
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <vTaskStartScheduler+0xc0>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <vTaskStartScheduler+0xc4>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004666:	f001 f99b 	bl	80059a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800466a:	e00d      	b.n	8004688 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d109      	bne.n	8004688 <vTaskStartScheduler+0xa8>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e7fe      	b.n	8004686 <vTaskStartScheduler+0xa6>
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	08006384 	.word	0x08006384
 8004694:	08004dd9 	.word	0x08004dd9
 8004698:	200007f8 	.word	0x200007f8
 800469c:	200007f4 	.word	0x200007f4
 80046a0:	200007e0 	.word	0x200007e0
 80046a4:	200007d8 	.word	0x200007d8

080046a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <vTaskSuspendAll+0x18>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	4a03      	ldr	r2, [pc, #12]	; (80046c0 <vTaskSuspendAll+0x18>)
 80046b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	200007fc 	.word	0x200007fc

080046c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046d2:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <xTaskResumeAll+0x114>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <xTaskResumeAll+0x2a>
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	e7fe      	b.n	80046ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046ee:	f001 f9f5 	bl	8005adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <xTaskResumeAll+0x114>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	4a37      	ldr	r2, [pc, #220]	; (80047d8 <xTaskResumeAll+0x114>)
 80046fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fc:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <xTaskResumeAll+0x114>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d161      	bne.n	80047c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <xTaskResumeAll+0x118>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d05d      	beq.n	80047c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800470c:	e02e      	b.n	800476c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470e:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <xTaskResumeAll+0x11c>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3318      	adds	r3, #24
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff f8a2 	bl	8003864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f89d 	bl	8003864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	2201      	movs	r2, #1
 8004730:	409a      	lsls	r2, r3
 8004732:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <xTaskResumeAll+0x120>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <xTaskResumeAll+0x120>)
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <xTaskResumeAll+0x124>)
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3304      	adds	r3, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7ff f829 	bl	80037aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	4b23      	ldr	r3, [pc, #140]	; (80047ec <xTaskResumeAll+0x128>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <xTaskResumeAll+0x12c>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <xTaskResumeAll+0x11c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1cc      	bne.n	800470e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800477a:	f000 fbdf 	bl	8004f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <xTaskResumeAll+0x130>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800478a:	f000 f847 	bl	800481c <xTaskIncrementTick>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <xTaskResumeAll+0x12c>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3b01      	subs	r3, #1
 800479e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f1      	bne.n	800478a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <xTaskResumeAll+0x130>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <xTaskResumeAll+0x12c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <xTaskResumeAll+0x134>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047c8:	f001 f9b6 	bl	8005b38 <vPortExitCritical>

	return xAlreadyYielded;
 80047cc:	68bb      	ldr	r3, [r7, #8]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	200007fc 	.word	0x200007fc
 80047dc:	200007d4 	.word	0x200007d4
 80047e0:	20000794 	.word	0x20000794
 80047e4:	200007dc 	.word	0x200007dc
 80047e8:	200006d8 	.word	0x200006d8
 80047ec:	200006d4 	.word	0x200006d4
 80047f0:	200007e8 	.word	0x200007e8
 80047f4:	200007e4 	.word	0x200007e4
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <xTaskGetTickCount+0x1c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004808:	687b      	ldr	r3, [r7, #4]
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200007d8 	.word	0x200007d8

0800481c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <xTaskIncrementTick+0x144>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 8087 	bne.w	800493e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004830:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <xTaskIncrementTick+0x148>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004838:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <xTaskIncrementTick+0x148>)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11f      	bne.n	8004884 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004844:	4b48      	ldr	r3, [pc, #288]	; (8004968 <xTaskIncrementTick+0x14c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <xTaskIncrementTick+0x46>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	e7fe      	b.n	8004860 <xTaskIncrementTick+0x44>
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <xTaskIncrementTick+0x14c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	4b40      	ldr	r3, [pc, #256]	; (800496c <xTaskIncrementTick+0x150>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3e      	ldr	r2, [pc, #248]	; (8004968 <xTaskIncrementTick+0x14c>)
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	4a3e      	ldr	r2, [pc, #248]	; (800496c <xTaskIncrementTick+0x150>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <xTaskIncrementTick+0x154>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3301      	adds	r3, #1
 800487c:	4a3c      	ldr	r2, [pc, #240]	; (8004970 <xTaskIncrementTick+0x154>)
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	f000 fb5c 	bl	8004f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <xTaskIncrementTick+0x158>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	429a      	cmp	r2, r3
 800488c:	d348      	bcc.n	8004920 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <xTaskIncrementTick+0x14c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d104      	bne.n	80048a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <xTaskIncrementTick+0x158>)
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	601a      	str	r2, [r3, #0]
					break;
 80048a0:	e03e      	b.n	8004920 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <xTaskIncrementTick+0x14c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d203      	bcs.n	80048c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048ba:	4a2e      	ldr	r2, [pc, #184]	; (8004974 <xTaskIncrementTick+0x158>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048c0:	e02e      	b.n	8004920 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe ffcc 	bl	8003864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3318      	adds	r3, #24
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe ffc3 	bl	8003864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	2201      	movs	r2, #1
 80048e4:	409a      	lsls	r2, r3
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <xTaskIncrementTick+0x15c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	4a22      	ldr	r2, [pc, #136]	; (8004978 <xTaskIncrementTick+0x15c>)
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <xTaskIncrementTick+0x160>)
 80048fe:	441a      	add	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fe ff4f 	bl	80037aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <xTaskIncrementTick+0x164>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b9      	bcc.n	800488e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800491e:	e7b6      	b.n	800488e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <xTaskIncrementTick+0x164>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4915      	ldr	r1, [pc, #84]	; (800497c <xTaskIncrementTick+0x160>)
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d907      	bls.n	8004948 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e004      	b.n	8004948 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <xTaskIncrementTick+0x168>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <xTaskIncrementTick+0x168>)
 8004946:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <xTaskIncrementTick+0x16c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004954:	697b      	ldr	r3, [r7, #20]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200007fc 	.word	0x200007fc
 8004964:	200007d8 	.word	0x200007d8
 8004968:	2000078c 	.word	0x2000078c
 800496c:	20000790 	.word	0x20000790
 8004970:	200007ec 	.word	0x200007ec
 8004974:	200007f4 	.word	0x200007f4
 8004978:	200007dc 	.word	0x200007dc
 800497c:	200006d8 	.word	0x200006d8
 8004980:	200006d4 	.word	0x200006d4
 8004984:	200007e4 	.word	0x200007e4
 8004988:	200007e8 	.word	0x200007e8

0800498c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <vTaskSwitchContext+0xa0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800499a:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <vTaskSwitchContext+0xa4>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049a0:	e03e      	b.n	8004a20 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <vTaskSwitchContext+0xa4>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a8:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <vTaskSwitchContext+0xa8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049b6:	7afb      	ldrb	r3, [r7, #11]
 80049b8:	f1c3 031f 	rsb	r3, r3, #31
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	491e      	ldr	r1, [pc, #120]	; (8004a38 <vTaskSwitchContext+0xac>)
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	e7fe      	b.n	80049e4 <vTaskSwitchContext+0x58>
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <vTaskSwitchContext+0xac>)
 80049f2:	4413      	add	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3308      	adds	r3, #8
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d104      	bne.n	8004a16 <vTaskSwitchContext+0x8a>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <vTaskSwitchContext+0xb0>)
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	200007fc 	.word	0x200007fc
 8004a30:	200007e8 	.word	0x200007e8
 8004a34:	200007dc 	.word	0x200007dc
 8004a38:	200006d8 	.word	0x200006d8
 8004a3c:	200006d4 	.word	0x200006d4

08004a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <vTaskPlaceOnEventList+0x24>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e7fe      	b.n	8004a62 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <vTaskPlaceOnEventList+0x44>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3318      	adds	r3, #24
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7fe fec0 	bl	80037f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a72:	2101      	movs	r1, #1
 8004a74:	6838      	ldr	r0, [r7, #0]
 8004a76:	f000 fb3b 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200006d4 	.word	0x200006d4

08004a88 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <vTaskPlaceOnUnorderedEventList+0x26>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e7fe      	b.n	8004aac <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <vTaskPlaceOnUnorderedEventList+0x42>
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e7fe      	b.n	8004ac8 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ad4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3318      	adds	r3, #24
 8004adc:	4619      	mov	r1, r3
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7fe fe63 	bl	80037aa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb02 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
}
 8004aec:	bf00      	nop
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200007fc 	.word	0x200007fc
 8004af8:	200006d4 	.word	0x200006d4

08004afc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <vTaskPlaceOnEventListRestricted+0x26>
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e7fe      	b.n	8004b20 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <vTaskPlaceOnEventListRestricted+0x50>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3318      	adds	r3, #24
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7fe fe3d 	bl	80037aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	68b8      	ldr	r0, [r7, #8]
 8004b40:	f000 fad6 	bl	80050f0 <prvAddCurrentTaskToDelayedList>
	}
 8004b44:	bf00      	nop
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200006d4 	.word	0x200006d4

08004b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <xTaskRemoveFromEventList+0x2a>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e7fe      	b.n	8004b78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fe70 	bl	8003864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <xTaskRemoveFromEventList+0xac>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11c      	bne.n	8004bc6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fe67 	bl	8003864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <xTaskRemoveFromEventList+0xb0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <xTaskRemoveFromEventList+0xb0>)
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <xTaskRemoveFromEventList+0xb4>)
 8004bb6:	441a      	add	r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fe fdf3 	bl	80037aa <vListInsertEnd>
 8004bc4:	e005      	b.n	8004bd2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	4619      	mov	r1, r3
 8004bcc:	480e      	ldr	r0, [pc, #56]	; (8004c08 <xTaskRemoveFromEventList+0xb8>)
 8004bce:	f7fe fdec 	bl	80037aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <xTaskRemoveFromEventList+0xbc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d905      	bls.n	8004bec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <xTaskRemoveFromEventList+0xc0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e001      	b.n	8004bf0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bf0:	697b      	ldr	r3, [r7, #20]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200007fc 	.word	0x200007fc
 8004c00:	200007dc 	.word	0x200007dc
 8004c04:	200006d8 	.word	0x200006d8
 8004c08:	20000794 	.word	0x20000794
 8004c0c:	200006d4 	.word	0x200006d4
 8004c10:	200007e8 	.word	0x200007e8

08004c14 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004c1e:	4b28      	ldr	r3, [pc, #160]	; (8004cc0 <vTaskRemoveFromUnorderedEventList+0xac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <vTaskRemoveFromUnorderedEventList+0x26>
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	e7fe      	b.n	8004c38 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <vTaskRemoveFromUnorderedEventList+0x50>
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e7fe      	b.n	8004c62 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fe fdfd 	bl	8003864 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fdf8 	bl	8003864 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	2201      	movs	r2, #1
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	4a10      	ldr	r2, [pc, #64]	; (8004cc4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004c94:	441a      	add	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fe fd84 	bl	80037aa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d902      	bls.n	8004cb6 <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200007fc 	.word	0x200007fc
 8004cc4:	200007dc 	.word	0x200007dc
 8004cc8:	200006d8 	.word	0x200006d8
 8004ccc:	200006d4 	.word	0x200006d4
 8004cd0:	200007e8 	.word	0x200007e8

08004cd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <vTaskInternalSetTimeOutState+0x24>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <vTaskInternalSetTimeOutState+0x28>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	200007ec 	.word	0x200007ec
 8004cfc:	200007d8 	.word	0x200007d8

08004d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <xTaskCheckForTimeOut+0x24>
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e7fe      	b.n	8004d22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <xTaskCheckForTimeOut+0x3e>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e7fe      	b.n	8004d3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d3e:	f000 fecd 	bl	8005adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <xTaskCheckForTimeOut+0xb8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d102      	bne.n	8004d62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e023      	b.n	8004daa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <xTaskCheckForTimeOut+0xbc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d007      	beq.n	8004d7e <xTaskCheckForTimeOut+0x7e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e015      	b.n	8004daa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d20b      	bcs.n	8004da0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff9d 	bl	8004cd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e004      	b.n	8004daa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004da6:	2301      	movs	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f000 fec5 	bl	8005b38 <vPortExitCritical>

	return xReturn;
 8004dae:	69fb      	ldr	r3, [r7, #28]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	200007d8 	.word	0x200007d8
 8004dbc:	200007ec 	.word	0x200007ec

08004dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dc4:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <vTaskMissedYield+0x14>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	200007e8 	.word	0x200007e8

08004dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004de0:	f000 f852 	bl	8004e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <prvIdleTask+0x28>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d9f9      	bls.n	8004de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <prvIdleTask+0x2c>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dfc:	e7f0      	b.n	8004de0 <prvIdleTask+0x8>
 8004dfe:	bf00      	nop
 8004e00:	200006d8 	.word	0x200006d8
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	e00c      	b.n	8004e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <prvInitialiseTaskLists+0x60>)
 8004e20:	4413      	add	r3, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fc94 	bl	8003750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d9ef      	bls.n	8004e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e34:	480d      	ldr	r0, [pc, #52]	; (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e36:	f7fe fc8b 	bl	8003750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e3a:	480d      	ldr	r0, [pc, #52]	; (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e3c:	f7fe fc88 	bl	8003750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e40:	480c      	ldr	r0, [pc, #48]	; (8004e74 <prvInitialiseTaskLists+0x6c>)
 8004e42:	f7fe fc85 	bl	8003750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e46:	480c      	ldr	r0, [pc, #48]	; (8004e78 <prvInitialiseTaskLists+0x70>)
 8004e48:	f7fe fc82 	bl	8003750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e4c:	480b      	ldr	r0, [pc, #44]	; (8004e7c <prvInitialiseTaskLists+0x74>)
 8004e4e:	f7fe fc7f 	bl	8003750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <prvInitialiseTaskLists+0x78>)
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <prvInitialiseTaskLists+0x7c>)
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200006d8 	.word	0x200006d8
 8004e6c:	20000764 	.word	0x20000764
 8004e70:	20000778 	.word	0x20000778
 8004e74:	20000794 	.word	0x20000794
 8004e78:	200007a8 	.word	0x200007a8
 8004e7c:	200007c0 	.word	0x200007c0
 8004e80:	2000078c 	.word	0x2000078c
 8004e84:	20000790 	.word	0x20000790

08004e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e8e:	e019      	b.n	8004ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e90:	f000 fe24 	bl	8005adc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <prvCheckTasksWaitingTermination+0x4c>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fcdf 	bl	8003864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <prvCheckTasksWaitingTermination+0x50>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <prvCheckTasksWaitingTermination+0x50>)
 8004eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	4a09      	ldr	r2, [pc, #36]	; (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eba:	f000 fe3d 	bl	8005b38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f80e 	bl	8004ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e1      	bne.n	8004e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ecc:	bf00      	nop
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200007a8 	.word	0x200007a8
 8004ed8:	200007d4 	.word	0x200007d4
 8004edc:	200007bc 	.word	0x200007bc

08004ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 ffcc 	bl	8005e94 <vPortFree>
				vPortFree( pxTCB );
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 ffc9 	bl	8005e94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f02:	e017      	b.n	8004f34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d103      	bne.n	8004f16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 ffc0 	bl	8005e94 <vPortFree>
	}
 8004f14:	e00e      	b.n	8004f34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d009      	beq.n	8004f34 <prvDeleteTCB+0x54>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e7fe      	b.n	8004f32 <prvDeleteTCB+0x52>
	}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <prvResetNextTaskUnblockTime+0x38>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <prvResetNextTaskUnblockTime+0x3c>)
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f54:	e008      	b.n	8004f68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f56:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <prvResetNextTaskUnblockTime+0x38>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <prvResetNextTaskUnblockTime+0x3c>)
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	2000078c 	.word	0x2000078c
 8004f78:	200007f4 	.word	0x200007f4

08004f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <xTaskGetSchedulerState+0x34>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	e008      	b.n	8004fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f90:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <xTaskGetSchedulerState+0x38>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	e001      	b.n	8004fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fa2:	687b      	ldr	r3, [r7, #4]
	}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	200007e0 	.word	0x200007e0
 8004fb4:	200007fc 	.word	0x200007fc

08004fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d06c      	beq.n	80050a8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fce:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <xTaskPriorityDisinherit+0xfc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d009      	beq.n	8004fec <xTaskPriorityDisinherit+0x34>
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e7fe      	b.n	8004fea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <xTaskPriorityDisinherit+0x50>
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	e7fe      	b.n	8005006 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	429a      	cmp	r2, r3
 800501c:	d044      	beq.n	80050a8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005022:	2b00      	cmp	r3, #0
 8005024:	d140      	bne.n	80050a8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fc1a 	bl	8003864 <uxListRemove>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d115      	bne.n	8005062 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503a:	491f      	ldr	r1, [pc, #124]	; (80050b8 <xTaskPriorityDisinherit+0x100>)
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <xTaskPriorityDisinherit+0xaa>
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	2201      	movs	r2, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	4b18      	ldr	r3, [pc, #96]	; (80050bc <xTaskPriorityDisinherit+0x104>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4013      	ands	r3, r2
 800505e:	4a17      	ldr	r2, [pc, #92]	; (80050bc <xTaskPriorityDisinherit+0x104>)
 8005060:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	f1c3 0207 	rsb	r2, r3, #7
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	2201      	movs	r2, #1
 800507c:	409a      	lsls	r2, r3
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <xTaskPriorityDisinherit+0x104>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4313      	orrs	r3, r2
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <xTaskPriorityDisinherit+0x104>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <xTaskPriorityDisinherit+0x100>)
 8005096:	441a      	add	r2, r3
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7fe fb83 	bl	80037aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050a8:	697b      	ldr	r3, [r7, #20]
	}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200006d4 	.word	0x200006d4
 80050b8:	200006d8 	.word	0x200006d8
 80050bc:	200007dc 	.word	0x200007dc

080050c0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <uxTaskResetEventItemValue+0x2c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ce:	4b07      	ldr	r3, [pc, #28]	; (80050ec <uxTaskResetEventItemValue+0x2c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <uxTaskResetEventItemValue+0x2c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f1c2 0207 	rsb	r2, r2, #7
 80050dc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80050de:	687b      	ldr	r3, [r7, #4]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	200006d4 	.word	0x200006d4

080050f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050fa:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fbac 	bl	8003864 <uxListRemove>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	2201      	movs	r2, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4013      	ands	r3, r2
 8005126:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005128:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d10a      	bne.n	8005148 <prvAddCurrentTaskToDelayedList+0x58>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	481a      	ldr	r0, [pc, #104]	; (80051ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005142:	f7fe fb32 	bl	80037aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005146:	e026      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005150:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	429a      	cmp	r2, r3
 800515e:	d209      	bcs.n	8005174 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f7fe fb40 	bl	80037f2 <vListInsert>
}
 8005172:	e010      	b.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe fb36 	bl	80037f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d202      	bcs.n	8005196 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005190:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	200007d8 	.word	0x200007d8
 80051a4:	200006d4 	.word	0x200006d4
 80051a8:	200007dc 	.word	0x200007dc
 80051ac:	200007c0 	.word	0x200007c0
 80051b0:	20000790 	.word	0x20000790
 80051b4:	2000078c 	.word	0x2000078c
 80051b8:	200007f4 	.word	0x200007f4

080051bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051c6:	f000 faff 	bl	80057c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ca:	4b1c      	ldr	r3, [pc, #112]	; (800523c <xTimerCreateTimerTask+0x80>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d021      	beq.n	8005216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051da:	1d3a      	adds	r2, r7, #4
 80051dc:	f107 0108 	add.w	r1, r7, #8
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fb fb09 	bl	80007fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	9202      	str	r2, [sp, #8]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	2302      	movs	r3, #2
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	460a      	mov	r2, r1
 80051fc:	4910      	ldr	r1, [pc, #64]	; (8005240 <xTimerCreateTimerTask+0x84>)
 80051fe:	4811      	ldr	r0, [pc, #68]	; (8005244 <xTimerCreateTimerTask+0x88>)
 8005200:	f7ff f82a 	bl	8004258 <xTaskCreateStatic>
 8005204:	4602      	mov	r2, r0
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <xTimerCreateTimerTask+0x8c>)
 8005208:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800520a:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <xTimerCreateTimerTask+0x8c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005212:	2301      	movs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <xTimerCreateTimerTask+0x74>
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	e7fe      	b.n	800522e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000830 	.word	0x20000830
 8005240:	0800638c 	.word	0x0800638c
 8005244:	0800537d 	.word	0x0800537d
 8005248:	20000834 	.word	0x20000834

0800524c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <xTimerGenericCommand+0x2c>
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	e7fe      	b.n	8005276 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005278:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <xTimerGenericCommand+0x94>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d02a      	beq.n	80052d6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b05      	cmp	r3, #5
 8005290:	dc18      	bgt.n	80052c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005292:	f7ff fe73 	bl	8004f7c <xTaskGetSchedulerState>
 8005296:	4603      	mov	r3, r0
 8005298:	2b02      	cmp	r3, #2
 800529a:	d109      	bne.n	80052b0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <xTimerGenericCommand+0x94>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	f107 0110 	add.w	r1, r7, #16
 80052a4:	2300      	movs	r3, #0
 80052a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a8:	f7fe fc00 	bl	8003aac <xQueueGenericSend>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24
 80052ae:	e012      	b.n	80052d6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <xTimerGenericCommand+0x94>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	f107 0110 	add.w	r1, r7, #16
 80052b8:	2300      	movs	r3, #0
 80052ba:	2200      	movs	r2, #0
 80052bc:	f7fe fbf6 	bl	8003aac <xQueueGenericSend>
 80052c0:	6278      	str	r0, [r7, #36]	; 0x24
 80052c2:	e008      	b.n	80052d6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <xTimerGenericCommand+0x94>)
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	f107 0110 	add.w	r1, r7, #16
 80052cc:	2300      	movs	r3, #0
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	f7fe fce6 	bl	8003ca0 <xQueueGenericSendFromISR>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000830 	.word	0x20000830

080052e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <prvProcessExpiredTimer+0x94>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fab1 	bl	8003864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d021      	beq.n	8005354 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	18d1      	adds	r1, r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	6978      	ldr	r0, [r7, #20]
 800531e:	f000 f8d1 	bl	80054c4 <prvInsertTimerInActiveList>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01e      	beq.n	8005366 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005328:	2300      	movs	r3, #0
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	2300      	movs	r3, #0
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	2100      	movs	r1, #0
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7ff ff8a 	bl	800524c <xTimerGenericCommand>
 8005338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d112      	bne.n	8005366 <prvProcessExpiredTimer+0x82>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e7fe      	b.n	8005352 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	6978      	ldr	r0, [r7, #20]
 800536c:	4798      	blx	r3
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000828 	.word	0x20000828

0800537c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005384:	f107 0308 	add.w	r3, r7, #8
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f857 	bl	800543c <prvGetNextExpireTime>
 800538e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4619      	mov	r1, r3
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f803 	bl	80053a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800539a:	f000 f8d5 	bl	8005548 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800539e:	e7f1      	b.n	8005384 <prvTimerTask+0x8>

080053a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053aa:	f7ff f97d 	bl	80046a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f866 	bl	8005484 <prvSampleTimeNow>
 80053b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d130      	bne.n	8005422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <prvProcessTimerOrBlockTask+0x3c>
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d806      	bhi.n	80053dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053ce:	f7ff f979 	bl	80046c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ff85 	bl	80052e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053da:	e024      	b.n	8005426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <prvProcessTimerOrBlockTask+0x90>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <prvProcessTimerOrBlockTask+0x50>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <prvProcessTimerOrBlockTask+0x52>
 80053f0:	2300      	movs	r3, #0
 80053f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <prvProcessTimerOrBlockTask+0x94>)
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4619      	mov	r1, r3
 8005402:	f7fe fef5 	bl	80041f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005406:	f7ff f95d 	bl	80046c4 <xTaskResumeAll>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <prvProcessTimerOrBlockTask+0x98>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
}
 8005420:	e001      	b.n	8005426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005422:	f7ff f94f 	bl	80046c4 <xTaskResumeAll>
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	2000082c 	.word	0x2000082c
 8005434:	20000830 	.word	0x20000830
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <prvGetNextExpireTime+0x44>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <prvGetNextExpireTime+0x16>
 800544e:	2201      	movs	r2, #1
 8005450:	e000      	b.n	8005454 <prvGetNextExpireTime+0x18>
 8005452:	2200      	movs	r2, #0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d105      	bne.n	800546c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <prvGetNextExpireTime+0x44>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e001      	b.n	8005470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005470:	68fb      	ldr	r3, [r7, #12]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000828 	.word	0x20000828

08005484 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800548c:	f7ff f9b6 	bl	80047fc <xTaskGetTickCount>
 8005490:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <prvSampleTimeNow+0x3c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d205      	bcs.n	80054a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800549c:	f000 f930 	bl	8005700 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e002      	b.n	80054ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054ae:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <prvSampleTimeNow+0x3c>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000838 	.word	0x20000838

080054c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d812      	bhi.n	8005510 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d302      	bcc.n	80054fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e01b      	b.n	8005536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <prvInsertTimerInActiveList+0x7c>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fe f972 	bl	80037f2 <vListInsert>
 800550e:	e012      	b.n	8005536 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d206      	bcs.n	8005526 <prvInsertTimerInActiveList+0x62>
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e007      	b.n	8005536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <prvInsertTimerInActiveList+0x80>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fe f95e 	bl	80037f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005536:	697b      	ldr	r3, [r7, #20]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	2000082c 	.word	0x2000082c
 8005544:	20000828 	.word	0x20000828

08005548 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800554e:	e0c6      	b.n	80056de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	da17      	bge.n	8005586 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	3304      	adds	r3, #4
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <prvProcessReceivedCommands+0x2e>
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	e7fe      	b.n	8005574 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800557c:	6850      	ldr	r0, [r2, #4]
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	6892      	ldr	r2, [r2, #8]
 8005582:	4611      	mov	r1, r2
 8005584:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f2c0 80a7 	blt.w	80056dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe f960 	bl	8003864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055a4:	463b      	mov	r3, r7
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ff6c 	bl	8005484 <prvSampleTimeNow>
 80055ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	f200 8094 	bhi.w	80056de <prvProcessReceivedCommands+0x196>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <prvProcessReceivedCommands+0x74>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055e5 	.word	0x080055e5
 80055c8:	08005657 	.word	0x08005657
 80055cc:	0800566b 	.word	0x0800566b
 80055d0:	080056b3 	.word	0x080056b3
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055e5 	.word	0x080055e5
 80055dc:	08005657 	.word	0x08005657
 80055e0:	0800566b 	.word	0x0800566b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	18d1      	adds	r1, r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005604:	f7ff ff5e 	bl	80054c4 <prvInsertTimerInActiveList>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d067      	beq.n	80056de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005614:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05c      	beq.n	80056de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	441a      	add	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2300      	movs	r3, #0
 8005632:	2100      	movs	r1, #0
 8005634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005636:	f7ff fe09 	bl	800524c <xTimerGenericCommand>
 800563a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d14d      	bne.n	80056de <prvProcessReceivedCommands+0x196>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e7fe      	b.n	8005654 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005668:	e039      	b.n	80056de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	b2da      	uxtb	r2, r3
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <prvProcessReceivedCommands+0x156>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e7fe      	b.n	800569c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	18d1      	adds	r1, r2, r3
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ac:	f7ff ff0a 	bl	80054c4 <prvInsertTimerInActiveList>
					break;
 80056b0:	e015      	b.n	80056de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80056c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c2:	f000 fbe7 	bl	8005e94 <vPortFree>
 80056c6:	e00a      	b.n	80056de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056da:	e000      	b.n	80056de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056de:	4b07      	ldr	r3, [pc, #28]	; (80056fc <prvProcessReceivedCommands+0x1b4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1d39      	adds	r1, r7, #4
 80056e4:	2200      	movs	r2, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fb6e 	bl	8003dc8 <xQueueReceive>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f47f af2e 	bne.w	8005550 <prvProcessReceivedCommands+0x8>
	}
}
 80056f4:	bf00      	nop
 80056f6:	3730      	adds	r7, #48	; 0x30
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000830 	.word	0x20000830

08005700 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005706:	e047      	b.n	8005798 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005708:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <prvSwitchTimerLists+0xc0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005712:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <prvSwitchTimerLists+0xc0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe f89f 	bl	8003864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d02d      	beq.n	8005798 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d90e      	bls.n	800576c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800575a:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <prvSwitchTimerLists+0xc0>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fe f844 	bl	80037f2 <vListInsert>
 800576a:	e015      	b.n	8005798 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800576c:	2300      	movs	r3, #0
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	2300      	movs	r3, #0
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	2100      	movs	r1, #0
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff fd68 	bl	800524c <xTimerGenericCommand>
 800577c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <prvSwitchTimerLists+0x98>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	e7fe      	b.n	8005796 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <prvSwitchTimerLists+0xc0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1b2      	bne.n	8005708 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <prvSwitchTimerLists+0xc0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <prvSwitchTimerLists+0xc4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <prvSwitchTimerLists+0xc0>)
 80057ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057b0:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <prvSwitchTimerLists+0xc4>)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6013      	str	r3, [r2, #0]
}
 80057b6:	bf00      	nop
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000828 	.word	0x20000828
 80057c4:	2000082c 	.word	0x2000082c

080057c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057ce:	f000 f985 	bl	8005adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <prvCheckForValidListAndQueue+0x60>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d120      	bne.n	800581c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057da:	4814      	ldr	r0, [pc, #80]	; (800582c <prvCheckForValidListAndQueue+0x64>)
 80057dc:	f7fd ffb8 	bl	8003750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057e0:	4813      	ldr	r0, [pc, #76]	; (8005830 <prvCheckForValidListAndQueue+0x68>)
 80057e2:	f7fd ffb5 	bl	8003750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057e6:	4b13      	ldr	r3, [pc, #76]	; (8005834 <prvCheckForValidListAndQueue+0x6c>)
 80057e8:	4a10      	ldr	r2, [pc, #64]	; (800582c <prvCheckForValidListAndQueue+0x64>)
 80057ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <prvCheckForValidListAndQueue+0x70>)
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <prvCheckForValidListAndQueue+0x68>)
 80057f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057f2:	2300      	movs	r3, #0
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	4b11      	ldr	r3, [pc, #68]	; (800583c <prvCheckForValidListAndQueue+0x74>)
 80057f8:	4a11      	ldr	r2, [pc, #68]	; (8005840 <prvCheckForValidListAndQueue+0x78>)
 80057fa:	2110      	movs	r1, #16
 80057fc:	200a      	movs	r0, #10
 80057fe:	f7fe f8c3 	bl	8003988 <xQueueGenericCreateStatic>
 8005802:	4602      	mov	r2, r0
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <prvCheckForValidListAndQueue+0x60>)
 8005806:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <prvCheckForValidListAndQueue+0x60>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <prvCheckForValidListAndQueue+0x60>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	490b      	ldr	r1, [pc, #44]	; (8005844 <prvCheckForValidListAndQueue+0x7c>)
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fcc2 	bl	80041a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800581c:	f000 f98c 	bl	8005b38 <vPortExitCritical>
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000830 	.word	0x20000830
 800582c:	20000800 	.word	0x20000800
 8005830:	20000814 	.word	0x20000814
 8005834:	20000828 	.word	0x20000828
 8005838:	2000082c 	.word	0x2000082c
 800583c:	200008dc 	.word	0x200008dc
 8005840:	2000083c 	.word	0x2000083c
 8005844:	08006394 	.word	0x08006394

08005848 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005856:	f06f 0301 	mvn.w	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <xTimerPendFunctionCallFromISR+0x3c>)
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	f107 0114 	add.w	r1, r7, #20
 8005870:	2300      	movs	r3, #0
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	f7fe fa14 	bl	8003ca0 <xQueueGenericSendFromISR>
 8005878:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	; 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000830 	.word	0x20000830

08005888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3b04      	subs	r3, #4
 8005898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b04      	subs	r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058b8:	4a0c      	ldr	r2, [pc, #48]	; (80058ec <pxPortInitialiseStack+0x64>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b14      	subs	r3, #20
 80058c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3b04      	subs	r3, #4
 80058ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f06f 0202 	mvn.w	r2, #2
 80058d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3b20      	subs	r3, #32
 80058dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	080058f1 	.word	0x080058f1

080058f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <prvTaskExitError+0x50>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d009      	beq.n	8005918 <prvTaskExitError+0x28>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e7fe      	b.n	8005916 <prvTaskExitError+0x26>
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800592a:	bf00      	nop
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0fc      	beq.n	800592c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005932:	bf00      	nop
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	2000000c 	.word	0x2000000c
	...

08005950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <pxCurrentTCBConst2>)
 8005952:	6819      	ldr	r1, [r3, #0]
 8005954:	6808      	ldr	r0, [r1, #0]
 8005956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	f380 8809 	msr	PSP, r0
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8811 	msr	BASEPRI, r0
 800596a:	4770      	bx	lr
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst2>:
 8005970:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop

08005978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005978:	4808      	ldr	r0, [pc, #32]	; (800599c <prvPortStartFirstTask+0x24>)
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	6800      	ldr	r0, [r0, #0]
 800597e:	f380 8808 	msr	MSP, r0
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f380 8814 	msr	CONTROL, r0
 800598a:	b662      	cpsie	i
 800598c:	b661      	cpsie	f
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	df00      	svc	0
 8005998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800599a:	bf00      	nop
 800599c:	e000ed08 	.word	0xe000ed08

080059a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059a6:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <xPortStartScheduler+0x118>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a44      	ldr	r2, [pc, #272]	; (8005abc <xPortStartScheduler+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d109      	bne.n	80059c4 <xPortStartScheduler+0x24>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e7fe      	b.n	80059c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059c4:	4b3c      	ldr	r3, [pc, #240]	; (8005ab8 <xPortStartScheduler+0x118>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3d      	ldr	r2, [pc, #244]	; (8005ac0 <xPortStartScheduler+0x120>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d109      	bne.n	80059e2 <xPortStartScheduler+0x42>
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e7fe      	b.n	80059e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059e2:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <xPortStartScheduler+0x124>)
 80059e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <xPortStartScheduler+0x128>)
 8005a08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a0a:	4b30      	ldr	r3, [pc, #192]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a10:	e009      	b.n	8005a26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2e:	2b80      	cmp	r3, #128	; 0x80
 8005a30:	d0ef      	beq.n	8005a12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a32:	4b26      	ldr	r3, [pc, #152]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1c3 0307 	rsb	r3, r3, #7
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d009      	beq.n	8005a52 <xPortStartScheduler+0xb2>
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	e7fe      	b.n	8005a50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a52:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a64:	4a19      	ldr	r2, [pc, #100]	; (8005acc <xPortStartScheduler+0x12c>)
 8005a66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <xPortStartScheduler+0x130>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <xPortStartScheduler+0x130>)
 8005a76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a7c:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <xPortStartScheduler+0x130>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <xPortStartScheduler+0x130>)
 8005a82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a88:	f000 f8d6 	bl	8005c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <xPortStartScheduler+0x134>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a92:	f000 f8f5 	bl	8005c80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a96:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <xPortStartScheduler+0x138>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <xPortStartScheduler+0x138>)
 8005a9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005aa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005aa2:	f7ff ff69 	bl	8005978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005aa6:	f7fe ff71 	bl	800498c <vTaskSwitchContext>
	prvTaskExitError();
 8005aaa:	f7ff ff21 	bl	80058f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed00 	.word	0xe000ed00
 8005abc:	410fc271 	.word	0x410fc271
 8005ac0:	410fc270 	.word	0x410fc270
 8005ac4:	e000e400 	.word	0xe000e400
 8005ac8:	20000924 	.word	0x20000924
 8005acc:	20000928 	.word	0x20000928
 8005ad0:	e000ed20 	.word	0xe000ed20
 8005ad4:	2000000c 	.word	0x2000000c
 8005ad8:	e000ef34 	.word	0xe000ef34

08005adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <vPortEnterCritical+0x54>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <vPortEnterCritical+0x54>)
 8005afc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <vPortEnterCritical+0x54>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d10e      	bne.n	8005b24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <vPortEnterCritical+0x58>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <vPortEnterCritical+0x48>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	e7fe      	b.n	8005b22 <vPortEnterCritical+0x46>
	}
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	2000000c 	.word	0x2000000c
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <vPortExitCritical+0x4c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <vPortExitCritical+0x22>
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	e7fe      	b.n	8005b58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <vPortExitCritical+0x4c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <vPortExitCritical+0x4c>)
 8005b62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <vPortExitCritical+0x4c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <vPortExitCritical+0x3e>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000000c 	.word	0x2000000c
	...

08005b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b90:	f3ef 8009 	mrs	r0, PSP
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <pxCurrentTCBConst>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f01e 0f10 	tst.w	lr, #16
 8005ba0:	bf08      	it	eq
 8005ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bb4:	f380 8811 	msr	BASEPRI, r0
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f7fe fee4 	bl	800498c <vTaskSwitchContext>
 8005bc4:	f04f 0000 	mov.w	r0, #0
 8005bc8:	f380 8811 	msr	BASEPRI, r0
 8005bcc:	bc09      	pop	{r0, r3}
 8005bce:	6819      	ldr	r1, [r3, #0]
 8005bd0:	6808      	ldr	r0, [r1, #0]
 8005bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd6:	f01e 0f10 	tst.w	lr, #16
 8005bda:	bf08      	it	eq
 8005bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005be0:	f380 8809 	msr	PSP, r0
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w

08005bf0 <pxCurrentTCBConst>:
 8005bf0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c10:	f7fe fe04 	bl	800481c <xTaskIncrementTick>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <SysTick_Handler+0x3c>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	2300      	movs	r3, #0
 8005c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c2c:	bf00      	nop
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <vPortSetupTimerInterrupt+0x34>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortSetupTimerInterrupt+0x38>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <vPortSetupTimerInterrupt+0x3c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <vPortSetupTimerInterrupt+0x40>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <vPortSetupTimerInterrupt+0x44>)
 8005c56:	3b01      	subs	r3, #1
 8005c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <vPortSetupTimerInterrupt+0x34>)
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	601a      	str	r2, [r3, #0]
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000e010 	.word	0xe000e010
 8005c70:	e000e018 	.word	0xe000e018
 8005c74:	20000000 	.word	0x20000000
 8005c78:	10624dd3 	.word	0x10624dd3
 8005c7c:	e000e014 	.word	0xe000e014

08005c80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c90 <vPortEnableVFP+0x10>
 8005c84:	6801      	ldr	r1, [r0, #0]
 8005c86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c8a:	6001      	str	r1, [r0, #0]
 8005c8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c8e:	bf00      	nop
 8005c90:	e000ed88 	.word	0xe000ed88

08005c94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c9a:	f3ef 8305 	mrs	r3, IPSR
 8005c9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b0f      	cmp	r3, #15
 8005ca4:	d913      	bls.n	8005cce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ca6:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <vPortValidateInterruptPriority+0x6c>)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cb0:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <vPortValidateInterruptPriority+0x70>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	7afa      	ldrb	r2, [r7, #11]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d209      	bcs.n	8005cce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	e7fe      	b.n	8005ccc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <vPortValidateInterruptPriority+0x74>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <vPortValidateInterruptPriority+0x78>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d909      	bls.n	8005cf2 <vPortValidateInterruptPriority+0x5e>
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	e7fe      	b.n	8005cf0 <vPortValidateInterruptPriority+0x5c>
	}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	e000e3f0 	.word	0xe000e3f0
 8005d04:	20000924 	.word	0x20000924
 8005d08:	e000ed0c 	.word	0xe000ed0c
 8005d0c:	20000928 	.word	0x20000928

08005d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d1c:	f7fe fcc4 	bl	80046a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d20:	4b57      	ldr	r3, [pc, #348]	; (8005e80 <pvPortMalloc+0x170>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d28:	f000 f90c 	bl	8005f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d2c:	4b55      	ldr	r3, [pc, #340]	; (8005e84 <pvPortMalloc+0x174>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 808c 	bne.w	8005e52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01c      	beq.n	8005d7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005d40:	2208      	movs	r2, #8
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d013      	beq.n	8005d7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f023 0307 	bic.w	r3, r3, #7
 8005d58:	3308      	adds	r3, #8
 8005d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <pvPortMalloc+0x6a>
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e7fe      	b.n	8005d78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d068      	beq.n	8005e52 <pvPortMalloc+0x142>
 8005d80:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <pvPortMalloc+0x178>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d863      	bhi.n	8005e52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d8a:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <pvPortMalloc+0x17c>)
 8005d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <pvPortMalloc+0x17c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d94:	e004      	b.n	8005da0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d903      	bls.n	8005db2 <pvPortMalloc+0xa2>
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f1      	bne.n	8005d96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005db2:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <pvPortMalloc+0x170>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d04a      	beq.n	8005e52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	4413      	add	r3, r2
 8005dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d91e      	bls.n	8005e1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <pvPortMalloc+0xf4>
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	e7fe      	b.n	8005e02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e16:	69b8      	ldr	r0, [r7, #24]
 8005e18:	f000 f8f6 	bl	8006008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <pvPortMalloc+0x178>)
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <pvPortMalloc+0x178>)
 8005e28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <pvPortMalloc+0x178>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <pvPortMalloc+0x180>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d203      	bcs.n	8005e3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <pvPortMalloc+0x178>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <pvPortMalloc+0x180>)
 8005e3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <pvPortMalloc+0x174>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e52:	f7fe fc37 	bl	80046c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <pvPortMalloc+0x164>
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e7fe      	b.n	8005e72 <pvPortMalloc+0x162>
	return pvReturn;
 8005e74:	69fb      	ldr	r3, [r7, #28]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3728      	adds	r7, #40	; 0x28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20004534 	.word	0x20004534
 8005e84:	20004540 	.word	0x20004540
 8005e88:	20004538 	.word	0x20004538
 8005e8c:	2000452c 	.word	0x2000452c
 8005e90:	2000453c 	.word	0x2000453c

08005e94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d046      	beq.n	8005f34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	425b      	negs	r3, r3
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <vPortFree+0xa8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <vPortFree+0x42>
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e7fe      	b.n	8005ed4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <vPortFree+0x5e>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	e7fe      	b.n	8005ef0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <vPortFree+0xa8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d019      	beq.n	8005f34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d115      	bne.n	8005f34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <vPortFree+0xa8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	401a      	ands	r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f18:	f7fe fbc6 	bl	80046a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vPortFree+0xac>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4413      	add	r3, r2
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vPortFree+0xac>)
 8005f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f2a:	6938      	ldr	r0, [r7, #16]
 8005f2c:	f000 f86c 	bl	8006008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f30:	f7fe fbc8 	bl	80046c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f34:	bf00      	nop
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20004540 	.word	0x20004540
 8005f40:	20004538 	.word	0x20004538

08005f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <prvHeapInit+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <prvHeapInit+0xac>)
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f90:	2208      	movs	r2, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <prvHeapInit+0xb8>)
 8005fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvHeapInit+0xbc>)
 8005fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvHeapInit+0xc0>)
 8005fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	2000092c 	.word	0x2000092c
 8005ff4:	2000452c 	.word	0x2000452c
 8005ff8:	20004534 	.word	0x20004534
 8005ffc:	2000453c 	.word	0x2000453c
 8006000:	20004538 	.word	0x20004538
 8006004:	20004540 	.word	0x20004540

08006008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <prvInsertBlockIntoFreeList+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <prvInsertBlockIntoFreeList+0x14>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d8f7      	bhi.n	8006016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d108      	bne.n	800604a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d118      	bne.n	8006090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00d      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e008      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e003      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	2000452c 	.word	0x2000452c
 80060b8:	20004534 	.word	0x20004534

080060bc <__libc_init_array>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	4e0d      	ldr	r6, [pc, #52]	; (80060f4 <__libc_init_array+0x38>)
 80060c0:	4c0d      	ldr	r4, [pc, #52]	; (80060f8 <__libc_init_array+0x3c>)
 80060c2:	1ba4      	subs	r4, r4, r6
 80060c4:	10a4      	asrs	r4, r4, #2
 80060c6:	2500      	movs	r5, #0
 80060c8:	42a5      	cmp	r5, r4
 80060ca:	d109      	bne.n	80060e0 <__libc_init_array+0x24>
 80060cc:	4e0b      	ldr	r6, [pc, #44]	; (80060fc <__libc_init_array+0x40>)
 80060ce:	4c0c      	ldr	r4, [pc, #48]	; (8006100 <__libc_init_array+0x44>)
 80060d0:	f000 f82c 	bl	800612c <_init>
 80060d4:	1ba4      	subs	r4, r4, r6
 80060d6:	10a4      	asrs	r4, r4, #2
 80060d8:	2500      	movs	r5, #0
 80060da:	42a5      	cmp	r5, r4
 80060dc:	d105      	bne.n	80060ea <__libc_init_array+0x2e>
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060e4:	4798      	blx	r3
 80060e6:	3501      	adds	r5, #1
 80060e8:	e7ee      	b.n	80060c8 <__libc_init_array+0xc>
 80060ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060ee:	4798      	blx	r3
 80060f0:	3501      	adds	r5, #1
 80060f2:	e7f2      	b.n	80060da <__libc_init_array+0x1e>
 80060f4:	080063c4 	.word	0x080063c4
 80060f8:	080063c4 	.word	0x080063c4
 80060fc:	080063c4 	.word	0x080063c4
 8006100:	080063c8 	.word	0x080063c8

08006104 <memcpy>:
 8006104:	b510      	push	{r4, lr}
 8006106:	1e43      	subs	r3, r0, #1
 8006108:	440a      	add	r2, r1
 800610a:	4291      	cmp	r1, r2
 800610c:	d100      	bne.n	8006110 <memcpy+0xc>
 800610e:	bd10      	pop	{r4, pc}
 8006110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006118:	e7f7      	b.n	800610a <memcpy+0x6>

0800611a <memset>:
 800611a:	4402      	add	r2, r0
 800611c:	4603      	mov	r3, r0
 800611e:	4293      	cmp	r3, r2
 8006120:	d100      	bne.n	8006124 <memset+0xa>
 8006122:	4770      	bx	lr
 8006124:	f803 1b01 	strb.w	r1, [r3], #1
 8006128:	e7f9      	b.n	800611e <memset+0x4>
	...

0800612c <_init>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr

08006138 <_fini>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr
