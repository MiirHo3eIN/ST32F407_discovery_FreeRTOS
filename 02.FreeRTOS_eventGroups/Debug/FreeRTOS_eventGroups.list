
FreeRTOS_eventGroups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046bc  20000010  08006574  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046cc  08006574  000246cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001badf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d67  00000000  00000000  0003bb1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  0003f888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  00040c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c6f  00000000  00000000  00041e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001383f  00000000  00000000  00066abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d30c8  00000000  00000000  0007a2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d3c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc8  00000000  00000000  0014d444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061ec 	.word	0x080061ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080061ec 	.word	0x080061ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <BlueFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlueFunc */
void BlueFunc(void const * argument)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueFunc */
	/* Internal Variables */
	BlueEvent = xEventGroupCreate();
 80004e8:	f003 f823 	bl	8003532 <xEventGroupCreate>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <BlueFunc+0x10c>)
 80004f0:	601a      	str	r2, [r3, #0]
	EventBits_t uxBits;
#define IS_EVT(x) 	uxBits & x
	 osDelay(1);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f003 f809 	bl	800350a <osDelay>
	char *str1 = "EVENT_GROUP_BLUE_CREATED_FAIL\r\n";
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <BlueFunc+0x110>)
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
	char *str2 = "EVENT_GROUP_BLUE_CREATED_SUCCESSFULLY\r\n";
 80004fc:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <BlueFunc+0x114>)
 80004fe:	623b      	str	r3, [r7, #32]
	char *str3 = "==============================================\r\n";
 8000500:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <BlueFunc+0x118>)
 8000502:	61fb      	str	r3, [r7, #28]
	if (BlueEvent == NULL) 	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 300);
 8000504:	4b39      	ldr	r3, [pc, #228]	; (80005ec <BlueFunc+0x10c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d10b      	bne.n	8000524 <BlueFunc+0x44>
 800050c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800050e:	f7ff fe5f 	bl	80001d0 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800051a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800051c:	4837      	ldr	r0, [pc, #220]	; (80005fc <BlueFunc+0x11c>)
 800051e:	f002 fb2a 	bl	8002b76 <HAL_UART_Transmit>
 8000522:	e00a      	b.n	800053a <BlueFunc+0x5a>
	else 	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 300);
 8000524:	6a38      	ldr	r0, [r7, #32]
 8000526:	f7ff fe53 	bl	80001d0 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	4831      	ldr	r0, [pc, #196]	; (80005fc <BlueFunc+0x11c>)
 8000536:	f002 fb1e 	bl	8002b76 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 300);
 800053a:	69f8      	ldr	r0, [r7, #28]
 800053c:	f7ff fe48 	bl	80001d0 <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000548:	69f9      	ldr	r1, [r7, #28]
 800054a:	482c      	ldr	r0, [pc, #176]	; (80005fc <BlueFunc+0x11c>)
 800054c:	f002 fb13 	bl	8002b76 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  uxBits =  xEventGroupWaitBits(
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <BlueFunc+0x10c>)
 8000552:	6818      	ldr	r0, [r3, #0]
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2201      	movs	r2, #1
 800055c:	2103      	movs	r1, #3
 800055e:	f003 f803 	bl	8003568 <xEventGroupWaitBits>
 8000562:	61b8      	str	r0, [r7, #24]
									  BLUE_EVT | BLUE_NOT_EVT, /* The bits within the event group to wait for. */
									  pdTRUE,        /* BIT_0 & BIT_4 should be cleared before returning. */
									  pdFALSE,       /* Don't wait for both bits, either bit will do. */
									  100 );		/* Wait a maximum of 100ms for either bit to be set. */

	  if (IS_EVT(BLUE_EVT))
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d014      	beq.n	8000598 <BlueFunc+0xb8>
	  {
		  char *str1 = "BLUE_LED_SWITCH_ON\r\n";
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <BlueFunc+0x120>)
 8000570:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000578:	4822      	ldr	r0, [pc, #136]	; (8000604 <BlueFunc+0x124>)
 800057a:	f001 fb51 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 800057e:	6978      	ldr	r0, [r7, #20]
 8000580:	f7ff fe26 	bl	80001d0 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	6979      	ldr	r1, [r7, #20]
 800058c:	481b      	ldr	r0, [pc, #108]	; (80005fc <BlueFunc+0x11c>)
 800058e:	f002 faf2 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f002 ffb9 	bl	800350a <osDelay>
	  }

	  if (IS_EVT(BLUE_NOT_EVT))
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d014      	beq.n	80005cc <BlueFunc+0xec>
	  {
		  char *str1 = "BLUE_LED_SWITCH_OFF\r\n";
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <BlueFunc+0x128>)
 80005a4:	613b      	str	r3, [r7, #16]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <BlueFunc+0x124>)
 80005ae:	f001 fb37 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 80005b2:	6938      	ldr	r0, [r7, #16]
 80005b4:	f7ff fe0c 	bl	80001d0 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	6939      	ldr	r1, [r7, #16]
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <BlueFunc+0x11c>)
 80005c2:	f002 fad8 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f002 ff9f 	bl	800350a <osDelay>
	  }

	  if ((IS_EVT(BLUE_NOT_EVT) &  IS_EVT(BLUE_EVT)) == 0)
	  {
		  char *str1 = "NO_UPDATE_BLUE\r\n";
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <BlueFunc+0x12c>)
 80005ce:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f7ff fdfd 	bl	80001d0 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	68f9      	ldr	r1, [r7, #12]
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <BlueFunc+0x11c>)
 80005e0:	f002 fac9 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f002 ff90 	bl	800350a <osDelay>
	  uxBits =  xEventGroupWaitBits(
 80005ea:	e7b1      	b.n	8000550 <BlueFunc+0x70>
 80005ec:	2000454c 	.word	0x2000454c
 80005f0:	08006204 	.word	0x08006204
 80005f4:	08006224 	.word	0x08006224
 80005f8:	0800624c 	.word	0x0800624c
 80005fc:	20004648 	.word	0x20004648
 8000600:	08006280 	.word	0x08006280
 8000604:	40020c00 	.word	0x40020c00
 8000608:	08006298 	.word	0x08006298
 800060c:	080062b0 	.word	0x080062b0

08000610 <EventFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EventFunc */
void EventFunc(void const * argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
  for(;;)
  {

	    if (i == 1) 			 Set_Event(BlueEvent, BLUE_EVT);
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <EventFunc+0xa4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d105      	bne.n	800062c <EventFunc+0x1c>
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <EventFunc+0xa8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fb1a 	bl	8000c60 <Set_Event>
		if (i == 1000)			 Set_Event(OrangeEvent, ORANGE_EVT);
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <EventFunc+0xa4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000634:	d105      	bne.n	8000642 <EventFunc+0x32>
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <EventFunc+0xac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fb0f 	bl	8000c60 <Set_Event>
		if (i == 1500)
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <EventFunc+0xa4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800064a:	4293      	cmp	r3, r2
 800064c:	d10b      	bne.n	8000666 <EventFunc+0x56>
			{
			Set_Event(BlueEvent, BLUE_NOT_EVT);
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <EventFunc+0xa8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2102      	movs	r1, #2
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fb03 	bl	8000c60 <Set_Event>
			Set_Event(GreenEvent, GREEN_EVT);
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <EventFunc+0xb0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fafd 	bl	8000c60 <Set_Event>
			}

		if (j==3000)
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <EventFunc+0xb4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800066e:	4293      	cmp	r3, r2
 8000670:	d111      	bne.n	8000696 <EventFunc+0x86>
		{
			Set_Event(GreenEvent, GREEN_NOT_EVT);
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <EventFunc+0xb0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 faf1 	bl	8000c60 <Set_Event>
			Set_Event(OrangeEvent, ORANGE_NOT_EVT);
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <EventFunc+0xac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2102      	movs	r1, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f000 faeb 	bl	8000c60 <Set_Event>
			j = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <EventFunc+0xb4>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
			i = 0;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <EventFunc+0xa4>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
		}
		i++;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <EventFunc+0xa4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <EventFunc+0xa4>)
 800069e:	6013      	str	r3, [r2, #0]
		j++;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <EventFunc+0xb4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <EventFunc+0xb4>)
 80006a8:	6013      	str	r3, [r2, #0]
		osDelay(5);
 80006aa:	2005      	movs	r0, #5
 80006ac:	f002 ff2d 	bl	800350a <osDelay>
	    if (i == 1) 			 Set_Event(BlueEvent, BLUE_EVT);
 80006b0:	e7b2      	b.n	8000618 <EventFunc+0x8>
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	2000454c 	.word	0x2000454c
 80006bc:	20004554 	.word	0x20004554
 80006c0:	20004550 	.word	0x20004550
 80006c4:	20000030 	.word	0x20000030

080006c8 <GreenFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenFunc */
void GreenFunc(void const * argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenFunc */
	GreenEvent = xEventGroupCreate();
 80006d0:	f002 ff2f 	bl	8003532 <xEventGroupCreate>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <GreenFunc+0x114>)
 80006d8:	601a      	str	r2, [r3, #0]
	EventBits_t uxBits;
#define IS_EVT(x) 	uxBits & x


	osDelay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f002 ff15 	bl	800350a <osDelay>
	char *str1 = "EVENT_GROUP_GREEN_CREATED_FAIL\r\n";
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <GreenFunc+0x118>)
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
	char *str2 = "EVENT_GROUP_GREEN_CREATED_SUCCESSFULLY\r\n";
 80006e4:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <GreenFunc+0x11c>)
 80006e6:	623b      	str	r3, [r7, #32]
	char *str3 = "==============================================\r\n";
 80006e8:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <GreenFunc+0x120>)
 80006ea:	61fb      	str	r3, [r7, #28]
	if (GreenEvent == NULL) 	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 300);
 80006ec:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <GreenFunc+0x114>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10b      	bne.n	800070c <GreenFunc+0x44>
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f7ff fd6b 	bl	80001d0 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000704:	4839      	ldr	r0, [pc, #228]	; (80007ec <GreenFunc+0x124>)
 8000706:	f002 fa36 	bl	8002b76 <HAL_UART_Transmit>
 800070a:	e00a      	b.n	8000722 <GreenFunc+0x5a>
	else 	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 300);
 800070c:	6a38      	ldr	r0, [r7, #32]
 800070e:	f7ff fd5f 	bl	80001d0 <strlen>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800071a:	6a39      	ldr	r1, [r7, #32]
 800071c:	4833      	ldr	r0, [pc, #204]	; (80007ec <GreenFunc+0x124>)
 800071e:	f002 fa2a 	bl	8002b76 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 300);
 8000722:	69f8      	ldr	r0, [r7, #28]
 8000724:	f7ff fd54 	bl	80001d0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000730:	69f9      	ldr	r1, [r7, #28]
 8000732:	482e      	ldr	r0, [pc, #184]	; (80007ec <GreenFunc+0x124>)
 8000734:	f002 fa1f 	bl	8002b76 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  uxBits =  xEventGroupWaitBits(
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <GreenFunc+0x114>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	2201      	movs	r2, #1
 8000744:	2103      	movs	r1, #3
 8000746:	f002 ff0f 	bl	8003568 <xEventGroupWaitBits>
 800074a:	61b8      	str	r0, [r7, #24]
									  GREEN_EVT | GREEN_NOT_EVT, /* The bits within the event group to wait for. */
									  pdTRUE,        /* BIT_0 & BIT_4 should be cleared before returning. */
									  pdFALSE,       /* Don't wait for both bits, either bit will do. */
									  100 );		/* Wait a maximum of 100ms for either bit to be set. */

	  if (IS_EVT(GREEN_EVT))
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d014      	beq.n	8000780 <GreenFunc+0xb8>
	  {
		  char *str1 = "GREEN_LED_SWITCH_ON\r\n";
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <GreenFunc+0x128>)
 8000758:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	4824      	ldr	r0, [pc, #144]	; (80007f4 <GreenFunc+0x12c>)
 8000762:	f001 fa5d 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 8000766:	6978      	ldr	r0, [r7, #20]
 8000768:	f7ff fd32 	bl	80001d0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	6979      	ldr	r1, [r7, #20]
 8000774:	481d      	ldr	r0, [pc, #116]	; (80007ec <GreenFunc+0x124>)
 8000776:	f002 f9fe 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f002 fec5 	bl	800350a <osDelay>
	  }

	  if (IS_EVT(GREEN_NOT_EVT))
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	2b00      	cmp	r3, #0
 8000788:	d014      	beq.n	80007b4 <GreenFunc+0xec>
	  {
		  char *str1 = "GREEN_LED_SWITCH_OFF\r\n";
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <GreenFunc+0x130>)
 800078c:	613b      	str	r3, [r7, #16]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <GreenFunc+0x12c>)
 8000796:	f001 fa43 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 800079a:	6938      	ldr	r0, [r7, #16]
 800079c:	f7ff fd18 	bl	80001d0 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	6939      	ldr	r1, [r7, #16]
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <GreenFunc+0x124>)
 80007aa:	f002 f9e4 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f002 feab 	bl	800350a <osDelay>
	  }

	  if ( (IS_EVT(GREEN_NOT_EVT) & IS_EVT(GREEN_EVT)) == 0)
	  {
		  char *str1 = "NO_UPDATE_GREEN\r\n";
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <GreenFunc+0x134>)
 80007b6:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff fd09 	bl	80001d0 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	68f9      	ldr	r1, [r7, #12]
 80007c6:	4809      	ldr	r0, [pc, #36]	; (80007ec <GreenFunc+0x124>)
 80007c8:	f002 f9d5 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f002 fe9c 	bl	800350a <osDelay>
	  }
    osDelay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f002 fe99 	bl	800350a <osDelay>
	  uxBits =  xEventGroupWaitBits(
 80007d8:	e7ae      	b.n	8000738 <GreenFunc+0x70>
 80007da:	bf00      	nop
 80007dc:	20004550 	.word	0x20004550
 80007e0:	080062c4 	.word	0x080062c4
 80007e4:	080062e8 	.word	0x080062e8
 80007e8:	08006314 	.word	0x08006314
 80007ec:	20004648 	.word	0x20004648
 80007f0:	08006348 	.word	0x08006348
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	08006360 	.word	0x08006360
 80007fc:	08006378 	.word	0x08006378

08000800 <OrangeFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeFunc */
void OrangeFunc(void const * argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af02      	add	r7, sp, #8
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeFunc */
	OrangeEvent = xEventGroupCreate();
 8000808:	f002 fe93 	bl	8003532 <xEventGroupCreate>
 800080c:	4602      	mov	r2, r0
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <OrangeFunc+0x114>)
 8000810:	601a      	str	r2, [r3, #0]
	EventBits_t uxBits;
#define IS_EVT(x) 	uxBits & x

	 osDelay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f002 fe79 	bl	800350a <osDelay>
	char *str1 = "EVENT_GROUP_ORANGE_CREATED_FAIL\r\n";
 8000818:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <OrangeFunc+0x118>)
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
	char *str2 = "EVENT_GROUP_ORANGE_CREATED_SUCCESSFULLY\r\n";
 800081c:	4b3f      	ldr	r3, [pc, #252]	; (800091c <OrangeFunc+0x11c>)
 800081e:	623b      	str	r3, [r7, #32]
	char *str3 = "==============================================\r\n";
 8000820:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <OrangeFunc+0x120>)
 8000822:	61fb      	str	r3, [r7, #28]
	if (OrangeEvent == NULL) 	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 300);
 8000824:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <OrangeFunc+0x114>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10b      	bne.n	8000844 <OrangeFunc+0x44>
 800082c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800082e:	f7ff fccf 	bl	80001d0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800083a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800083c:	4839      	ldr	r0, [pc, #228]	; (8000924 <OrangeFunc+0x124>)
 800083e:	f002 f99a 	bl	8002b76 <HAL_UART_Transmit>
 8000842:	e00a      	b.n	800085a <OrangeFunc+0x5a>
	else 	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), 300);
 8000844:	6a38      	ldr	r0, [r7, #32]
 8000846:	f7ff fcc3 	bl	80001d0 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000852:	6a39      	ldr	r1, [r7, #32]
 8000854:	4833      	ldr	r0, [pc, #204]	; (8000924 <OrangeFunc+0x124>)
 8000856:	f002 f98e 	bl	8002b76 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3), 300);
 800085a:	69f8      	ldr	r0, [r7, #28]
 800085c:	f7ff fcb8 	bl	80001d0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000868:	69f9      	ldr	r1, [r7, #28]
 800086a:	482e      	ldr	r0, [pc, #184]	; (8000924 <OrangeFunc+0x124>)
 800086c:	f002 f983 	bl	8002b76 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	  uxBits =  xEventGroupWaitBits(
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <OrangeFunc+0x114>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2300      	movs	r3, #0
 800087a:	2201      	movs	r2, #1
 800087c:	2103      	movs	r1, #3
 800087e:	f002 fe73 	bl	8003568 <xEventGroupWaitBits>
 8000882:	61b8      	str	r0, [r7, #24]
									  pdTRUE,        /* BIT_0 & BIT_4 should be cleared before returning. */
									  pdFALSE,       /* Don't wait for both bits, either bit will do. */
									  100 );		/* Wait a maximum of 100ms for either bit to be set. */


	  if (IS_EVT(ORANGE_EVT))
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	2b00      	cmp	r3, #0
 800088c:	d014      	beq.n	80008b8 <OrangeFunc+0xb8>
	  {
		  char *str1 = "ORANGE_LED_SWITCH_ON\r\n";
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <OrangeFunc+0x128>)
 8000890:	617b      	str	r3, [r7, #20]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4824      	ldr	r0, [pc, #144]	; (800092c <OrangeFunc+0x12c>)
 800089a:	f001 f9c1 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	2364      	movs	r3, #100	; 0x64
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	481d      	ldr	r0, [pc, #116]	; (8000924 <OrangeFunc+0x124>)
 80008ae:	f002 f962 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f002 fe29 	bl	800350a <osDelay>
	  }

	  if (IS_EVT(ORANGE_NOT_EVT))
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d014      	beq.n	80008ec <OrangeFunc+0xec>
	  {
		  char *str1 = "ORANGE_LED_SWITCH_OFF\r\n";
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <OrangeFunc+0x130>)
 80008c4:	613b      	str	r3, [r7, #16]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4817      	ldr	r0, [pc, #92]	; (800092c <OrangeFunc+0x12c>)
 80008ce:	f001 f9a7 	bl	8001c20 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 80008d2:	6938      	ldr	r0, [r7, #16]
 80008d4:	f7ff fc7c 	bl	80001d0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	6939      	ldr	r1, [r7, #16]
 80008e0:	4810      	ldr	r0, [pc, #64]	; (8000924 <OrangeFunc+0x124>)
 80008e2:	f002 f948 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f002 fe0f 	bl	800350a <osDelay>
	  }

	  if ((IS_EVT(ORANGE_NOT_EVT) &  IS_EVT(ORANGE_EVT)) == 0 )
	  {
		  char *str1 = "NO_UPDATE_ORANGE\r\n";
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <OrangeFunc+0x134>)
 80008ee:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff fc6d 	bl	80001d0 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	68f9      	ldr	r1, [r7, #12]
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <OrangeFunc+0x124>)
 8000900:	f002 f939 	bl	8002b76 <HAL_UART_Transmit>
		  osDelay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f002 fe00 	bl	800350a <osDelay>
	  }
    osDelay(1);
 800090a:	2001      	movs	r0, #1
 800090c:	f002 fdfd 	bl	800350a <osDelay>
	  uxBits =  xEventGroupWaitBits(
 8000910:	e7ae      	b.n	8000870 <OrangeFunc+0x70>
 8000912:	bf00      	nop
 8000914:	20004554 	.word	0x20004554
 8000918:	0800638c 	.word	0x0800638c
 800091c:	080063b0 	.word	0x080063b0
 8000920:	080063dc 	.word	0x080063dc
 8000924:	20004648 	.word	0x20004648
 8000928:	08006410 	.word	0x08006410
 800092c:	40020c00 	.word	0x40020c00
 8000930:	08006428 	.word	0x08006428
 8000934:	08006440 	.word	0x08006440

08000938 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_DMA_Init+0x3c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <MX_DMA_Init+0x3c>)
 8000948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_DMA_Init+0x3c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2010      	movs	r0, #16
 8000960:	f000 fcb2 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000964:	2010      	movs	r0, #16
 8000966:	f000 fccb 	bl	8001300 <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000988:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <vApplicationGetIdleTaskMemory+0x30>)
 800098e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000034 	.word	0x20000034
 80009a8:	20000088 	.word	0x20000088

080009ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80009bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <vApplicationGetTimerTaskMemory+0x30>)
 80009c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000288 	.word	0x20000288
 80009dc:	200002dc 	.word	0x200002dc

080009e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b09c      	sub	sp, #112	; 0x70
 80009e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BlueTask */
  osThreadDef(BlueTask, BlueFunc, osPriorityBelowNormal, 0, 128);
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_FREERTOS_Init+0xa4>)
 80009e8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80009ec:	461d      	mov	r5, r3
 80009ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlueTaskHandle = osThreadCreate(osThread(BlueTask), NULL);
 80009fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 fd36 	bl	8003472 <osThreadCreate>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_FREERTOS_Init+0xa8>)
 8000a0a:	601a      	str	r2, [r3, #0]

  /* definition and creation of OrangeTask */
  osThreadDef(OrangeTask, OrangeFunc, osPriorityNormal, 1, 128);
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_FREERTOS_Init+0xac>)
 8000a0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a12:	461d      	mov	r5, r3
 8000a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrangeTaskHandle = osThreadCreate(osThread(OrangeTask), NULL);
 8000a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fd23 	bl	8003472 <osThreadCreate>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_FREERTOS_Init+0xb0>)
 8000a30:	601a      	str	r2, [r3, #0]

  /* definition and creation of GreenTask */
  osThreadDef(GreenTask, GreenFunc, osPriorityAboveNormal, 2, 128);
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_FREERTOS_Init+0xb4>)
 8000a34:	f107 041c 	add.w	r4, r7, #28
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenTaskHandle = osThreadCreate(osThread(GreenTask), NULL);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fd10 	bl	8003472 <osThreadCreate>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_FREERTOS_Init+0xb8>)
 8000a56:	601a      	str	r2, [r3, #0]

  /* definition and creation of EventTask */
  osThreadDef(EventTask, EventFunc, osPriorityIdle, 0, 128);
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_FREERTOS_Init+0xbc>)
 8000a5a:	463c      	mov	r4, r7
 8000a5c:	461d      	mov	r5, r3
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventTaskHandle = osThreadCreate(osThread(EventTask), NULL);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fcff 	bl	8003472 <osThreadCreate>
 8000a74:	4602      	mov	r2, r0
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_FREERTOS_Init+0xc0>)
 8000a78:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a7a:	bf00      	nop
 8000a7c:	3770      	adds	r7, #112	; 0x70
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bdb0      	pop	{r4, r5, r7, pc}
 8000a82:	bf00      	nop
 8000a84:	08006460 	.word	0x08006460
 8000a88:	20004560 	.word	0x20004560
 8000a8c:	08006488 	.word	0x08006488
 8000a90:	20004558 	.word	0x20004558
 8000a94:	080064b0 	.word	0x080064b0
 8000a98:	20004564 	.word	0x20004564
 8000a9c:	080064d8 	.word	0x080064d8
 8000aa0:	2000455c 	.word	0x2000455c

08000aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a25      	ldr	r2, [pc, #148]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_GPIO_Init+0xb4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_GPIO_Init+0xb8>)
 8000b16:	f001 f883 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b2e:	f000 fedd 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b32:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0xb8>)
 8000b4c:	f000 fece 	bl	80018ec <HAL_GPIO_Init>

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	40020000 	.word	0x40020000

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f000 fab4 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f80e 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f7ff ff98 	bl	8000aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b74:	f7ff fee0 	bl	8000938 <MX_DMA_Init>
  MX_TIM6_Init();
 8000b78:	f000 f982 	bl	8000e80 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000b7c:	f000 f9dc 	bl	8000f38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000b80:	f7ff ff2e 	bl	80009e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b84:	f002 fc6e 	bl	8003464 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0x24>
	...

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	; 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	2230      	movs	r2, #48	; 0x30
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fb1d 	bl	80061da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a27      	ldr	r2, [pc, #156]	; (8000c58 <SystemClock_Config+0xcc>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <SystemClock_Config+0xcc>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <SystemClock_Config+0xd0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c00:	23a8      	movs	r3, #168	; 0xa8
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 f81f 	bl	8001c54 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c1c:	f000 f854 	bl	8000cc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2302      	movs	r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fa78 	bl	8002134 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c4a:	f000 f83d 	bl	8000cc8 <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	; 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <Set_Event>:

/* USER CODE BEGIN 4 */
void Set_Event(void * xEventGroup, uint32_t xEvent)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	EventBits_t uxBits;
	char *str1 = "Event Group Initziallization Failed\r\n";
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <Set_Event+0x3c>)
 8000c6c:	60fb      	str	r3, [r7, #12]
	if (xEventGroup == NULL)		HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), 100);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <Set_Event+0x28>
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff faab 	bl	80001d0 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	68f9      	ldr	r1, [r7, #12]
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <Set_Event+0x40>)
 8000c84:	f001 ff77 	bl	8002b76 <HAL_UART_Transmit>
	uxBits = xEventGroupSetBits(xEventGroup, /* The event group being updated. */
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f002 fd36 	bl	80036fc <xEventGroupSetBits>
 8000c90:	60b8      	str	r0, [r7, #8]
								xEvent); 	/* The bits being set. */
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	080064f4 	.word	0x080064f4
 8000ca0:	20004648 	.word	0x20004648

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb6:	f000 fa2f 	bl	8001118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_MspInit+0x54>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <HAL_MspInit+0x54>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x54>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x54>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x54>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x54>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fad3 	bl	80012c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 fabf 	bl	80012c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000d4a:	2019      	movs	r0, #25
 8000d4c:	f000 fad8 	bl	8001300 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_InitTick+0xa4>)
 8000d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fbce 	bl	8002518 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d7c:	f001 fbb8 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8000d80:	4603      	mov	r3, r0
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_InitTick+0xa8>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3b01      	subs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_InitTick+0xac>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_InitTick+0xb0>)
 8000d98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_InitTick+0xac>)
 8000d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_InitTick+0xac>)
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_InitTick+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_InitTick+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <HAL_InitTick+0xac>)
 8000db6:	f001 fbe1 	bl	800257c <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <HAL_InitTick+0xac>)
 8000dc2:	f001 fc06 	bl	80025d2 <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	20004568 	.word	0x20004568
 8000de0:	40010000 	.word	0x40010000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA1_Stream5_IRQHandler+0x10>)
 8000e1e:	f000 fb2b 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200045e8 	.word	0x200045e8

08000e2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e32:	f001 fbf2 	bl	800261a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20004568 	.word	0x20004568

08000e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM6_DAC_IRQHandler+0x10>)
 8000e46:	f001 fbe8 	bl	800261a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200045a8 	.word	0x200045a8

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <SystemInit+0x28>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <SystemInit+0x28>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SystemInit+0x28>)
 8000e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_TIM6_Init+0x64>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000ea2:	2263      	movs	r2, #99	; 0x63
 8000ea4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000eae:	f001 fb65 	bl	800257c <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000eb8:	f7ff ff06 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_TIM6_Init+0x60>)
 8000eca:	f001 fd77 	bl	80029bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000ed4:	f7ff fef8 	bl	8000cc8 <Error_Handler>
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200045a8 	.word	0x200045a8
 8000ee4:	40001000 	.word	0x40001000

08000ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d115      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x4c>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2105      	movs	r1, #5
 8000f1a:	2036      	movs	r0, #54	; 0x36
 8000f1c:	f000 f9d4 	bl	80012c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	; 0x36
 8000f22:	f000 f9ed 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000
 8000f34:	40023800 	.word	0x40023800

08000f38 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_USART2_UART_Init+0x50>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_USART2_UART_Init+0x4c>)
 8000f70:	f001 fdb4 	bl	8002adc <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f7a:	f7ff fea5 	bl	8000cc8 <Error_Handler>
  }

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20004648 	.word	0x20004648
 8000f88:	40004400 	.word	0x40004400

08000f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <HAL_UART_MspInit+0xe0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d159      	bne.n	8001062 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <HAL_UART_MspInit+0xe4>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <HAL_UART_MspInit+0xe4>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <HAL_UART_MspInit+0xe4>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_UART_MspInit+0xe4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_UART_MspInit+0xe4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <HAL_UART_MspInit+0xe4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	481c      	ldr	r0, [pc, #112]	; (8001074 <HAL_UART_MspInit+0xe8>)
 8001002:	f000 fc73 	bl	80018ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001008:	4a1c      	ldr	r2, [pc, #112]	; (800107c <HAL_UART_MspInit+0xf0>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_UART_MspInit+0xec>)
 800100e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001012:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001026:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_UART_MspInit+0xec>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_UART_MspInit+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_UART_MspInit+0xec>)
 8001048:	f000 f968 	bl	800131c <HAL_DMA_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001052:	f7ff fe39 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_UART_MspInit+0xec>)
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_UART_MspInit+0xec>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40004400 	.word	0x40004400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000
 8001078:	200045e8 	.word	0x200045e8
 800107c:	40026088 	.word	0x40026088

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001086:	e003      	b.n	8001090 <LoopCopyDataInit>

08001088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800108a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800108c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108e:	3104      	adds	r1, #4

08001090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001098:	d3f6      	bcc.n	8001088 <CopyDataInit>
  ldr  r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800109c:	e002      	b.n	80010a4 <LoopFillZerobss>

0800109e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a0:	f842 3b04 	str.w	r3, [r2], #4

080010a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a8:	d3f9      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff fed3 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f005 f865 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fd57 	bl	8000b64 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010bc:	08006564 	.word	0x08006564
  ldr  r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80010c8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80010cc:	200046cc 	.word	0x200046cc

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f8d8 	bl	80012b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fe14 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fde6 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20004688 	.word	0x20004688

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20004688 	.word	0x20004688

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff4c 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012da:	f7ff ff61 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f7ff ffb1 	bl	800124c <NVIC_EncodePriority>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff80 	bl	80011f8 <__NVIC_SetPriority>
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff54 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ff0a 	bl	8001140 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e099      	b.n	800146c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001358:	e00f      	b.n	800137a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800135a:	f7ff fef1 	bl	8001140 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b05      	cmp	r3, #5
 8001366:	d908      	bls.n	800137a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e078      	b.n	800146c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e8      	bne.n	800135a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_DMA_Init+0x158>)
 8001394:	4013      	ands	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d107      	bne.n	80013e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4313      	orrs	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f023 0307 	bic.w	r3, r3, #7
 80013fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	2b04      	cmp	r3, #4
 800140c:	d117      	bne.n	800143e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00e      	beq.n	800143e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f9e9 	bl	80017f8 <DMA_CheckFifoParam>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800143a:	2301      	movs	r3, #1
 800143c:	e016      	b.n	800146c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f9a0 	bl	800178c <DMA_CalcBaseAndBitshift>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	f010803f 	.word	0xf010803f

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_DMA_IRQHandler+0x258>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a92      	ldr	r2, [pc, #584]	; (80016d4 <HAL_DMA_IRQHandler+0x25c>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0a9b      	lsrs	r3, r3, #10
 8001490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a2:	2208      	movs	r2, #8
 80014a4:	409a      	lsls	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01a      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0204 	bic.w	r2, r2, #4
 80014ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2208      	movs	r2, #8
 80014d2:	409a      	lsls	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	2201      	movs	r2, #1
 80014ea:	409a      	lsls	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d012      	beq.n	800151a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	2201      	movs	r2, #1
 8001508:	409a      	lsls	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	f043 0202 	orr.w	r2, r3, #2
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2204      	movs	r2, #4
 8001520:	409a      	lsls	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d012      	beq.n	8001550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2204      	movs	r2, #4
 800153e:	409a      	lsls	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f043 0204 	orr.w	r2, r3, #4
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2210      	movs	r2, #16
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d043      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03c      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2210      	movs	r2, #16
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d018      	beq.n	80015ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d024      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
 80015a6:	e01f      	b.n	80015e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01b      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
 80015b8:	e016      	b.n	80015e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d107      	bne.n	80015d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0208 	bic.w	r2, r2, #8
 80015d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2220      	movs	r2, #32
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 808e 	beq.w	8001716 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8086 	beq.w	8001716 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2220      	movs	r2, #32
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b05      	cmp	r3, #5
 8001620:	d136      	bne.n	8001690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0216 	bic.w	r2, r2, #22
 8001630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <HAL_DMA_IRQHandler+0x1da>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0208 	bic.w	r2, r2, #8
 8001660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	223f      	movs	r2, #63	; 0x3f
 8001668:	409a      	lsls	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	2b00      	cmp	r3, #0
 8001684:	d07d      	beq.n	8001782 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
        }
        return;
 800168e:	e078      	b.n	8001782 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01c      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d030      	beq.n	8001716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e02b      	b.n	8001716 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d027      	beq.n	8001716 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
 80016ce:	e022      	b.n	8001716 <HAL_DMA_IRQHandler+0x29e>
 80016d0:	20000000 	.word	0x20000000
 80016d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0210 	bic.w	r2, r2, #16
 80016f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	2b00      	cmp	r3, #0
 800171c:	d032      	beq.n	8001784 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d022      	beq.n	8001770 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2205      	movs	r2, #5
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3301      	adds	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	429a      	cmp	r2, r3
 800174c:	d307      	bcc.n	800175e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f2      	bne.n	8001742 <HAL_DMA_IRQHandler+0x2ca>
 800175c:	e000      	b.n	8001760 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800175e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
 8001780:	e000      	b.n	8001784 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001782:	bf00      	nop
    }
  }
}
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop

0800178c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b10      	subs	r3, #16
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <DMA_CalcBaseAndBitshift+0x64>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <DMA_CalcBaseAndBitshift+0x68>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d909      	bls.n	80017ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
 80017cc:	e007      	b.n	80017de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	aaaaaaab 	.word	0xaaaaaaab
 80017f4:	0800654c 	.word	0x0800654c

080017f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11f      	bne.n	8001852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d855      	bhi.n	80018c4 <DMA_CheckFifoParam+0xcc>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <DMA_CheckFifoParam+0x28>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001843 	.word	0x08001843
 8001828:	08001831 	.word	0x08001831
 800182c:	080018c5 	.word	0x080018c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d045      	beq.n	80018c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001840:	e042      	b.n	80018c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800184a:	d13f      	bne.n	80018cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001850:	e03c      	b.n	80018cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185a:	d121      	bne.n	80018a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d836      	bhi.n	80018d0 <DMA_CheckFifoParam+0xd8>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <DMA_CheckFifoParam+0x70>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001879 	.word	0x08001879
 800186c:	0800187f 	.word	0x0800187f
 8001870:	08001879 	.word	0x08001879
 8001874:	08001891 	.word	0x08001891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      break;
 800187c:	e02f      	b.n	80018de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188e:	e021      	b.n	80018d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001898:	d11e      	bne.n	80018d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800189e:	e01b      	b.n	80018d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d902      	bls.n	80018ac <DMA_CheckFifoParam+0xb4>
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d003      	beq.n	80018b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018aa:	e018      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      break;
 80018b0:	e015      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00e      	beq.n	80018dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
      break;
 80018c2:	e00b      	b.n	80018dc <DMA_CheckFifoParam+0xe4>
      break;
 80018c4:	bf00      	nop
 80018c6:	e00a      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018c8:	bf00      	nop
 80018ca:	e008      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018cc:	bf00      	nop
 80018ce:	e006      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;   
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018dc:	bf00      	nop
    }
  } 
  
  return status; 
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e16b      	b.n	8001be0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 815a 	bne.w	8001bda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d00b      	beq.n	8001946 <HAL_GPIO_Init+0x5a>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800193a:	2b11      	cmp	r3, #17
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b12      	cmp	r3, #18
 8001944:	d130      	bne.n	80019a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0xfc>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80b4 	beq.w	8001bda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b5f      	ldr	r3, [pc, #380]	; (8001bf4 <HAL_GPIO_Init+0x308>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <HAL_GPIO_Init+0x308>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <HAL_GPIO_Init+0x308>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <HAL_GPIO_Init+0x30c>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_GPIO_Init+0x310>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02b      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x314>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x318>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_Init+0x31c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x320>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x216>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_GPIO_Init+0x324>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x212>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x328>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <HAL_GPIO_Init+0x32c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x20a>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e00e      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00c      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e00a      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001afe:	2305      	movs	r3, #5
 8001b00:	e008      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b06:	2303      	movs	r3, #3
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b12:	2300      	movs	r3, #0
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f002 0203 	and.w	r2, r2, #3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b24:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_GPIO_Init+0x30c>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b56:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_GPIO_Init+0x330>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f ae90 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	3724      	adds	r7, #36	; 0x24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40021400 	.word	0x40021400
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40021c00 	.word	0x40021c00
 8001c1c:	40013c00 	.word	0x40013c00

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e25b      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	4ba3      	ldr	r3, [pc, #652]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b9d      	ldr	r3, [pc, #628]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e236      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8a      	ldr	r2, [pc, #552]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a87      	ldr	r2, [pc, #540]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a83      	ldr	r2, [pc, #524]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa18 	bl	8001140 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fa14 	bl	8001140 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1fb      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa04 	bl	8001140 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fa00 	bl	8001140 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1e7      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1bb      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4952      	ldr	r1, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x2b0>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f9b9 	bl	8001140 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f9b5 	bl	8001140 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e19c      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4940      	ldr	r1, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x2b0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f998 	bl	8001140 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff f994 	bl	8001140 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e17b      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x2b4>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f978 	bl	8001140 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f974 	bl	8001140 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e15b      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x2b4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f961 	bl	8001140 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff f95d 	bl	8001140 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e144      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a0 	beq.w	8001fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d121      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f923 	bl	8001140 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e011      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ce>
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470000 	.word	0x42470000
 8001f08:	42470e80 	.word	0x42470e80
 8001f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7ff f916 	bl	8001140 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0fd      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x4d4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
 8001f36:	4b7d      	ldr	r3, [pc, #500]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a7c      	ldr	r2, [pc, #496]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x32a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b77      	ldr	r3, [pc, #476]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a76      	ldr	r2, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b74      	ldr	r3, [pc, #464]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a73      	ldr	r2, [pc, #460]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x32a>
 8001f66:	4b71      	ldr	r3, [pc, #452]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a70      	ldr	r2, [pc, #448]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a6d      	ldr	r2, [pc, #436]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff f8db 	bl	8001140 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff f8d7 	bl	8001140 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0bc      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b61      	ldr	r3, [pc, #388]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x33a>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f8c5 	bl	8001140 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff f8c1 	bl	8001140 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0a6      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b56      	ldr	r3, [pc, #344]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8092 	beq.w	800211c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d05c      	beq.n	80020be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d141      	bne.n	8002090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b48      	ldr	r3, [pc, #288]	; (8002130 <HAL_RCC_OscConfig+0x4dc>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff f895 	bl	8001140 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff f891 	bl	8001140 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e078      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
 800205c:	4933      	ldr	r1, [pc, #204]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_RCC_OscConfig+0x4dc>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff f86a 	bl	8001140 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff f866 	bl	8001140 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e04d      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x41c>
 800208e:	e045      	b.n	800211c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_OscConfig+0x4dc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff f853 	bl	8001140 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff f84f 	bl	8001140 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e036      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x44a>
 80020bc:	e02e      	b.n	800211c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e029      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_OscConfig+0x4d8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d115      	bne.n	8002118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f2:	4013      	ands	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10d      	bne.n	8002118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d106      	bne.n	8002118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40007000 	.word	0x40007000
 800212c:	40023800 	.word	0x40023800
 8002130:	42470060 	.word	0x42470060

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0cc      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d90c      	bls.n	8002170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d044      	beq.n	8002254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d119      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e067      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4934      	ldr	r1, [pc, #208]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002224:	f7fe ff8c 	bl	8001140 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7fe ff88 	bl	8001140 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d20c      	bcs.n	800227c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4601      	mov	r1, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	fa21 f303 	lsr.w	r3, r1, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fd28 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00
 80022f0:	40023800 	.word	0x40023800
 80022f4:	08006534 	.word	0x08006534
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d007      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x32>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d008      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x38>
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80b4 	bne.w	8002494 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800232e:	60bb      	str	r3, [r7, #8]
       break;
 8002330:	e0b3      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002334:	60bb      	str	r3, [r7, #8]
      break;
 8002336:	e0b0      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002338:	4b5a      	ldr	r3, [pc, #360]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002340:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d04a      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234e:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	f04f 0400 	mov.w	r4, #0
 8002358:	f240 11ff 	movw	r1, #511	; 0x1ff
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	ea03 0501 	and.w	r5, r3, r1
 8002364:	ea04 0602 	and.w	r6, r4, r2
 8002368:	4629      	mov	r1, r5
 800236a:	4632      	mov	r2, r6
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	f04f 0400 	mov.w	r4, #0
 8002374:	0154      	lsls	r4, r2, #5
 8002376:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800237a:	014b      	lsls	r3, r1, #5
 800237c:	4619      	mov	r1, r3
 800237e:	4622      	mov	r2, r4
 8002380:	1b49      	subs	r1, r1, r5
 8002382:	eb62 0206 	sbc.w	r2, r2, r6
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	f04f 0400 	mov.w	r4, #0
 800238e:	0194      	lsls	r4, r2, #6
 8002390:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002394:	018b      	lsls	r3, r1, #6
 8002396:	1a5b      	subs	r3, r3, r1
 8002398:	eb64 0402 	sbc.w	r4, r4, r2
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	00e2      	lsls	r2, r4, #3
 80023a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023aa:	00d9      	lsls	r1, r3, #3
 80023ac:	460b      	mov	r3, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	195b      	adds	r3, r3, r5
 80023b2:	eb44 0406 	adc.w	r4, r4, r6
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	0262      	lsls	r2, r4, #9
 80023c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023c4:	0259      	lsls	r1, r3, #9
 80023c6:	460b      	mov	r3, r1
 80023c8:	4614      	mov	r4, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7fd ff02 	bl	80001e0 <__aeabi_uldivmod>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e049      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	f04f 0400 	mov.w	r4, #0
 80023ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	ea03 0501 	and.w	r5, r3, r1
 80023fa:	ea04 0602 	and.w	r6, r4, r2
 80023fe:	4629      	mov	r1, r5
 8002400:	4632      	mov	r2, r6
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	f04f 0400 	mov.w	r4, #0
 800240a:	0154      	lsls	r4, r2, #5
 800240c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002410:	014b      	lsls	r3, r1, #5
 8002412:	4619      	mov	r1, r3
 8002414:	4622      	mov	r2, r4
 8002416:	1b49      	subs	r1, r1, r5
 8002418:	eb62 0206 	sbc.w	r2, r2, r6
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	f04f 0400 	mov.w	r4, #0
 8002424:	0194      	lsls	r4, r2, #6
 8002426:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800242a:	018b      	lsls	r3, r1, #6
 800242c:	1a5b      	subs	r3, r3, r1
 800242e:	eb64 0402 	sbc.w	r4, r4, r2
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	00e2      	lsls	r2, r4, #3
 800243c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002440:	00d9      	lsls	r1, r3, #3
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	195b      	adds	r3, r3, r5
 8002448:	eb44 0406 	adc.w	r4, r4, r6
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	02a2      	lsls	r2, r4, #10
 8002456:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800245a:	0299      	lsls	r1, r3, #10
 800245c:	460b      	mov	r3, r1
 800245e:	4614      	mov	r4, r2
 8002460:	4618      	mov	r0, r3
 8002462:	4621      	mov	r1, r4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f04f 0400 	mov.w	r4, #0
 800246a:	461a      	mov	r2, r3
 800246c:	4623      	mov	r3, r4
 800246e:	f7fd feb7 	bl	80001e0 <__aeabi_uldivmod>
 8002472:	4603      	mov	r3, r0
 8002474:	460c      	mov	r4, r1
 8002476:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	3301      	adds	r3, #1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	60bb      	str	r3, [r7, #8]
      break;
 8002492:	e002      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002496:	60bb      	str	r3, [r7, #8]
      break;
 8002498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249a:	68bb      	ldr	r3, [r7, #8]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	007a1200 	.word	0x007a1200

080024b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000000 	.word	0x20000000

080024c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024cc:	f7ff fff0 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024d0:	4601      	mov	r1, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4a03      	ldr	r2, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08006544 	.word	0x08006544

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f4:	f7ff ffdc 	bl	80024b0 <HAL_RCC_GetHCLKFreq>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0b5b      	lsrs	r3, r3, #13
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	08006544 	.word	0x08006544

08002518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	220f      	movs	r2, #15
 8002526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCC_GetClockConfig+0x60>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01d      	b.n	80025ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fca0 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 f95e 	bl	800287c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d007      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d122      	bne.n	8002676 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d11b      	bne.n	8002676 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0202 	mvn.w	r2, #2
 8002646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8ee 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 8002662:	e005      	b.n	8002670 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8e0 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8f1 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d122      	bne.n	80026ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d11b      	bne.n	80026ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0204 	mvn.w	r2, #4
 800269a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f8c4 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 80026b6:	e005      	b.n	80026c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8b6 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8c7 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d122      	bne.n	800271e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11b      	bne.n	800271e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0208 	mvn.w	r2, #8
 80026ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2204      	movs	r2, #4
 80026f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f89a 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 800270a:	e005      	b.n	8002718 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f88c 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f89d 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b10      	cmp	r3, #16
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0210 	mvn.w	r2, #16
 8002742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2208      	movs	r2, #8
 8002748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f870 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f862 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f873 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10e      	bne.n	800279e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0201 	mvn.w	r2, #1
 8002796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fe fa83 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d10e      	bne.n	80027ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f97f 	bl	8002ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d10e      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d107      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f838 	bl	8002866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d10e      	bne.n	8002822 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	d107      	bne.n	8002822 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0220 	mvn.w	r2, #32
 800281a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f949 	bl	8002ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a40      	ldr	r2, [pc, #256]	; (8002990 <TIM_Base_SetConfig+0x114>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <TIM_Base_SetConfig+0x40>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289a:	d00f      	beq.n	80028bc <TIM_Base_SetConfig+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <TIM_Base_SetConfig+0x118>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00b      	beq.n	80028bc <TIM_Base_SetConfig+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3c      	ldr	r2, [pc, #240]	; (8002998 <TIM_Base_SetConfig+0x11c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3b      	ldr	r2, [pc, #236]	; (800299c <TIM_Base_SetConfig+0x120>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3a      	ldr	r2, [pc, #232]	; (80029a0 <TIM_Base_SetConfig+0x124>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d108      	bne.n	80028ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <TIM_Base_SetConfig+0x114>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02b      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d027      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <TIM_Base_SetConfig+0x118>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d023      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <TIM_Base_SetConfig+0x11c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01f      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2a      	ldr	r2, [pc, #168]	; (800299c <TIM_Base_SetConfig+0x120>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01b      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <TIM_Base_SetConfig+0x124>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d017      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <TIM_Base_SetConfig+0x128>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <TIM_Base_SetConfig+0x12c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00f      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a26      	ldr	r2, [pc, #152]	; (80029ac <TIM_Base_SetConfig+0x130>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00b      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <TIM_Base_SetConfig+0x134>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <TIM_Base_SetConfig+0x138>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <TIM_Base_SetConfig+0x13c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <TIM_Base_SetConfig+0x114>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0xf8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <TIM_Base_SetConfig+0x124>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	615a      	str	r2, [r3, #20]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800
 800299c:	40000c00 	.word	0x40000c00
 80029a0:	40010400 	.word	0x40010400
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800
 80029b0:	40001800 	.word	0x40001800
 80029b4:	40001c00 	.word	0x40001c00
 80029b8:	40002000 	.word	0x40002000

080029bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e05a      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d01d      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a17      	ldr	r2, [pc, #92]	; (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40010400 	.word	0x40010400
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40001800 	.word	0x40001800

08002ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e03f      	b.n	8002b6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fa42 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f90b 	bl	8002d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b088      	sub	sp, #32
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	f040 8083 	bne.w	8002c9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_UART_Transmit+0x2e>
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e07b      	b.n	8002ca0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Transmit+0x40>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e074      	b.n	8002ca0 <HAL_UART_Transmit+0x12a>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2221      	movs	r2, #33	; 0x21
 8002bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fab8 	bl	8001140 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002be6:	e042      	b.n	8002c6e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d122      	bne.n	8002c46 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f84c 	bl	8002ca8 <UART_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e042      	b.n	8002ca0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	e017      	b.n	8002c6e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	e013      	b.n	8002c6e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f829 	bl	8002ca8 <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e01f      	b.n	8002ca0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	60ba      	str	r2, [r7, #8]
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1b7      	bne.n	8002be8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f810 	bl	8002ca8 <UART_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e006      	b.n	8002ca0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb8:	e02c      	b.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d028      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cc8:	f7fe fa3a 	bl	8001140 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d21d      	bcs.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ce6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e00f      	b.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d0c3      	beq.n	8002cba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d7e:	f023 030c 	bic.w	r3, r3, #12
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002daa:	f040 818b 	bne.w	80030c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4ac1      	ldr	r2, [pc, #772]	; (80030b8 <UART_SetConfig+0x37c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d005      	beq.n	8002dc4 <UART_SetConfig+0x88>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4abf      	ldr	r2, [pc, #764]	; (80030bc <UART_SetConfig+0x380>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	f040 80bd 	bne.w	8002f3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff fb94 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8002dc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	461d      	mov	r5, r3
 8002dce:	f04f 0600 	mov.w	r6, #0
 8002dd2:	46a8      	mov	r8, r5
 8002dd4:	46b1      	mov	r9, r6
 8002dd6:	eb18 0308 	adds.w	r3, r8, r8
 8002dda:	eb49 0409 	adc.w	r4, r9, r9
 8002dde:	4698      	mov	r8, r3
 8002de0:	46a1      	mov	r9, r4
 8002de2:	eb18 0805 	adds.w	r8, r8, r5
 8002de6:	eb49 0906 	adc.w	r9, r9, r6
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002df6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002dfe:	4688      	mov	r8, r1
 8002e00:	4691      	mov	r9, r2
 8002e02:	eb18 0005 	adds.w	r0, r8, r5
 8002e06:	eb49 0106 	adc.w	r1, r9, r6
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	461d      	mov	r5, r3
 8002e10:	f04f 0600 	mov.w	r6, #0
 8002e14:	196b      	adds	r3, r5, r5
 8002e16:	eb46 0406 	adc.w	r4, r6, r6
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	f7fd f9df 	bl	80001e0 <__aeabi_uldivmod>
 8002e22:	4603      	mov	r3, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	461a      	mov	r2, r3
 8002e28:	4ba5      	ldr	r3, [pc, #660]	; (80030c0 <UART_SetConfig+0x384>)
 8002e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	461d      	mov	r5, r3
 8002e38:	f04f 0600 	mov.w	r6, #0
 8002e3c:	46a9      	mov	r9, r5
 8002e3e:	46b2      	mov	sl, r6
 8002e40:	eb19 0309 	adds.w	r3, r9, r9
 8002e44:	eb4a 040a 	adc.w	r4, sl, sl
 8002e48:	4699      	mov	r9, r3
 8002e4a:	46a2      	mov	sl, r4
 8002e4c:	eb19 0905 	adds.w	r9, r9, r5
 8002e50:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e68:	4689      	mov	r9, r1
 8002e6a:	4692      	mov	sl, r2
 8002e6c:	eb19 0005 	adds.w	r0, r9, r5
 8002e70:	eb4a 0106 	adc.w	r1, sl, r6
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	461d      	mov	r5, r3
 8002e7a:	f04f 0600 	mov.w	r6, #0
 8002e7e:	196b      	adds	r3, r5, r5
 8002e80:	eb46 0406 	adc.w	r4, r6, r6
 8002e84:	461a      	mov	r2, r3
 8002e86:	4623      	mov	r3, r4
 8002e88:	f7fd f9aa 	bl	80001e0 <__aeabi_uldivmod>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <UART_SetConfig+0x384>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	2164      	movs	r1, #100	; 0x64
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3332      	adds	r3, #50	; 0x32
 8002ea6:	4a86      	ldr	r2, [pc, #536]	; (80030c0 <UART_SetConfig+0x384>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eb4:	4498      	add	r8, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	461d      	mov	r5, r3
 8002eba:	f04f 0600 	mov.w	r6, #0
 8002ebe:	46a9      	mov	r9, r5
 8002ec0:	46b2      	mov	sl, r6
 8002ec2:	eb19 0309 	adds.w	r3, r9, r9
 8002ec6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eca:	4699      	mov	r9, r3
 8002ecc:	46a2      	mov	sl, r4
 8002ece:	eb19 0905 	adds.w	r9, r9, r5
 8002ed2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eea:	4689      	mov	r9, r1
 8002eec:	4692      	mov	sl, r2
 8002eee:	eb19 0005 	adds.w	r0, r9, r5
 8002ef2:	eb4a 0106 	adc.w	r1, sl, r6
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	461d      	mov	r5, r3
 8002efc:	f04f 0600 	mov.w	r6, #0
 8002f00:	196b      	adds	r3, r5, r5
 8002f02:	eb46 0406 	adc.w	r4, r6, r6
 8002f06:	461a      	mov	r2, r3
 8002f08:	4623      	mov	r3, r4
 8002f0a:	f7fd f969 	bl	80001e0 <__aeabi_uldivmod>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <UART_SetConfig+0x384>)
 8002f16:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2164      	movs	r1, #100	; 0x64
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	3332      	adds	r3, #50	; 0x32
 8002f28:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <UART_SetConfig+0x384>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	f003 0207 	and.w	r2, r3, #7
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4442      	add	r2, r8
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	e26f      	b.n	800341e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f3e:	f7ff fac3 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8002f42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	461d      	mov	r5, r3
 8002f48:	f04f 0600 	mov.w	r6, #0
 8002f4c:	46a8      	mov	r8, r5
 8002f4e:	46b1      	mov	r9, r6
 8002f50:	eb18 0308 	adds.w	r3, r8, r8
 8002f54:	eb49 0409 	adc.w	r4, r9, r9
 8002f58:	4698      	mov	r8, r3
 8002f5a:	46a1      	mov	r9, r4
 8002f5c:	eb18 0805 	adds.w	r8, r8, r5
 8002f60:	eb49 0906 	adc.w	r9, r9, r6
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f78:	4688      	mov	r8, r1
 8002f7a:	4691      	mov	r9, r2
 8002f7c:	eb18 0005 	adds.w	r0, r8, r5
 8002f80:	eb49 0106 	adc.w	r1, r9, r6
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	461d      	mov	r5, r3
 8002f8a:	f04f 0600 	mov.w	r6, #0
 8002f8e:	196b      	adds	r3, r5, r5
 8002f90:	eb46 0406 	adc.w	r4, r6, r6
 8002f94:	461a      	mov	r2, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	f7fd f922 	bl	80001e0 <__aeabi_uldivmod>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <UART_SetConfig+0x384>)
 8002fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	f04f 0600 	mov.w	r6, #0
 8002fb6:	46a9      	mov	r9, r5
 8002fb8:	46b2      	mov	sl, r6
 8002fba:	eb19 0309 	adds.w	r3, r9, r9
 8002fbe:	eb4a 040a 	adc.w	r4, sl, sl
 8002fc2:	4699      	mov	r9, r3
 8002fc4:	46a2      	mov	sl, r4
 8002fc6:	eb19 0905 	adds.w	r9, r9, r5
 8002fca:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fe2:	4689      	mov	r9, r1
 8002fe4:	4692      	mov	sl, r2
 8002fe6:	eb19 0005 	adds.w	r0, r9, r5
 8002fea:	eb4a 0106 	adc.w	r1, sl, r6
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	f04f 0600 	mov.w	r6, #0
 8002ff8:	196b      	adds	r3, r5, r5
 8002ffa:	eb46 0406 	adc.w	r4, r6, r6
 8002ffe:	461a      	mov	r2, r3
 8003000:	4623      	mov	r3, r4
 8003002:	f7fd f8ed 	bl	80001e0 <__aeabi_uldivmod>
 8003006:	4603      	mov	r3, r0
 8003008:	460c      	mov	r4, r1
 800300a:	461a      	mov	r2, r3
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <UART_SetConfig+0x384>)
 800300e:	fba3 1302 	umull	r1, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2164      	movs	r1, #100	; 0x64
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <UART_SetConfig+0x384>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800302e:	4498      	add	r8, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	461d      	mov	r5, r3
 8003034:	f04f 0600 	mov.w	r6, #0
 8003038:	46a9      	mov	r9, r5
 800303a:	46b2      	mov	sl, r6
 800303c:	eb19 0309 	adds.w	r3, r9, r9
 8003040:	eb4a 040a 	adc.w	r4, sl, sl
 8003044:	4699      	mov	r9, r3
 8003046:	46a2      	mov	sl, r4
 8003048:	eb19 0905 	adds.w	r9, r9, r5
 800304c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800305c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003064:	4689      	mov	r9, r1
 8003066:	4692      	mov	sl, r2
 8003068:	eb19 0005 	adds.w	r0, r9, r5
 800306c:	eb4a 0106 	adc.w	r1, sl, r6
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	461d      	mov	r5, r3
 8003076:	f04f 0600 	mov.w	r6, #0
 800307a:	196b      	adds	r3, r5, r5
 800307c:	eb46 0406 	adc.w	r4, r6, r6
 8003080:	461a      	mov	r2, r3
 8003082:	4623      	mov	r3, r4
 8003084:	f7fd f8ac 	bl	80001e0 <__aeabi_uldivmod>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	461a      	mov	r2, r3
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <UART_SetConfig+0x384>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <UART_SetConfig+0x384>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	f003 0207 	and.w	r2, r3, #7
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4442      	add	r2, r8
 80030b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030b6:	e1b2      	b.n	800341e <UART_SetConfig+0x6e2>
 80030b8:	40011000 	.word	0x40011000
 80030bc:	40011400 	.word	0x40011400
 80030c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4ad7      	ldr	r2, [pc, #860]	; (8003428 <UART_SetConfig+0x6ec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d005      	beq.n	80030da <UART_SetConfig+0x39e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4ad6      	ldr	r2, [pc, #856]	; (800342c <UART_SetConfig+0x6f0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	f040 80d1 	bne.w	800327c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030da:	f7ff fa09 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 80030de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	469a      	mov	sl, r3
 80030e4:	f04f 0b00 	mov.w	fp, #0
 80030e8:	46d0      	mov	r8, sl
 80030ea:	46d9      	mov	r9, fp
 80030ec:	eb18 0308 	adds.w	r3, r8, r8
 80030f0:	eb49 0409 	adc.w	r4, r9, r9
 80030f4:	4698      	mov	r8, r3
 80030f6:	46a1      	mov	r9, r4
 80030f8:	eb18 080a 	adds.w	r8, r8, sl
 80030fc:	eb49 090b 	adc.w	r9, r9, fp
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800310c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003110:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003114:	4688      	mov	r8, r1
 8003116:	4691      	mov	r9, r2
 8003118:	eb1a 0508 	adds.w	r5, sl, r8
 800311c:	eb4b 0609 	adc.w	r6, fp, r9
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f04f 0400 	mov.w	r4, #0
 8003132:	0094      	lsls	r4, r2, #2
 8003134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003138:	008b      	lsls	r3, r1, #2
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	4628      	mov	r0, r5
 8003140:	4631      	mov	r1, r6
 8003142:	f7fd f84d 	bl	80001e0 <__aeabi_uldivmod>
 8003146:	4603      	mov	r3, r0
 8003148:	460c      	mov	r4, r1
 800314a:	461a      	mov	r2, r3
 800314c:	4bb8      	ldr	r3, [pc, #736]	; (8003430 <UART_SetConfig+0x6f4>)
 800314e:	fba3 2302 	umull	r2, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	469b      	mov	fp, r3
 800315c:	f04f 0c00 	mov.w	ip, #0
 8003160:	46d9      	mov	r9, fp
 8003162:	46e2      	mov	sl, ip
 8003164:	eb19 0309 	adds.w	r3, r9, r9
 8003168:	eb4a 040a 	adc.w	r4, sl, sl
 800316c:	4699      	mov	r9, r3
 800316e:	46a2      	mov	sl, r4
 8003170:	eb19 090b 	adds.w	r9, r9, fp
 8003174:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003184:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003188:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800318c:	4689      	mov	r9, r1
 800318e:	4692      	mov	sl, r2
 8003190:	eb1b 0509 	adds.w	r5, fp, r9
 8003194:	eb4c 060a 	adc.w	r6, ip, sl
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4619      	mov	r1, r3
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	f04f 0400 	mov.w	r4, #0
 80031aa:	0094      	lsls	r4, r2, #2
 80031ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031b0:	008b      	lsls	r3, r1, #2
 80031b2:	461a      	mov	r2, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	4631      	mov	r1, r6
 80031ba:	f7fd f811 	bl	80001e0 <__aeabi_uldivmod>
 80031be:	4603      	mov	r3, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b9a      	ldr	r3, [pc, #616]	; (8003430 <UART_SetConfig+0x6f4>)
 80031c6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2164      	movs	r1, #100	; 0x64
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	3332      	adds	r3, #50	; 0x32
 80031d8:	4a95      	ldr	r2, [pc, #596]	; (8003430 <UART_SetConfig+0x6f4>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e4:	4498      	add	r8, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	469b      	mov	fp, r3
 80031ea:	f04f 0c00 	mov.w	ip, #0
 80031ee:	46d9      	mov	r9, fp
 80031f0:	46e2      	mov	sl, ip
 80031f2:	eb19 0309 	adds.w	r3, r9, r9
 80031f6:	eb4a 040a 	adc.w	r4, sl, sl
 80031fa:	4699      	mov	r9, r3
 80031fc:	46a2      	mov	sl, r4
 80031fe:	eb19 090b 	adds.w	r9, r9, fp
 8003202:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003212:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003216:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800321a:	4689      	mov	r9, r1
 800321c:	4692      	mov	sl, r2
 800321e:	eb1b 0509 	adds.w	r5, fp, r9
 8003222:	eb4c 060a 	adc.w	r6, ip, sl
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4619      	mov	r1, r3
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	f04f 0400 	mov.w	r4, #0
 8003238:	0094      	lsls	r4, r2, #2
 800323a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800323e:	008b      	lsls	r3, r1, #2
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	4628      	mov	r0, r5
 8003246:	4631      	mov	r1, r6
 8003248:	f7fc ffca 	bl	80001e0 <__aeabi_uldivmod>
 800324c:	4603      	mov	r3, r0
 800324e:	460c      	mov	r4, r1
 8003250:	461a      	mov	r2, r3
 8003252:	4b77      	ldr	r3, [pc, #476]	; (8003430 <UART_SetConfig+0x6f4>)
 8003254:	fba3 1302 	umull	r1, r3, r3, r2
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	2164      	movs	r1, #100	; 0x64
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	3332      	adds	r3, #50	; 0x32
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <UART_SetConfig+0x6f4>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4442      	add	r2, r8
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	e0d0      	b.n	800341e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7ff f924 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8003280:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	469a      	mov	sl, r3
 8003286:	f04f 0b00 	mov.w	fp, #0
 800328a:	46d0      	mov	r8, sl
 800328c:	46d9      	mov	r9, fp
 800328e:	eb18 0308 	adds.w	r3, r8, r8
 8003292:	eb49 0409 	adc.w	r4, r9, r9
 8003296:	4698      	mov	r8, r3
 8003298:	46a1      	mov	r9, r4
 800329a:	eb18 080a 	adds.w	r8, r8, sl
 800329e:	eb49 090b 	adc.w	r9, r9, fp
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032b6:	4688      	mov	r8, r1
 80032b8:	4691      	mov	r9, r2
 80032ba:	eb1a 0508 	adds.w	r5, sl, r8
 80032be:	eb4b 0609 	adc.w	r6, fp, r9
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4619      	mov	r1, r3
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	f04f 0400 	mov.w	r4, #0
 80032d4:	0094      	lsls	r4, r2, #2
 80032d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032da:	008b      	lsls	r3, r1, #2
 80032dc:	461a      	mov	r2, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	4631      	mov	r1, r6
 80032e4:	f7fc ff7c 	bl	80001e0 <__aeabi_uldivmod>
 80032e8:	4603      	mov	r3, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b50      	ldr	r3, [pc, #320]	; (8003430 <UART_SetConfig+0x6f4>)
 80032f0:	fba3 2302 	umull	r2, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	469b      	mov	fp, r3
 80032fe:	f04f 0c00 	mov.w	ip, #0
 8003302:	46d9      	mov	r9, fp
 8003304:	46e2      	mov	sl, ip
 8003306:	eb19 0309 	adds.w	r3, r9, r9
 800330a:	eb4a 040a 	adc.w	r4, sl, sl
 800330e:	4699      	mov	r9, r3
 8003310:	46a2      	mov	sl, r4
 8003312:	eb19 090b 	adds.w	r9, r9, fp
 8003316:	eb4a 0a0c 	adc.w	sl, sl, ip
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800332a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800332e:	4689      	mov	r9, r1
 8003330:	4692      	mov	sl, r2
 8003332:	eb1b 0509 	adds.w	r5, fp, r9
 8003336:	eb4c 060a 	adc.w	r6, ip, sl
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4619      	mov	r1, r3
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	0094      	lsls	r4, r2, #2
 800334e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003352:	008b      	lsls	r3, r1, #2
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	4628      	mov	r0, r5
 800335a:	4631      	mov	r1, r6
 800335c:	f7fc ff40 	bl	80001e0 <__aeabi_uldivmod>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	461a      	mov	r2, r3
 8003366:	4b32      	ldr	r3, [pc, #200]	; (8003430 <UART_SetConfig+0x6f4>)
 8003368:	fba3 1302 	umull	r1, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	2164      	movs	r1, #100	; 0x64
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	3332      	adds	r3, #50	; 0x32
 800337a:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <UART_SetConfig+0x6f4>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003386:	4498      	add	r8, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	469b      	mov	fp, r3
 800338c:	f04f 0c00 	mov.w	ip, #0
 8003390:	46d9      	mov	r9, fp
 8003392:	46e2      	mov	sl, ip
 8003394:	eb19 0309 	adds.w	r3, r9, r9
 8003398:	eb4a 040a 	adc.w	r4, sl, sl
 800339c:	4699      	mov	r9, r3
 800339e:	46a2      	mov	sl, r4
 80033a0:	eb19 090b 	adds.w	r9, r9, fp
 80033a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033bc:	4689      	mov	r9, r1
 80033be:	4692      	mov	sl, r2
 80033c0:	eb1b 0509 	adds.w	r5, fp, r9
 80033c4:	eb4c 060a 	adc.w	r6, ip, sl
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0094      	lsls	r4, r2, #2
 80033dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033e0:	008b      	lsls	r3, r1, #2
 80033e2:	461a      	mov	r2, r3
 80033e4:	4623      	mov	r3, r4
 80033e6:	4628      	mov	r0, r5
 80033e8:	4631      	mov	r1, r6
 80033ea:	f7fc fef9 	bl	80001e0 <__aeabi_uldivmod>
 80033ee:	4603      	mov	r3, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <UART_SetConfig+0x6f4>)
 80033f6:	fba3 1302 	umull	r1, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2164      	movs	r1, #100	; 0x64
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	3332      	adds	r3, #50	; 0x32
 8003408:	4a09      	ldr	r2, [pc, #36]	; (8003430 <UART_SetConfig+0x6f4>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4442      	add	r2, r8
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	e7ff      	b.n	800341e <UART_SetConfig+0x6e2>
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003428:	40011000 	.word	0x40011000
 800342c:	40011400 	.word	0x40011400
 8003430:	51eb851f 	.word	0x51eb851f

08003434 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003446:	2b84      	cmp	r3, #132	; 0x84
 8003448:	d005      	beq.n	8003456 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800344a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	3303      	adds	r3, #3
 8003454:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003468:	f001 f93c 	bl	80046e4 <vTaskStartScheduler>
  
  return osOK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	bd80      	pop	{r7, pc}

08003472 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003474:	b089      	sub	sp, #36	; 0x24
 8003476:	af04      	add	r7, sp, #16
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <osThreadCreate+0x54>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01c      	beq.n	80034c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685c      	ldr	r4, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681d      	ldr	r5, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691e      	ldr	r6, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ffc8 	bl	8003434 <makeFreeRtosPriority>
 80034a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	9100      	str	r1, [sp, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4632      	mov	r2, r6
 80034b8:	4629      	mov	r1, r5
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 ff4e 	bl	800435c <xTaskCreateStatic>
 80034c0:	4603      	mov	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e01c      	b.n	8003500 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685c      	ldr	r4, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d2:	b29e      	uxth	r6, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ffaa 	bl	8003434 <makeFreeRtosPriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	4632      	mov	r2, r6
 80034ee:	4629      	mov	r1, r5
 80034f0:	4620      	mov	r0, r4
 80034f2:	f000 ff8d 	bl	8004410 <xTaskCreate>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003500:	68fb      	ldr	r3, [r7, #12]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800350a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <osDelay+0x16>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	e000      	b.n	8003522 <osDelay+0x18>
 8003520:	2301      	movs	r3, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f8aa 	bl	800467c <vTaskDelay>
  
  return osOK;
 8003528:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003538:	201c      	movs	r0, #28
 800353a:	f002 fc49 	bl	8005dd0 <pvPortMalloc>
 800353e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f97e 	bl	8003852 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800355c:	687b      	ldr	r3, [r7, #4]
	}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b090      	sub	sp, #64	; 0x40
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	e7fe      	b.n	800359a <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <xEventGroupWaitBits+0x52>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e7fe      	b.n	80035b8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <xEventGroupWaitBits+0x6c>
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e7fe      	b.n	80035d2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035d4:	f001 fd54 	bl	8005080 <xTaskGetSchedulerState>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <xEventGroupWaitBits+0x7c>
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <xEventGroupWaitBits+0x80>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <xEventGroupWaitBits+0x82>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <xEventGroupWaitBits+0x9a>
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e7fe      	b.n	8003600 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8003602:	f001 f8d3 	bl	80047ac <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003612:	f000 f8fc 	bl	800380e <prvTestWaitCondition>
 8003616:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003622:	2300      	movs	r3, #0
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d028      	beq.n	800367e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	43db      	mvns	r3, r3
 8003634:	401a      	ands	r2, r3
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e020      	b.n	800367e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800363c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
 800364a:	e018      	b.n	800367e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366a:	1d18      	adds	r0, r3, #4
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	4313      	orrs	r3, r2
 8003672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003674:	4619      	mov	r1, r3
 8003676:	f001 fa89 	bl	8004b8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800367e:	f001 f8a3 	bl	80047c8 <xTaskResumeAll>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003686:	2b00      	cmp	r3, #0
 8003688:	d031      	beq.n	80036ee <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <xEventGroupWaitBits+0x190>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80036a0:	f001 fd90 	bl	80051c4 <uxTaskResetEventItemValue>
 80036a4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11a      	bne.n	80036e6 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80036b0:	f002 fa74 	bl	8005b9c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036c0:	f000 f8a5 	bl	800380e <prvTestWaitCondition>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	401a      	ands	r2, r3
 80036da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036dc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80036e2:	f002 fa89 	bl	8005bf8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80036ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3740      	adds	r7, #64	; 0x40
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	; 0x38
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003706:	2300      	movs	r3, #0
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <xEventGroupSetBits+0x30>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	e7fe      	b.n	800372a <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <xEventGroupSetBits+0x4e>
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e7fe      	b.n	8003748 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	3304      	adds	r3, #4
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	3308      	adds	r3, #8
 8003754:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003756:	f001 f829 	bl	80047ac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	431a      	orrs	r2, r3
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800376c:	e03c      	b.n	80037e8 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003784:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800378c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d108      	bne.n	80037aa <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a8:	e008      	b.n	80037bc <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d101      	bne.n	80037bc <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037dc:	4619      	mov	r1, r3
 80037de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037e0:	f001 fa9a 	bl	8004d18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80037e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1be      	bne.n	800376e <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	43db      	mvns	r3, r3
 80037f8:	401a      	ands	r2, r3
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80037fe:	f000 ffe3 	bl	80047c8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	681b      	ldr	r3, [r3, #0]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3738      	adds	r7, #56	; 0x38
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800382e:	2301      	movs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e007      	b.n	8003844 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d101      	bne.n	8003844 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003844:	697b      	ldr	r3, [r7, #20]
}
 8003846:	4618      	mov	r0, r3
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f103 0208 	add.w	r2, r3, #8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f04f 32ff 	mov.w	r2, #4294967295
 800386a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 0208 	add.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f103 0208 	add.w	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	601a      	str	r2, [r3, #0]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d103      	bne.n	8003914 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e00c      	b.n	800392e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3308      	adds	r3, #8
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e002      	b.n	8003922 <vListInsert+0x2e>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d2f6      	bcs.n	800391c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6892      	ldr	r2, [r2, #8]
 800397c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6852      	ldr	r2, [r2, #4]
 8003986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d103      	bne.n	800399a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <xQueueGenericReset+0x28>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	e7fe      	b.n	80039e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80039e4:	f002 f8da 	bl	8005b9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	68f9      	ldr	r1, [r7, #12]
 80039f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	441a      	add	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	3b01      	subs	r3, #1
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	441a      	add	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	22ff      	movs	r2, #255	; 0xff
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d114      	bne.n	8003a64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01a      	beq.n	8003a78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3310      	adds	r3, #16
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 f904 	bl	8004c54 <xTaskRemoveFromEventList>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <xQueueGenericReset+0xcc>)
 8003a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	e009      	b.n	8003a78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3310      	adds	r3, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fef2 	bl	8003852 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3324      	adds	r3, #36	; 0x24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff feed 	bl	8003852 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a78:	f002 f8be 	bl	8005bf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a7c:	2301      	movs	r3, #1
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	; 0x38
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <xQueueGenericCreateStatic+0x28>
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab2:	e7fe      	b.n	8003ab2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <xQueueGenericCreateStatic+0x42>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	e7fe      	b.n	8003acc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <xQueueGenericCreateStatic+0x4e>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <xQueueGenericCreateStatic+0x52>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <xQueueGenericCreateStatic+0x54>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <xQueueGenericCreateStatic+0x6c>
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	e7fe      	b.n	8003af6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <xQueueGenericCreateStatic+0x78>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <xQueueGenericCreateStatic+0x7c>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <xQueueGenericCreateStatic+0x7e>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <xQueueGenericCreateStatic+0x96>
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b22:	2348      	movs	r3, #72	; 0x48
 8003b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b48      	cmp	r3, #72	; 0x48
 8003b2a:	d009      	beq.n	8003b40 <xQueueGenericCreateStatic+0xb4>
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e7fe      	b.n	8003b3e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f805 	bl	8003b72 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3730      	adds	r7, #48	; 0x30
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e002      	b.n	8003b94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f7ff ff0a 	bl	80039bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <xQueueGenericSend+0x30>
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bde:	e7fe      	b.n	8003bde <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <xQueueGenericSend+0x3e>
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <xQueueGenericSend+0x42>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <xQueueGenericSend+0x44>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <xQueueGenericSend+0x5c>
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	e7fe      	b.n	8003c0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d103      	bne.n	8003c1a <xQueueGenericSend+0x6a>
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <xQueueGenericSend+0x6e>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueGenericSend+0x70>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <xQueueGenericSend+0x88>
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	e7fe      	b.n	8003c36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c38:	f001 fa22 	bl	8005080 <xTaskGetSchedulerState>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <xQueueGenericSend+0x98>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <xQueueGenericSend+0x9c>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <xQueueGenericSend+0x9e>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <xQueueGenericSend+0xb6>
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e7fe      	b.n	8003c64 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c66:	f001 ff99 	bl	8005b9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <xQueueGenericSend+0xcc>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d129      	bne.n	8003cd0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c82:	f000 f9ff 	bl	8004084 <prvCopyDataToQueue>
 8003c86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 ffdd 	bl	8004c54 <xTaskRemoveFromEventList>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <xQueueGenericSend+0x1f0>)
 8003ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	e00a      	b.n	8003cc8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <xQueueGenericSend+0x1f0>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cc8:	f001 ff96 	bl	8005bf8 <vPortExitCritical>
				return pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e063      	b.n	8003d98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cd6:	f001 ff8f 	bl	8005bf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e05c      	b.n	8003d98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f875 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cf2:	f001 ff81 	bl	8005bf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cf6:	f000 fd59 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cfa:	f001 ff4f 	bl	8005b9c <vPortEnterCritical>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d103      	bne.n	8003d14 <xQueueGenericSend+0x164>
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d103      	bne.n	8003d2a <xQueueGenericSend+0x17a>
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d2a:	f001 ff65 	bl	8005bf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d2e:	1d3a      	adds	r2, r7, #4
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f864 	bl	8004e04 <xTaskCheckForTimeOut>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d124      	bne.n	8003d8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d44:	f000 fa96 	bl	8004274 <prvIsQueueFull>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d018      	beq.n	8003d80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	3310      	adds	r3, #16
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fef4 	bl	8004b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d5e:	f000 fa21 	bl	80041a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d62:	f000 fd31 	bl	80047c8 <xTaskResumeAll>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f47f af7c 	bne.w	8003c66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <xQueueGenericSend+0x1f0>)
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	e772      	b.n	8003c66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d82:	f000 fa0f 	bl	80041a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d86:	f000 fd1f 	bl	80047c8 <xTaskResumeAll>
 8003d8a:	e76c      	b.n	8003c66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d8e:	f000 fa09 	bl	80041a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d92:	f000 fd19 	bl	80047c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3738      	adds	r7, #56	; 0x38
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08e      	sub	sp, #56	; 0x38
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <xQueueGenericSendFromISR+0x2c>
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dce:	e7fe      	b.n	8003dce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <xQueueGenericSendFromISR+0x3a>
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <xQueueGenericSendFromISR+0x3e>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <xQueueGenericSendFromISR+0x40>
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <xQueueGenericSendFromISR+0x58>
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	e7fe      	b.n	8003dfa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d103      	bne.n	8003e0a <xQueueGenericSendFromISR+0x66>
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <xQueueGenericSendFromISR+0x6a>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueGenericSendFromISR+0x6c>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <xQueueGenericSendFromISR+0x84>
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e7fe      	b.n	8003e26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e28:	f001 ff94 	bl	8005d54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e2c:	f3ef 8211 	mrs	r2, BASEPRI
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	61ba      	str	r2, [r7, #24]
 8003e42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <xQueueGenericSendFromISR+0xb6>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d12c      	bne.n	8003eb4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6a:	f000 f90b 	bl	8004084 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d112      	bne.n	8003e9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d016      	beq.n	8003eae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	3324      	adds	r3, #36	; 0x24
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fee5 	bl	8004c54 <xTaskRemoveFromEventList>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00e      	beq.n	8003eae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e007      	b.n	8003eae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	b25a      	sxtb	r2, r3
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003eb2:	e001      	b.n	8003eb8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3738      	adds	r7, #56	; 0x38
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <xQueueReceive+0x2e>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <xQueueReceive+0x3c>
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <xQueueReceive+0x40>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <xQueueReceive+0x42>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <xQueueReceive+0x5a>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e7fe      	b.n	8003f24 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f26:	f001 f8ab 	bl	8005080 <xTaskGetSchedulerState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xQueueReceive+0x6a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <xQueueReceive+0x6e>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueReceive+0x70>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <xQueueReceive+0x88>
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e7fe      	b.n	8003f52 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f54:	f001 fe22 	bl	8005b9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01f      	beq.n	8003fa4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f68:	f000 f8f6 	bl	8004158 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00f      	beq.n	8003f9c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	3310      	adds	r3, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fe67 	bl	8004c54 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f8c:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <xQueueReceive+0x1b4>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f9c:	f001 fe2c 	bl	8005bf8 <vPortExitCritical>
				return pdPASS;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e069      	b.n	8004078 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003faa:	f001 fe25 	bl	8005bf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e062      	b.n	8004078 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 ff0b 	bl	8004dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fc6:	f001 fe17 	bl	8005bf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fca:	f000 fbef 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fce:	f001 fde5 	bl	8005b9c <vPortEnterCritical>
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d103      	bne.n	8003fe8 <xQueueReceive+0x11c>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d103      	bne.n	8003ffe <xQueueReceive+0x132>
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ffe:	f001 fdfb 	bl	8005bf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004002:	1d3a      	adds	r2, r7, #4
 8004004:	f107 0310 	add.w	r3, r7, #16
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fefa 	bl	8004e04 <xTaskCheckForTimeOut>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d123      	bne.n	800405e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004018:	f000 f916 	bl	8004248 <prvIsQueueEmpty>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d017      	beq.n	8004052 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	3324      	adds	r3, #36	; 0x24
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fd8a 	bl	8004b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004032:	f000 f8b7 	bl	80041a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004036:	f000 fbc7 	bl	80047c8 <xTaskResumeAll>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d189      	bne.n	8003f54 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <xQueueReceive+0x1b4>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	e780      	b.n	8003f54 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004054:	f000 f8a6 	bl	80041a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004058:	f000 fbb6 	bl	80047c8 <xTaskResumeAll>
 800405c:	e77a      	b.n	8003f54 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800405e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004060:	f000 f8a0 	bl	80041a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004064:	f000 fbb0 	bl	80047c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406a:	f000 f8ed 	bl	8004248 <prvIsQueueEmpty>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	f43f af6f 	beq.w	8003f54 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004076:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004078:	4618      	mov	r0, r3
 800407a:	3730      	adds	r7, #48	; 0x30
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d14d      	bne.n	8004146 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f804 	bl	80050bc <xTaskPriorityDisinherit>
 80040b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	e043      	b.n	8004146 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d119      	bne.n	80040f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6858      	ldr	r0, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	461a      	mov	r2, r3
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	f002 f878 	bl	80061c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	441a      	add	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d32b      	bcc.n	8004146 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	e026      	b.n	8004146 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68d8      	ldr	r0, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	461a      	mov	r2, r3
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	f002 f85e 	bl	80061c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	425b      	negs	r3, r3
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d207      	bcs.n	8004134 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	425b      	negs	r3, r3
 800412e:	441a      	add	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d105      	bne.n	8004146 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3b01      	subs	r3, #1
 8004144:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800414e:	697b      	ldr	r3, [r7, #20]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d018      	beq.n	800419c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	441a      	add	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d303      	bcc.n	800418c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68d9      	ldr	r1, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	461a      	mov	r2, r3
 8004196:	6838      	ldr	r0, [r7, #0]
 8004198:	f002 f814 	bl	80061c4 <memcpy>
	}
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041ac:	f001 fcf6 	bl	8005b9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041b8:	e011      	b.n	80041de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d012      	beq.n	80041e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3324      	adds	r3, #36	; 0x24
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd44 	bl	8004c54 <xTaskRemoveFromEventList>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041d2:	f000 fe77 	bl	8004ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3b01      	subs	r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	dce9      	bgt.n	80041ba <prvUnlockQueue+0x16>
 80041e6:	e000      	b.n	80041ea <prvUnlockQueue+0x46>
					break;
 80041e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	22ff      	movs	r2, #255	; 0xff
 80041ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041f2:	f001 fd01 	bl	8005bf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041f6:	f001 fcd1 	bl	8005b9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004200:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004202:	e011      	b.n	8004228 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3310      	adds	r3, #16
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fd1f 	bl	8004c54 <xTaskRemoveFromEventList>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800421c:	f000 fe52 	bl	8004ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004220:	7bbb      	ldrb	r3, [r7, #14]
 8004222:	3b01      	subs	r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800422c:	2b00      	cmp	r3, #0
 800422e:	dce9      	bgt.n	8004204 <prvUnlockQueue+0x60>
 8004230:	e000      	b.n	8004234 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004232:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	22ff      	movs	r2, #255	; 0xff
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800423c:	f001 fcdc 	bl	8005bf8 <vPortExitCritical>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004250:	f001 fca4 	bl	8005b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d102      	bne.n	8004262 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e001      	b.n	8004266 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004266:	f001 fcc7 	bl	8005bf8 <vPortExitCritical>

	return xReturn;
 800426a:	68fb      	ldr	r3, [r7, #12]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800427c:	f001 fc8e 	bl	8005b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	429a      	cmp	r2, r3
 800428a:	d102      	bne.n	8004292 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e001      	b.n	8004296 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004296:	f001 fcaf 	bl	8005bf8 <vPortExitCritical>

	return xReturn;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e014      	b.n	80042de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042b4:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <vQueueAddToRegistry+0x4c>)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042c0:	490b      	ldr	r1, [pc, #44]	; (80042f0 <vQueueAddToRegistry+0x4c>)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <vQueueAddToRegistry+0x4c>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042d6:	e005      	b.n	80042e4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d9e7      	bls.n	80042b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	2000468c 	.word	0x2000468c

080042f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004304:	f001 fc4a 	bl	8005b9c <vPortEnterCritical>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430e:	b25b      	sxtb	r3, r3
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d103      	bne.n	800431e <vQueueWaitForMessageRestricted+0x2a>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d103      	bne.n	8004334 <vQueueWaitForMessageRestricted+0x40>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004334:	f001 fc60 	bl	8005bf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fc59 	bl	8004c00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff28 	bl	80041a4 <prvUnlockQueue>
	}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af04      	add	r7, sp, #16
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <xTaskCreateStatic+0x28>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	e7fe      	b.n	8004382 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <xTaskCreateStatic+0x42>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e7fe      	b.n	800439c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800439e:	2354      	movs	r3, #84	; 0x54
 80043a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b54      	cmp	r3, #84	; 0x54
 80043a6:	d009      	beq.n	80043bc <xTaskCreateStatic+0x60>
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e7fe      	b.n	80043ba <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01e      	beq.n	8004402 <xTaskCreateStatic+0xa6>
 80043c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01b      	beq.n	8004402 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043dc:	2300      	movs	r3, #0
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	9302      	str	r3, [sp, #8]
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f850 	bl	800449a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043fc:	f000 f8d4 	bl	80045a8 <prvAddNewTaskToReadyList>
 8004400:	e001      	b.n	8004406 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004406:	697b      	ldr	r3, [r7, #20]
	}
 8004408:	4618      	mov	r0, r3
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08c      	sub	sp, #48	; 0x30
 8004414:	af04      	add	r7, sp, #16
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f001 fcd3 	bl	8005dd0 <pvPortMalloc>
 800442a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004432:	2054      	movs	r0, #84	; 0x54
 8004434:	f001 fccc 	bl	8005dd0 <pvPortMalloc>
 8004438:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
 8004446:	e005      	b.n	8004454 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f001 fd83 	bl	8005f54 <vPortFree>
 800444e:	e001      	b.n	8004454 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d017      	beq.n	800448a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	2300      	movs	r3, #0
 8004466:	9303      	str	r3, [sp, #12]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f80e 	bl	800449a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800447e:	69f8      	ldr	r0, [r7, #28]
 8004480:	f000 f892 	bl	80045a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e002      	b.n	8004490 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004490:	69bb      	ldr	r3, [r7, #24]
	}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b088      	sub	sp, #32
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044b2:	3b01      	subs	r3, #1
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <prvInitialiseNewTask+0x46>
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e7fe      	b.n	80044de <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01f      	beq.n	8004526 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e012      	b.n	8004512 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	7819      	ldrb	r1, [r3, #0]
 80044f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4413      	add	r3, r2
 80044fa:	3334      	adds	r3, #52	; 0x34
 80044fc:	460a      	mov	r2, r1
 80044fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3301      	adds	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d9e9      	bls.n	80044ec <prvInitialiseNewTask+0x52>
 8004518:	e000      	b.n	800451c <prvInitialiseNewTask+0x82>
			{
				break;
 800451a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004524:	e003      	b.n	800452e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	2b06      	cmp	r3, #6
 8004532:	d901      	bls.n	8004538 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004534:	2306      	movs	r3, #6
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	2200      	movs	r2, #0
 8004548:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff f99f 	bl	8003892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f99a 	bl	8003892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	f1c3 0207 	rsb	r2, r3, #7
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2200      	movs	r2, #0
 8004578:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	69b8      	ldr	r0, [r7, #24]
 8004588:	f001 f9e0 	bl	800594c <pxPortInitialiseStack>
 800458c:	4602      	mov	r2, r0
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800459e:	bf00      	nop
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045b0:	f001 faf4 	bl	8005b9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045b4:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <prvAddNewTaskToReadyList+0xb8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a29      	ldr	r2, [pc, #164]	; (8004660 <prvAddNewTaskToReadyList+0xb8>)
 80045bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045c6:	4a27      	ldr	r2, [pc, #156]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <prvAddNewTaskToReadyList+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d110      	bne.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045d4:	f000 fc9a 	bl	8004f0c <prvInitialiseTaskLists>
 80045d8:	e00d      	b.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045da:	4b23      	ldr	r3, [pc, #140]	; (8004668 <prvAddNewTaskToReadyList+0xc0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d802      	bhi.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <prvAddNewTaskToReadyList+0xc4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a1b      	ldr	r2, [pc, #108]	; (800466c <prvAddNewTaskToReadyList+0xc4>)
 80045fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <prvAddNewTaskToReadyList+0xc8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <prvAddNewTaskToReadyList+0xc8>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <prvAddNewTaskToReadyList+0xcc>)
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7ff f93f 	bl	80038ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800462e:	f001 fae3 	bl	8005bf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <prvAddNewTaskToReadyList+0xc0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d207      	bcs.n	8004658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvAddNewTaskToReadyList+0xd0>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200007dc 	.word	0x200007dc
 8004664:	200006dc 	.word	0x200006dc
 8004668:	200007e8 	.word	0x200007e8
 800466c:	200007f8 	.word	0x200007f8
 8004670:	200007e4 	.word	0x200007e4
 8004674:	200006e0 	.word	0x200006e0
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d016      	beq.n	80046bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <vTaskDelay+0x60>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <vTaskDelay+0x2e>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	e7fe      	b.n	80046a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80046aa:	f000 f87f 	bl	80047ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ae:	2100      	movs	r1, #0
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fd9f 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b6:	f000 f887 	bl	80047c8 <xTaskResumeAll>
 80046ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <vTaskDelay+0x64>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000804 	.word	0x20000804
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046f2:	463a      	mov	r2, r7
 80046f4:	1d39      	adds	r1, r7, #4
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc f93c 	bl	8000978 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	2300      	movs	r3, #0
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	460a      	mov	r2, r1
 8004712:	4920      	ldr	r1, [pc, #128]	; (8004794 <vTaskStartScheduler+0xb0>)
 8004714:	4820      	ldr	r0, [pc, #128]	; (8004798 <vTaskStartScheduler+0xb4>)
 8004716:	f7ff fe21 	bl	800435c <xTaskCreateStatic>
 800471a:	4602      	mov	r2, r0
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <vTaskStartScheduler+0xb8>)
 800471e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <vTaskStartScheduler+0xb8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e001      	b.n	8004732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004738:	f000 fdc2 	bl	80052c0 <xTimerCreateTimerTask>
 800473c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d115      	bne.n	8004770 <vTaskStartScheduler+0x8c>
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <vTaskStartScheduler+0xbc>)
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <vTaskStartScheduler+0xc0>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <vTaskStartScheduler+0xc4>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800476a:	f001 f979 	bl	8005a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800476e:	e00d      	b.n	800478c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d109      	bne.n	800478c <vTaskStartScheduler+0xa8>
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e7fe      	b.n	800478a <vTaskStartScheduler+0xa6>
}
 800478c:	bf00      	nop
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	0800651c 	.word	0x0800651c
 8004798:	08004edd 	.word	0x08004edd
 800479c:	20000800 	.word	0x20000800
 80047a0:	200007fc 	.word	0x200007fc
 80047a4:	200007e8 	.word	0x200007e8
 80047a8:	200007e0 	.word	0x200007e0

080047ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20000804 	.word	0x20000804

080047c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047d6:	4b41      	ldr	r3, [pc, #260]	; (80048dc <xTaskResumeAll+0x114>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <xTaskResumeAll+0x2a>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	e7fe      	b.n	80047f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047f2:	f001 f9d3 	bl	8005b9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047f6:	4b39      	ldr	r3, [pc, #228]	; (80048dc <xTaskResumeAll+0x114>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4a37      	ldr	r2, [pc, #220]	; (80048dc <xTaskResumeAll+0x114>)
 80047fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004800:	4b36      	ldr	r3, [pc, #216]	; (80048dc <xTaskResumeAll+0x114>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d161      	bne.n	80048cc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004808:	4b35      	ldr	r3, [pc, #212]	; (80048e0 <xTaskResumeAll+0x118>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05d      	beq.n	80048cc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004810:	e02e      	b.n	8004870 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004812:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <xTaskResumeAll+0x11c>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3318      	adds	r3, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f8a1 	bl	8003966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3304      	adds	r3, #4
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff f89c 	bl	8003966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	2201      	movs	r2, #1
 8004834:	409a      	lsls	r2, r3
 8004836:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <xTaskResumeAll+0x120>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <xTaskResumeAll+0x120>)
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4a27      	ldr	r2, [pc, #156]	; (80048ec <xTaskResumeAll+0x124>)
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7ff f828 	bl	80038ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <xTaskResumeAll+0x128>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <xTaskResumeAll+0x12c>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <xTaskResumeAll+0x11c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1cc      	bne.n	8004812 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800487e:	f000 fbdf 	bl	8005040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004882:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <xTaskResumeAll+0x130>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d010      	beq.n	80048b0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800488e:	f000 f847 	bl	8004920 <xTaskIncrementTick>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <xTaskResumeAll+0x12c>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f1      	bne.n	800488e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <xTaskResumeAll+0x130>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <xTaskResumeAll+0x12c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <xTaskResumeAll+0x134>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048cc:	f001 f994 	bl	8005bf8 <vPortExitCritical>

	return xAlreadyYielded;
 80048d0:	68bb      	ldr	r3, [r7, #8]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000804 	.word	0x20000804
 80048e0:	200007dc 	.word	0x200007dc
 80048e4:	2000079c 	.word	0x2000079c
 80048e8:	200007e4 	.word	0x200007e4
 80048ec:	200006e0 	.word	0x200006e0
 80048f0:	200006dc 	.word	0x200006dc
 80048f4:	200007f0 	.word	0x200007f0
 80048f8:	200007ec 	.word	0x200007ec
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <xTaskGetTickCount+0x1c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	200007e0 	.word	0x200007e0

08004920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492a:	4b4e      	ldr	r3, [pc, #312]	; (8004a64 <xTaskIncrementTick+0x144>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 8087 	bne.w	8004a42 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <xTaskIncrementTick+0x148>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800493c:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <xTaskIncrementTick+0x148>)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11f      	bne.n	8004988 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004948:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <xTaskIncrementTick+0x14c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <xTaskIncrementTick+0x46>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	e7fe      	b.n	8004964 <xTaskIncrementTick+0x44>
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <xTaskIncrementTick+0x14c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	4b40      	ldr	r3, [pc, #256]	; (8004a70 <xTaskIncrementTick+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3e      	ldr	r2, [pc, #248]	; (8004a6c <xTaskIncrementTick+0x14c>)
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4a3e      	ldr	r2, [pc, #248]	; (8004a70 <xTaskIncrementTick+0x150>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b3e      	ldr	r3, [pc, #248]	; (8004a74 <xTaskIncrementTick+0x154>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	4a3c      	ldr	r2, [pc, #240]	; (8004a74 <xTaskIncrementTick+0x154>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	f000 fb5c 	bl	8005040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <xTaskIncrementTick+0x158>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d348      	bcc.n	8004a24 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004992:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <xTaskIncrementTick+0x14c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499c:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <xTaskIncrementTick+0x158>)
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	601a      	str	r2, [r3, #0]
					break;
 80049a4:	e03e      	b.n	8004a24 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <xTaskIncrementTick+0x14c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d203      	bcs.n	80049c6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049be:	4a2e      	ldr	r2, [pc, #184]	; (8004a78 <xTaskIncrementTick+0x158>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049c4:	e02e      	b.n	8004a24 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe ffcb 	bl	8003966 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3318      	adds	r3, #24
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe ffc2 	bl	8003966 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	2201      	movs	r2, #1
 80049e8:	409a      	lsls	r2, r3
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <xTaskIncrementTick+0x15c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <xTaskIncrementTick+0x15c>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <xTaskIncrementTick+0x160>)
 8004a02:	441a      	add	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7fe ff4e 	bl	80038ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <xTaskIncrementTick+0x164>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3b9      	bcc.n	8004992 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a22:	e7b6      	b.n	8004992 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <xTaskIncrementTick+0x164>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2a:	4915      	ldr	r1, [pc, #84]	; (8004a80 <xTaskIncrementTick+0x160>)
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d907      	bls.n	8004a4c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e004      	b.n	8004a4c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <xTaskIncrementTick+0x168>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <xTaskIncrementTick+0x168>)
 8004a4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <xTaskIncrementTick+0x16c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a58:	697b      	ldr	r3, [r7, #20]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000804 	.word	0x20000804
 8004a68:	200007e0 	.word	0x200007e0
 8004a6c:	20000794 	.word	0x20000794
 8004a70:	20000798 	.word	0x20000798
 8004a74:	200007f4 	.word	0x200007f4
 8004a78:	200007fc 	.word	0x200007fc
 8004a7c:	200007e4 	.word	0x200007e4
 8004a80:	200006e0 	.word	0x200006e0
 8004a84:	200006dc 	.word	0x200006dc
 8004a88:	200007ec 	.word	0x200007ec
 8004a8c:	200007f0 	.word	0x200007f0

08004a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <vTaskSwitchContext+0xa0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a9e:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <vTaskSwitchContext+0xa4>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aa4:	e03e      	b.n	8004b24 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <vTaskSwitchContext+0xa4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <vTaskSwitchContext+0xa8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	fab3 f383 	clz	r3, r3
 8004ab8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	f1c3 031f 	rsb	r3, r3, #31
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	491e      	ldr	r1, [pc, #120]	; (8004b3c <vTaskSwitchContext+0xac>)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <vTaskSwitchContext+0x5a>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	e7fe      	b.n	8004ae8 <vTaskSwitchContext+0x58>
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <vTaskSwitchContext+0xac>)
 8004af6:	4413      	add	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d104      	bne.n	8004b1a <vTaskSwitchContext+0x8a>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <vTaskSwitchContext+0xb0>)
 8004b22:	6013      	str	r3, [r2, #0]
}
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000804 	.word	0x20000804
 8004b34:	200007f0 	.word	0x200007f0
 8004b38:	200007e4 	.word	0x200007e4
 8004b3c:	200006e0 	.word	0x200006e0
 8004b40:	200006dc 	.word	0x200006dc

08004b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <vTaskPlaceOnEventList+0x24>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e7fe      	b.n	8004b66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <vTaskPlaceOnEventList+0x44>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fe febf 	bl	80038f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b76:	2101      	movs	r1, #1
 8004b78:	6838      	ldr	r0, [r7, #0]
 8004b7a:	f000 fb3b 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	200006dc 	.word	0x200006dc

08004b8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <vTaskPlaceOnUnorderedEventList+0x26>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e7fe      	b.n	8004bb0 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <vTaskPlaceOnUnorderedEventList+0x42>
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e7fe      	b.n	8004bcc <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004bd8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3318      	adds	r3, #24
 8004be0:	4619      	mov	r1, r3
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7fe fe62 	bl	80038ac <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004be8:	2101      	movs	r1, #1
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb02 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
}
 8004bf0:	bf00      	nop
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000804 	.word	0x20000804
 8004bfc:	200006dc 	.word	0x200006dc

08004c00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <vTaskPlaceOnEventListRestricted+0x26>
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e7fe      	b.n	8004c24 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <vTaskPlaceOnEventListRestricted+0x50>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7fe fe3c 	bl	80038ac <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	68b8      	ldr	r0, [r7, #8]
 8004c44:	f000 fad6 	bl	80051f4 <prvAddCurrentTaskToDelayedList>
	}
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200006dc 	.word	0x200006dc

08004c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <xTaskRemoveFromEventList+0x2a>
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e7fe      	b.n	8004c7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3318      	adds	r3, #24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fe6f 	bl	8003966 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <xTaskRemoveFromEventList+0xac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d11c      	bne.n	8004cca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe fe66 	bl	8003966 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <xTaskRemoveFromEventList+0xb0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <xTaskRemoveFromEventList+0xb0>)
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <xTaskRemoveFromEventList+0xb4>)
 8004cba:	441a      	add	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f7fe fdf2 	bl	80038ac <vListInsertEnd>
 8004cc8:	e005      	b.n	8004cd6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3318      	adds	r3, #24
 8004cce:	4619      	mov	r1, r3
 8004cd0:	480e      	ldr	r0, [pc, #56]	; (8004d0c <xTaskRemoveFromEventList+0xb8>)
 8004cd2:	f7fe fdeb 	bl	80038ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <xTaskRemoveFromEventList+0xbc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d905      	bls.n	8004cf0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <xTaskRemoveFromEventList+0xc0>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e001      	b.n	8004cf4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cf4:	697b      	ldr	r3, [r7, #20]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000804 	.word	0x20000804
 8004d04:	200007e4 	.word	0x200007e4
 8004d08:	200006e0 	.word	0x200006e0
 8004d0c:	2000079c 	.word	0x2000079c
 8004d10:	200006dc 	.word	0x200006dc
 8004d14:	200007f0 	.word	0x200007f0

08004d18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004d22:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <vTaskRemoveFromUnorderedEventList+0x26>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	e7fe      	b.n	8004d3c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <vTaskRemoveFromUnorderedEventList+0x50>
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e7fe      	b.n	8004d66 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fe fdfc 	bl	8003966 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fdf7 	bl	8003966 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004d98:	441a      	add	r2, r3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fe fd83 	bl	80038ac <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d902      	bls.n	8004dba <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000804 	.word	0x20000804
 8004dc8:	200007e4 	.word	0x200007e4
 8004dcc:	200006e0 	.word	0x200006e0
 8004dd0:	200006dc 	.word	0x200006dc
 8004dd4:	200007f0 	.word	0x200007f0

08004dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <vTaskInternalSetTimeOutState+0x24>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <vTaskInternalSetTimeOutState+0x28>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	200007f4 	.word	0x200007f4
 8004e00:	200007e0 	.word	0x200007e0

08004e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <xTaskCheckForTimeOut+0x24>
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e7fe      	b.n	8004e26 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <xTaskCheckForTimeOut+0x3e>
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	e7fe      	b.n	8004e40 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004e42:	f000 feab 	bl	8005b9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <xTaskCheckForTimeOut+0xb8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d102      	bne.n	8004e66 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e023      	b.n	8004eae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <xTaskCheckForTimeOut+0xbc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d007      	beq.n	8004e82 <xTaskCheckForTimeOut+0x7e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d302      	bcc.n	8004e82 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e015      	b.n	8004eae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d20b      	bcs.n	8004ea4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff9d 	bl	8004dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	e004      	b.n	8004eae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eae:	f000 fea3 	bl	8005bf8 <vPortExitCritical>

	return xReturn;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200007e0 	.word	0x200007e0
 8004ec0:	200007f4 	.word	0x200007f4

08004ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <vTaskMissedYield+0x14>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	200007f0 	.word	0x200007f0

08004edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ee4:	f000 f852 	bl	8004f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <prvIdleTask+0x28>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d9f9      	bls.n	8004ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <prvIdleTask+0x2c>)
 8004ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f00:	e7f0      	b.n	8004ee4 <prvIdleTask+0x8>
 8004f02:	bf00      	nop
 8004f04:	200006e0 	.word	0x200006e0
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e00c      	b.n	8004f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4a12      	ldr	r2, [pc, #72]	; (8004f6c <prvInitialiseTaskLists+0x60>)
 8004f24:	4413      	add	r3, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fc93 	bl	8003852 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d9ef      	bls.n	8004f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f38:	480d      	ldr	r0, [pc, #52]	; (8004f70 <prvInitialiseTaskLists+0x64>)
 8004f3a:	f7fe fc8a 	bl	8003852 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f3e:	480d      	ldr	r0, [pc, #52]	; (8004f74 <prvInitialiseTaskLists+0x68>)
 8004f40:	f7fe fc87 	bl	8003852 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f44:	480c      	ldr	r0, [pc, #48]	; (8004f78 <prvInitialiseTaskLists+0x6c>)
 8004f46:	f7fe fc84 	bl	8003852 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f4a:	480c      	ldr	r0, [pc, #48]	; (8004f7c <prvInitialiseTaskLists+0x70>)
 8004f4c:	f7fe fc81 	bl	8003852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f50:	480b      	ldr	r0, [pc, #44]	; (8004f80 <prvInitialiseTaskLists+0x74>)
 8004f52:	f7fe fc7e 	bl	8003852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <prvInitialiseTaskLists+0x78>)
 8004f58:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <prvInitialiseTaskLists+0x64>)
 8004f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <prvInitialiseTaskLists+0x7c>)
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <prvInitialiseTaskLists+0x68>)
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200006e0 	.word	0x200006e0
 8004f70:	2000076c 	.word	0x2000076c
 8004f74:	20000780 	.word	0x20000780
 8004f78:	2000079c 	.word	0x2000079c
 8004f7c:	200007b0 	.word	0x200007b0
 8004f80:	200007c8 	.word	0x200007c8
 8004f84:	20000794 	.word	0x20000794
 8004f88:	20000798 	.word	0x20000798

08004f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f92:	e019      	b.n	8004fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f94:	f000 fe02 	bl	8005b9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <prvCheckTasksWaitingTermination+0x4c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe fcde 	bl	8003966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004faa:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <prvCheckTasksWaitingTermination+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <prvCheckTasksWaitingTermination+0x50>)
 8004fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fbe:	f000 fe1b 	bl	8005bf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f80e 	bl	8004fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e1      	bne.n	8004f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	200007b0 	.word	0x200007b0
 8004fdc:	200007dc 	.word	0x200007dc
 8004fe0:	200007c4 	.word	0x200007c4

08004fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 ffaa 	bl	8005f54 <vPortFree>
				vPortFree( pxTCB );
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 ffa7 	bl	8005f54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005006:	e017      	b.n	8005038 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500e:	2b01      	cmp	r3, #1
 8005010:	d103      	bne.n	800501a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 ff9e 	bl	8005f54 <vPortFree>
	}
 8005018:	e00e      	b.n	8005038 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005020:	2b02      	cmp	r3, #2
 8005022:	d009      	beq.n	8005038 <prvDeleteTCB+0x54>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e7fe      	b.n	8005036 <prvDeleteTCB+0x52>
	}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvResetNextTaskUnblockTime+0x38>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <prvResetNextTaskUnblockTime+0x3c>)
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005058:	e008      	b.n	800506c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prvResetNextTaskUnblockTime+0x38>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <prvResetNextTaskUnblockTime+0x3c>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000794 	.word	0x20000794
 800507c:	200007fc 	.word	0x200007fc

08005080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <xTaskGetSchedulerState+0x34>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800508e:	2301      	movs	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e008      	b.n	80050a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <xTaskGetSchedulerState+0x38>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800509c:	2302      	movs	r3, #2
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	e001      	b.n	80050a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050a6:	687b      	ldr	r3, [r7, #4]
	}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	200007e8 	.word	0x200007e8
 80050b8:	20000804 	.word	0x20000804

080050bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d06c      	beq.n	80051ac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050d2:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <xTaskPriorityDisinherit+0xfc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d009      	beq.n	80050f0 <xTaskPriorityDisinherit+0x34>
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e7fe      	b.n	80050ee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <xTaskPriorityDisinherit+0x50>
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	e7fe      	b.n	800510a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	429a      	cmp	r2, r3
 8005120:	d044      	beq.n	80051ac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005126:	2b00      	cmp	r3, #0
 8005128:	d140      	bne.n	80051ac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3304      	adds	r3, #4
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fc19 	bl	8003966 <uxListRemove>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d115      	bne.n	8005166 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	491f      	ldr	r1, [pc, #124]	; (80051bc <xTaskPriorityDisinherit+0x100>)
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <xTaskPriorityDisinherit+0xaa>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	2201      	movs	r2, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43da      	mvns	r2, r3
 800515c:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <xTaskPriorityDisinherit+0x104>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4013      	ands	r3, r2
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <xTaskPriorityDisinherit+0x104>)
 8005164:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	f1c3 0207 	rsb	r2, r3, #7
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	2201      	movs	r2, #1
 8005180:	409a      	lsls	r2, r3
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <xTaskPriorityDisinherit+0x104>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	4a0d      	ldr	r2, [pc, #52]	; (80051c0 <xTaskPriorityDisinherit+0x104>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4a08      	ldr	r2, [pc, #32]	; (80051bc <xTaskPriorityDisinherit+0x100>)
 800519a:	441a      	add	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fe fb82 	bl	80038ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051ac:	697b      	ldr	r3, [r7, #20]
	}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200006dc 	.word	0x200006dc
 80051bc:	200006e0 	.word	0x200006e0
 80051c0:	200007e4 	.word	0x200007e4

080051c4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <uxTaskResetEventItemValue+0x2c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <uxTaskResetEventItemValue+0x2c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <uxTaskResetEventItemValue+0x2c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1c2 0207 	rsb	r2, r2, #7
 80051e0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80051e2:	687b      	ldr	r3, [r7, #4]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	200006dc 	.word	0x200006dc

080051f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051fe:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005204:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fbab 	bl	8003966 <uxListRemove>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005216:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	2201      	movs	r2, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43da      	mvns	r2, r3
 8005224:	4b21      	ldr	r3, [pc, #132]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4013      	ands	r3, r2
 800522a:	4a20      	ldr	r2, [pc, #128]	; (80052ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800522c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d10a      	bne.n	800524c <prvAddCurrentTaskToDelayedList+0x58>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3304      	adds	r3, #4
 8005242:	4619      	mov	r1, r3
 8005244:	481a      	ldr	r0, [pc, #104]	; (80052b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005246:	f7fe fb31 	bl	80038ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800524a:	e026      	b.n	800529a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005254:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	429a      	cmp	r2, r3
 8005262:	d209      	bcs.n	8005278 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fe fb3f 	bl	80038f4 <vListInsert>
}
 8005276:	e010      	b.n	800529a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7fe fb35 	bl	80038f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d202      	bcs.n	800529a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6013      	str	r3, [r2, #0]
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200007e0 	.word	0x200007e0
 80052a8:	200006dc 	.word	0x200006dc
 80052ac:	200007e4 	.word	0x200007e4
 80052b0:	200007c8 	.word	0x200007c8
 80052b4:	20000798 	.word	0x20000798
 80052b8:	20000794 	.word	0x20000794
 80052bc:	200007fc 	.word	0x200007fc

080052c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052ca:	f000 faff 	bl	80058cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052ce:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <xTimerCreateTimerTask+0x80>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d021      	beq.n	800531a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052de:	1d3a      	adds	r2, r7, #4
 80052e0:	f107 0108 	add.w	r1, r7, #8
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fb fb5f 	bl	80009ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	9202      	str	r2, [sp, #8]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	2302      	movs	r3, #2
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	460a      	mov	r2, r1
 8005300:	4910      	ldr	r1, [pc, #64]	; (8005344 <xTimerCreateTimerTask+0x84>)
 8005302:	4811      	ldr	r0, [pc, #68]	; (8005348 <xTimerCreateTimerTask+0x88>)
 8005304:	f7ff f82a 	bl	800435c <xTaskCreateStatic>
 8005308:	4602      	mov	r2, r0
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <xTimerCreateTimerTask+0x8c>)
 800530c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <xTimerCreateTimerTask+0x8c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005316:	2301      	movs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <xTimerCreateTimerTask+0x74>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e7fe      	b.n	8005332 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005334:	697b      	ldr	r3, [r7, #20]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000838 	.word	0x20000838
 8005344:	08006524 	.word	0x08006524
 8005348:	08005481 	.word	0x08005481
 800534c:	2000083c 	.word	0x2000083c

08005350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <xTimerGenericCommand+0x2c>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	e7fe      	b.n	800537a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <xTimerGenericCommand+0x94>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02a      	beq.n	80053da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b05      	cmp	r3, #5
 8005394:	dc18      	bgt.n	80053c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005396:	f7ff fe73 	bl	8005080 <xTaskGetSchedulerState>
 800539a:	4603      	mov	r3, r0
 800539c:	2b02      	cmp	r3, #2
 800539e:	d109      	bne.n	80053b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <xTimerGenericCommand+0x94>)
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	f107 0110 	add.w	r1, r7, #16
 80053a8:	2300      	movs	r3, #0
 80053aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ac:	f7fe fc00 	bl	8003bb0 <xQueueGenericSend>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24
 80053b2:	e012      	b.n	80053da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <xTimerGenericCommand+0x94>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	f107 0110 	add.w	r1, r7, #16
 80053bc:	2300      	movs	r3, #0
 80053be:	2200      	movs	r2, #0
 80053c0:	f7fe fbf6 	bl	8003bb0 <xQueueGenericSend>
 80053c4:	6278      	str	r0, [r7, #36]	; 0x24
 80053c6:	e008      	b.n	80053da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <xTimerGenericCommand+0x94>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	f107 0110 	add.w	r1, r7, #16
 80053d0:	2300      	movs	r3, #0
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	f7fe fce6 	bl	8003da4 <xQueueGenericSendFromISR>
 80053d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000838 	.word	0x20000838

080053e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <prvProcessExpiredTimer+0x94>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3304      	adds	r3, #4
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fab0 	bl	8003966 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	18d1      	adds	r1, r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	6978      	ldr	r0, [r7, #20]
 8005422:	f000 f8d1 	bl	80055c8 <prvInsertTimerInActiveList>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01e      	beq.n	800546a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800542c:	2300      	movs	r3, #0
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	2100      	movs	r1, #0
 8005436:	6978      	ldr	r0, [r7, #20]
 8005438:	f7ff ff8a 	bl	8005350 <xTimerGenericCommand>
 800543c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d112      	bne.n	800546a <prvProcessExpiredTimer+0x82>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e7fe      	b.n	8005456 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	6978      	ldr	r0, [r7, #20]
 8005470:	4798      	blx	r3
}
 8005472:	bf00      	nop
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000830 	.word	0x20000830

08005480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f857 	bl	8005540 <prvGetNextExpireTime>
 8005492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4619      	mov	r1, r3
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 f803 	bl	80054a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800549e:	f000 f8d5 	bl	800564c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054a2:	e7f1      	b.n	8005488 <prvTimerTask+0x8>

080054a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054ae:	f7ff f97d 	bl	80047ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b2:	f107 0308 	add.w	r3, r7, #8
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f866 	bl	8005588 <prvSampleTimeNow>
 80054bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d130      	bne.n	8005526 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <prvProcessTimerOrBlockTask+0x3c>
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d806      	bhi.n	80054e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054d2:	f7ff f979 	bl	80047c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff85 	bl	80053e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054de:	e024      	b.n	800552a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <prvProcessTimerOrBlockTask+0x90>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <prvProcessTimerOrBlockTask+0x50>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <prvProcessTimerOrBlockTask+0x52>
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <prvProcessTimerOrBlockTask+0x94>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	4619      	mov	r1, r3
 8005506:	f7fe fef5 	bl	80042f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800550a:	f7ff f95d 	bl	80047c8 <xTaskResumeAll>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <prvProcessTimerOrBlockTask+0x98>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
}
 8005524:	e001      	b.n	800552a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005526:	f7ff f94f 	bl	80047c8 <xTaskResumeAll>
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000834 	.word	0x20000834
 8005538:	20000838 	.word	0x20000838
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <prvGetNextExpireTime+0x44>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <prvGetNextExpireTime+0x16>
 8005552:	2201      	movs	r2, #1
 8005554:	e000      	b.n	8005558 <prvGetNextExpireTime+0x18>
 8005556:	2200      	movs	r2, #0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005564:	4b07      	ldr	r3, [pc, #28]	; (8005584 <prvGetNextExpireTime+0x44>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	e001      	b.n	8005574 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005574:	68fb      	ldr	r3, [r7, #12]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000830 	.word	0x20000830

08005588 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005590:	f7ff f9b6 	bl	8004900 <xTaskGetTickCount>
 8005594:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005596:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <prvSampleTimeNow+0x3c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	429a      	cmp	r2, r3
 800559e:	d205      	bcs.n	80055ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055a0:	f000 f930 	bl	8005804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055b2:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <prvSampleTimeNow+0x3c>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055b8:	68fb      	ldr	r3, [r7, #12]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000840 	.word	0x20000840

080055c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d812      	bhi.n	8005614 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e01b      	b.n	800563a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <prvInsertTimerInActiveList+0x7c>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fe f971 	bl	80038f4 <vListInsert>
 8005612:	e012      	b.n	800563a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d206      	bcs.n	800562a <prvInsertTimerInActiveList+0x62>
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e007      	b.n	800563a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <prvInsertTimerInActiveList+0x80>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fe f95d 	bl	80038f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800563a:	697b      	ldr	r3, [r7, #20]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000834 	.word	0x20000834
 8005648:	20000830 	.word	0x20000830

0800564c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08e      	sub	sp, #56	; 0x38
 8005650:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005652:	e0c6      	b.n	80057e2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da17      	bge.n	800568a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	3304      	adds	r3, #4
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <prvProcessReceivedCommands+0x2e>
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	e7fe      	b.n	8005678 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005680:	6850      	ldr	r0, [r2, #4]
 8005682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	4611      	mov	r1, r2
 8005688:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f2c0 80a7 	blt.w	80057e0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe f95f 	bl	8003966 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056a8:	463b      	mov	r3, r7
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff ff6c 	bl	8005588 <prvSampleTimeNow>
 80056b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b09      	cmp	r3, #9
 80056b6:	f200 8094 	bhi.w	80057e2 <prvProcessReceivedCommands+0x196>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <prvProcessReceivedCommands+0x74>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056e9 	.word	0x080056e9
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	0800576f 	.word	0x0800576f
 80056d4:	080057b7 	.word	0x080057b7
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056e9 	.word	0x080056e9
 80056e0:	0800575b 	.word	0x0800575b
 80056e4:	0800576f 	.word	0x0800576f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	18d1      	adds	r1, r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005708:	f7ff ff5e 	bl	80055c8 <prvInsertTimerInActiveList>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d067      	beq.n	80057e2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	441a      	add	r2, r3
 8005730:	2300      	movs	r3, #0
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	2100      	movs	r1, #0
 8005738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573a:	f7ff fe09 	bl	8005350 <xTimerGenericCommand>
 800573e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d14d      	bne.n	80057e2 <prvProcessReceivedCommands+0x196>
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e7fe      	b.n	8005758 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800576c:	e039      	b.n	80057e2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	b2da      	uxtb	r2, r3
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <prvProcessReceivedCommands+0x156>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e7fe      	b.n	80057a0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	18d1      	adds	r1, r2, r3
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b0:	f7ff ff0a 	bl	80055c8 <prvInsertTimerInActiveList>
					break;
 80057b4:	e015      	b.n	80057e2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80057c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c6:	f000 fbc5 	bl	8005f54 <vPortFree>
 80057ca:	e00a      	b.n	80057e2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057de:	e000      	b.n	80057e2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <prvProcessReceivedCommands+0x1b4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	1d39      	adds	r1, r7, #4
 80057e8:	2200      	movs	r2, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fb6e 	bl	8003ecc <xQueueReceive>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f47f af2e 	bne.w	8005654 <prvProcessReceivedCommands+0x8>
	}
}
 80057f8:	bf00      	nop
 80057fa:	3730      	adds	r7, #48	; 0x30
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000838 	.word	0x20000838

08005804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800580a:	e047      	b.n	800589c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3304      	adds	r3, #4
 8005824:	4618      	mov	r0, r3
 8005826:	f7fe f89e 	bl	8003966 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90e      	bls.n	8005870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800585e:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7fe f843 	bl	80038f4 <vListInsert>
 800586e:	e015      	b.n	800589c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fd68 	bl	8005350 <xTimerGenericCommand>
 8005880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <prvSwitchTimerLists+0x98>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	e7fe      	b.n	800589a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800589c:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1b2      	bne.n	800580c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <prvSwitchTimerLists+0xc4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 80058b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <prvSwitchTimerLists+0xc4>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6013      	str	r3, [r2, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000830 	.word	0x20000830
 80058c8:	20000834 	.word	0x20000834

080058cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058d2:	f000 f963 	bl	8005b9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d120      	bne.n	8005920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058de:	4814      	ldr	r0, [pc, #80]	; (8005930 <prvCheckForValidListAndQueue+0x64>)
 80058e0:	f7fd ffb7 	bl	8003852 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058e4:	4813      	ldr	r0, [pc, #76]	; (8005934 <prvCheckForValidListAndQueue+0x68>)
 80058e6:	f7fd ffb4 	bl	8003852 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <prvCheckForValidListAndQueue+0x6c>)
 80058ec:	4a10      	ldr	r2, [pc, #64]	; (8005930 <prvCheckForValidListAndQueue+0x64>)
 80058ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <prvCheckForValidListAndQueue+0x70>)
 80058f2:	4a10      	ldr	r2, [pc, #64]	; (8005934 <prvCheckForValidListAndQueue+0x68>)
 80058f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058f6:	2300      	movs	r3, #0
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <prvCheckForValidListAndQueue+0x74>)
 80058fc:	4a11      	ldr	r2, [pc, #68]	; (8005944 <prvCheckForValidListAndQueue+0x78>)
 80058fe:	2110      	movs	r1, #16
 8005900:	200a      	movs	r0, #10
 8005902:	f7fe f8c3 	bl	8003a8c <xQueueGenericCreateStatic>
 8005906:	4602      	mov	r2, r0
 8005908:	4b08      	ldr	r3, [pc, #32]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 800590a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	490b      	ldr	r1, [pc, #44]	; (8005948 <prvCheckForValidListAndQueue+0x7c>)
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fcc2 	bl	80042a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005920:	f000 f96a 	bl	8005bf8 <vPortExitCritical>
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000838 	.word	0x20000838
 8005930:	20000808 	.word	0x20000808
 8005934:	2000081c 	.word	0x2000081c
 8005938:	20000830 	.word	0x20000830
 800593c:	20000834 	.word	0x20000834
 8005940:	200008e4 	.word	0x200008e4
 8005944:	20000844 	.word	0x20000844
 8005948:	0800652c 	.word	0x0800652c

0800594c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3b04      	subs	r3, #4
 800595c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3b04      	subs	r3, #4
 800596a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b04      	subs	r3, #4
 800597a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800597c:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <pxPortInitialiseStack+0x64>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b14      	subs	r3, #20
 8005986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f06f 0202 	mvn.w	r2, #2
 800599a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3b20      	subs	r3, #32
 80059a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059a2:	68fb      	ldr	r3, [r7, #12]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	080059b5 	.word	0x080059b5

080059b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <prvTaskExitError+0x50>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d009      	beq.n	80059dc <prvTaskExitError+0x28>
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e7fe      	b.n	80059da <prvTaskExitError+0x26>
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ee:	bf00      	nop
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0fc      	beq.n	80059f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
	...

08005a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <pxCurrentTCBConst2>)
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	6808      	ldr	r0, [r1, #0]
 8005a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	f380 8809 	msr	PSP, r0
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8811 	msr	BASEPRI, r0
 8005a2a:	4770      	bx	lr
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst2>:
 8005a30:	200006dc 	.word	0x200006dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a38:	4808      	ldr	r0, [pc, #32]	; (8005a5c <prvPortStartFirstTask+0x24>)
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	f380 8808 	msr	MSP, r0
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8814 	msr	CONTROL, r0
 8005a4a:	b662      	cpsie	i
 8005a4c:	b661      	cpsie	f
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	df00      	svc	0
 8005a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a5a:	bf00      	nop
 8005a5c:	e000ed08 	.word	0xe000ed08

08005a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a66:	4b44      	ldr	r3, [pc, #272]	; (8005b78 <xPortStartScheduler+0x118>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a44      	ldr	r2, [pc, #272]	; (8005b7c <xPortStartScheduler+0x11c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d109      	bne.n	8005a84 <xPortStartScheduler+0x24>
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e7fe      	b.n	8005a82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a84:	4b3c      	ldr	r3, [pc, #240]	; (8005b78 <xPortStartScheduler+0x118>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <xPortStartScheduler+0x120>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d109      	bne.n	8005aa2 <xPortStartScheduler+0x42>
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e7fe      	b.n	8005aa0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <xPortStartScheduler+0x124>)
 8005aa4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <xPortStartScheduler+0x128>)
 8005ac8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aca:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005acc:	2207      	movs	r2, #7
 8005ace:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad0:	e009      	b.n	8005ae6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005ada:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d0ef      	beq.n	8005ad2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005af2:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1c3 0307 	rsb	r3, r3, #7
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d009      	beq.n	8005b12 <xPortStartScheduler+0xb2>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	e7fe      	b.n	8005b10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b12:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b30:	4b17      	ldr	r3, [pc, #92]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a16      	ldr	r2, [pc, #88]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b3c:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b48:	f000 f8d6 	bl	8005cf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b4c:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b52:	f000 f8f5 	bl	8005d40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b62:	f7ff ff69 	bl	8005a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b66:	f7fe ff93 	bl	8004a90 <vTaskSwitchContext>
	prvTaskExitError();
 8005b6a:	f7ff ff23 	bl	80059b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	e000ed00 	.word	0xe000ed00
 8005b7c:	410fc271 	.word	0x410fc271
 8005b80:	410fc270 	.word	0x410fc270
 8005b84:	e000e400 	.word	0xe000e400
 8005b88:	2000092c 	.word	0x2000092c
 8005b8c:	20000930 	.word	0x20000930
 8005b90:	e000ed20 	.word	0xe000ed20
 8005b94:	2000000c 	.word	0x2000000c
 8005b98:	e000ef34 	.word	0xe000ef34

08005b9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <vPortEnterCritical+0x54>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <vPortEnterCritical+0x54>)
 8005bbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <vPortEnterCritical+0x54>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10e      	bne.n	8005be4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <vPortEnterCritical+0x58>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <vPortEnterCritical+0x48>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	e7fe      	b.n	8005be2 <vPortEnterCritical+0x46>
	}
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	2000000c 	.word	0x2000000c
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <vPortExitCritical+0x22>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	607b      	str	r3, [r7, #4]
 8005c18:	e7fe      	b.n	8005c18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <vPortExitCritical+0x3e>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c
	...

08005c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c50:	f3ef 8009 	mrs	r0, PSP
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <pxCurrentTCBConst>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f01e 0f10 	tst.w	lr, #16
 8005c60:	bf08      	it	eq
 8005c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	6010      	str	r0, [r2, #0]
 8005c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c74:	f380 8811 	msr	BASEPRI, r0
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f7fe ff06 	bl	8004a90 <vTaskSwitchContext>
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f380 8811 	msr	BASEPRI, r0
 8005c8c:	bc09      	pop	{r0, r3}
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	6808      	ldr	r0, [r1, #0]
 8005c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	f01e 0f10 	tst.w	lr, #16
 8005c9a:	bf08      	it	eq
 8005c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ca0:	f380 8809 	msr	PSP, r0
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst>:
 8005cb0:	200006dc 	.word	0x200006dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cd0:	f7fe fe26 	bl	8004920 <xTaskIncrementTick>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <SysTick_Handler+0x3c>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <vPortSetupTimerInterrupt+0x34>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <vPortSetupTimerInterrupt+0x38>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vPortSetupTimerInterrupt+0x3c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <vPortSetupTimerInterrupt+0x40>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	099b      	lsrs	r3, r3, #6
 8005d14:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <vPortSetupTimerInterrupt+0x44>)
 8005d16:	3b01      	subs	r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <vPortSetupTimerInterrupt+0x34>)
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	e000e010 	.word	0xe000e010
 8005d30:	e000e018 	.word	0xe000e018
 8005d34:	20000000 	.word	0x20000000
 8005d38:	10624dd3 	.word	0x10624dd3
 8005d3c:	e000e014 	.word	0xe000e014

08005d40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d50 <vPortEnableVFP+0x10>
 8005d44:	6801      	ldr	r1, [r0, #0]
 8005d46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d4a:	6001      	str	r1, [r0, #0]
 8005d4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d4e:	bf00      	nop
 8005d50:	e000ed88 	.word	0xe000ed88

08005d54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d913      	bls.n	8005d8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d66:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <vPortValidateInterruptPriority+0x6c>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <vPortValidateInterruptPriority+0x70>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	7afa      	ldrb	r2, [r7, #11]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d209      	bcs.n	8005d8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e7fe      	b.n	8005d8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <vPortValidateInterruptPriority+0x74>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <vPortValidateInterruptPriority+0x78>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d909      	bls.n	8005db2 <vPortValidateInterruptPriority+0x5e>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	e7fe      	b.n	8005db0 <vPortValidateInterruptPriority+0x5c>
	}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e3f0 	.word	0xe000e3f0
 8005dc4:	2000092c 	.word	0x2000092c
 8005dc8:	e000ed0c 	.word	0xe000ed0c
 8005dcc:	20000930 	.word	0x20000930

08005dd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ddc:	f7fe fce6 	bl	80047ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005de0:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <pvPortMalloc+0x170>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005de8:	f000 f90c 	bl	8006004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dec:	4b55      	ldr	r3, [pc, #340]	; (8005f44 <pvPortMalloc+0x174>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 808c 	bne.w	8005f12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01c      	beq.n	8005e3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e00:	2208      	movs	r2, #8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d013      	beq.n	8005e3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f023 0307 	bic.w	r3, r3, #7
 8005e18:	3308      	adds	r3, #8
 8005e1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <pvPortMalloc+0x6a>
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e7fe      	b.n	8005e38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d068      	beq.n	8005f12 <pvPortMalloc+0x142>
 8005e40:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <pvPortMalloc+0x178>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d863      	bhi.n	8005f12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e4a:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <pvPortMalloc+0x17c>)
 8005e4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e4e:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <pvPortMalloc+0x17c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e54:	e004      	b.n	8005e60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <pvPortMalloc+0xa2>
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f1      	bne.n	8005e56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e72:	4b33      	ldr	r3, [pc, #204]	; (8005f40 <pvPortMalloc+0x170>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d04a      	beq.n	8005f12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2208      	movs	r2, #8
 8005e82:	4413      	add	r3, r2
 8005e84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad2      	subs	r2, r2, r3
 8005e96:	2308      	movs	r3, #8
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d91e      	bls.n	8005edc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <pvPortMalloc+0xf4>
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	e7fe      	b.n	8005ec2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ed6:	69b8      	ldr	r0, [r7, #24]
 8005ed8:	f000 f8f6 	bl	80060c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <pvPortMalloc+0x178>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <pvPortMalloc+0x178>)
 8005ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <pvPortMalloc+0x178>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <pvPortMalloc+0x180>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d203      	bcs.n	8005efe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <pvPortMalloc+0x178>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <pvPortMalloc+0x180>)
 8005efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <pvPortMalloc+0x174>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f12:	f7fe fc59 	bl	80047c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <pvPortMalloc+0x164>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0x162>
	return pvReturn;
 8005f34:	69fb      	ldr	r3, [r7, #28]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000453c 	.word	0x2000453c
 8005f44:	20004548 	.word	0x20004548
 8005f48:	20004540 	.word	0x20004540
 8005f4c:	20004534 	.word	0x20004534
 8005f50:	20004544 	.word	0x20004544

08005f54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d046      	beq.n	8005ff4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f66:	2308      	movs	r3, #8
 8005f68:	425b      	negs	r3, r3
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <vPortFree+0xa8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <vPortFree+0x42>
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e7fe      	b.n	8005f94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <vPortFree+0x5e>
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	e7fe      	b.n	8005fb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <vPortFree+0xa8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d019      	beq.n	8005ff4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d115      	bne.n	8005ff4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <vPortFree+0xa8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fd8:	f7fe fbe8 	bl	80047ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <vPortFree+0xac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <vPortFree+0xac>)
 8005fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fea:	6938      	ldr	r0, [r7, #16]
 8005fec:	f000 f86c 	bl	80060c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ff0:	f7fe fbea 	bl	80047c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ff4:	bf00      	nop
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20004548 	.word	0x20004548
 8006000:	20004540 	.word	0x20004540

08006004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800600a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800600e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <prvHeapInit+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3307      	adds	r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <prvHeapInit+0xac>)
 8006034:	4413      	add	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800603c:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <prvHeapInit+0xb0>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006042:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <prvHeapInit+0xb0>)
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006050:	2208      	movs	r2, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <prvHeapInit+0xb4>)
 8006064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <prvHeapInit+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <prvHeapInit+0xb4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvHeapInit+0xb4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <prvHeapInit+0xb8>)
 8006092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <prvHeapInit+0xbc>)
 800609a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <prvHeapInit+0xc0>)
 800609e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000934 	.word	0x20000934
 80060b4:	20004534 	.word	0x20004534
 80060b8:	2000453c 	.word	0x2000453c
 80060bc:	20004544 	.word	0x20004544
 80060c0:	20004540 	.word	0x20004540
 80060c4:	20004548 	.word	0x20004548

080060c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <prvInsertBlockIntoFreeList+0xac>)
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <prvInsertBlockIntoFreeList+0x14>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d8f7      	bhi.n	80060d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d108      	bne.n	800610a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d118      	bne.n	8006150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d00d      	beq.n	8006146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e008      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e003      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d002      	beq.n	8006166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20004534 	.word	0x20004534
 8006178:	2000453c 	.word	0x2000453c

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4e0d      	ldr	r6, [pc, #52]	; (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	; (80061b8 <__libc_init_array+0x3c>)
 8006182:	1ba4      	subs	r4, r4, r6
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2500      	movs	r5, #0
 8006188:	42a5      	cmp	r5, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4e0b      	ldr	r6, [pc, #44]	; (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <__libc_init_array+0x44>)
 8006190:	f000 f82c 	bl	80061ec <_init>
 8006194:	1ba4      	subs	r4, r4, r6
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2500      	movs	r5, #0
 800619a:	42a5      	cmp	r5, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a4:	4798      	blx	r3
 80061a6:	3501      	adds	r5, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ae:	4798      	blx	r3
 80061b0:	3501      	adds	r5, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	0800655c 	.word	0x0800655c
 80061b8:	0800655c 	.word	0x0800655c
 80061bc:	0800655c 	.word	0x0800655c
 80061c0:	08006560 	.word	0x08006560

080061c4 <memcpy>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	1e43      	subs	r3, r0, #1
 80061c8:	440a      	add	r2, r1
 80061ca:	4291      	cmp	r1, r2
 80061cc:	d100      	bne.n	80061d0 <memcpy+0xc>
 80061ce:	bd10      	pop	{r4, pc}
 80061d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d8:	e7f7      	b.n	80061ca <memcpy+0x6>

080061da <memset>:
 80061da:	4402      	add	r2, r0
 80061dc:	4603      	mov	r3, r0
 80061de:	4293      	cmp	r3, r2
 80061e0:	d100      	bne.n	80061e4 <memset+0xa>
 80061e2:	4770      	bx	lr
 80061e4:	f803 1b01 	strb.w	r1, [r3], #1
 80061e8:	e7f9      	b.n	80061de <memset+0x4>
	...

080061ec <_init>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr

080061f8 <_fini>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr
